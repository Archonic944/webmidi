{"version":3,"file":"webmidi.iife.min.js","sources":["../src/Note.js","../src/Utilities.js","../src/Enumerations.js","../src/InputChannel.js","../src/Input.js","../src/Message.js","../src/WebMidi.js"],"sourcesContent":["import {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/**\n * The `Note` class represents a single musical note such as `\"D3\"`, `\"G#4\"`, `\"F-1\"`, `\"Gb7\"`, etc.\n *\n * `Note` objects can be played back on a single channel by calling\n * [OutputChannel.playNote()]{@link OutputChannel#playNote} or on multiple channels of the same\n * output by calling [Output.playNote()]{@link Output#playNote}.\n *\n * The note has attack and release velocities set at 0.5 by default. These can be changed by passing\n * in the appropriate option. It is also possible to set a system-wide default for attack and\n * release velocities by using the `WebMidi.defaults` property.\n *\n * The note may have a duration. If it does, playback will be automatically stopped when the\n * duration has elapsed by sending a **noteoff** event. By default, the duration is set to\n * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a\n * method such as [OutputChannel.stopNote()]{@link OutputChannel#stopNote},\n * [Output.stopNote()]{@link Output#stopNote} or similar.\n *\n * @param value {string|number} The value used to create the note. If an identifier string is used,\n * it must start with the note letter, optionally followed by an accidental and followed by the\n * octave number (`\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`, etc.). If a number is used, it must be an\n * integer between 0 and 127. In this case, middle C is considered to be C4 (note number 60).\n *\n * @param {Object} [options={}]\n *\n * @param {number} [options.duration=Infinity] The number of milliseconds before the note should be\n * explicitly stopped.\n *\n * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n * `attack` and `rawAttack` are specified, the latter has precedence.\n *\n * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n * `release` and `rawRelease` are specified, the latter has precedence.\n *\n * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n * `attack` and `rawAttack` are specified, the latter has precedence.\n *\n * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n * `release` and `rawRelease` are specified, the latter has precedence.\n *\n * @throws {Error} Invalid note identifier\n * @throws {RangeError} Invalid name value\n * @throws {RangeError} Invalid accidental value\n * @throws {RangeError} Invalid octave value\n * @throws {RangeError} Invalid duration value\n * @throws {RangeError} Invalid attack value\n * @throws {RangeError} Invalid release value\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Note {\n\n  constructor(value, options = {}) {\n\n    // Assign property defaults\n    this.duration = WebMidi.defaults.note.duration;\n    this.attack = WebMidi.defaults.note.attack;\n    this.release = WebMidi.defaults.note.release;\n\n    // Assign property values from options (validation occurs in setter)\n    if (options.duration != undefined) this.duration = options.duration;\n    if (options.attack != undefined) this.attack = options.attack;\n    if (options.rawAttack != undefined) this.attack = Utilities.toNormalized(options.rawAttack);\n    if (options.release != undefined) this.release = options.release;\n    if (options.rawRelease != undefined) this.release = Utilities.toNormalized(options.rawRelease);\n\n    // Assign note depending on the way it was specified (name or number)\n    if (Number.isInteger(value)) {\n      this.identifier = Utilities.toNoteIdentifier(value);\n    } else {\n      this.identifier = value;\n    }\n\n  }\n\n  /**\n   * The name, optional accidental and octave of the note, as a string.\n   * @type {string}\n   * @since 3.0.0\n   */\n  get identifier() {\n    return this._name + (this._accidental || \"\") + this._octave;\n  }\n  set identifier(value) {\n\n    const fragments = Utilities.getNoteDetails(value);\n\n    if (WebMidi.validation) {\n      if (!value) throw new Error(\"Invalid note identifier\");\n    }\n\n    this._name = fragments.name;\n    this._accidental = fragments.accidental;\n    this._octave = fragments.octave;\n\n  }\n\n  /**\n   * The name (letter) of the note\n   * @type {string}\n   * @since 3.0.0\n   */\n  get name() {\n    return this._name;\n  }\n  set name(value) {\n\n    if (WebMidi.validation) {\n      value = value.toUpperCase();\n      if (![\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"].includes(value)) {\n        throw new Error(\"Invalid name value\");\n      }\n    }\n\n    this._name = value;\n\n  }\n\n  /**\n   * The accidental (#, ##, b or bb) of the note\n   * @type {string}\n   * @since 3.0.0\n   */\n  get accidental() {\n    return this._accidental;\n  }\n  set accidental(value) {\n\n    if (WebMidi.validation) {\n      value = value.toLowerCase();\n      if (![\"#\", \"##\", \"b\", \"bb\"].includes(value)) throw new Error(\"Invalid accidental value\");\n    }\n\n    this._accidental = value;\n\n  }\n\n  /**\n   * The octave of the note\n   * @type {number}\n   * @since 3.0.0\n   */\n  get octave() {\n    return this._octave;\n  }\n  set octave(value) {\n\n    if (WebMidi.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new Error(\"Invalid octave value\");\n    }\n\n    this._octave = value;\n\n  }\n\n  /**\n   * The duration of the note as a positive decimal number representing the number of milliseconds\n   * that the note should play for.\n   *\n   * @type {number}\n   * @since 3.0.0\n   */\n  get duration() {\n    return this._duration;\n  }\n  set duration(value) {\n\n    if (WebMidi.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || value === null || value < 0) {\n        throw new RangeError(\"Invalid duration value.\");\n      }\n    }\n\n    this._duration = value;\n\n  }\n\n  /**\n   * The attack velocity of the note as an integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get attack() {\n    return this._attack;\n  }\n  set attack(value) {\n    if (WebMidi.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || !(value >= 0 && value <= 1)) {\n        throw new RangeError(\"Invalid attack value.\");\n      }\n    }\n\n    this._attack = value;\n\n  }\n\n  /**\n   * The release velocity of the note as an integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get release() {\n    return this._release;\n  }\n  set release(value) {\n\n    if (WebMidi.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || !(value >= 0 && value <= 1)) {\n        throw new RangeError(\"Invalid release value.\");\n      }\n    }\n\n    this._release = value;\n\n  }\n\n  /**\n   * The attack velocity of the note as a positive integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get rawAttack() {\n    return Utilities.to7Bit(this._attack);\n  }\n\n  /**\n   * The release velocity of the note as a positive integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get rawRelease() {\n    return Utilities.to7Bit(this._release);\n  }\n\n  /**\n   * The MIDI number of the note. This number is derived from the note identifier using C4 as a\n   * reference for middle C.\n   *\n   * @type {number}\n   * @since 3.0.0\n   */\n  get number() {\n    return Utilities.toNoteNumber(this.identifier);\n  }\n\n  /**\n   * Returns a MIDI note number offset by octave and/or semitone. If the calculated value is less\n   * than 0, 0 will be returned. If the calculated value is more than 127, 127 will be returned. If\n   * an invalid value is supplied, 0 will be used.\n   *\n   * @param [octaveOffset] {number} An integer to offset the note number by octave.\n   * @param [semitoneOffset] {number} An integer to offset the note number by semitone.\n   * @returns {number} An integer between 0 and 127\n   */\n  getOffsetNumber(octaveOffset = 0, semitoneOffset = 0) {\n\n    if (WebMidi.validation) {\n      octaveOffset = parseInt(octaveOffset) || 0;\n      semitoneOffset = parseInt(semitoneOffset) || 0;\n    }\n\n    return Math.min(Math.max(this.number + (octaveOffset * 12) + semitoneOffset, 0), 127);\n\n  }\n\n}\n","import {Note} from \"./Note.js\";\nimport {WebMidi} from \"./WebMidi.js\";\n\n/**\n * The `Utilities` class contains general-purpose utility methods. All methods are static and\n * should be called using the class name. For example: `Utilities.getNoteDetails(\"C4\")`.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Utilities {\n\n  /**\n   * Returns a MIDI note number matching the identifier passed in the form of a string. The\n   * identifier must include the octave number. The identifier also optionally include a sharp (#),\n   * a double sharp (##), a flat (b) or a double flat (bb) symbol. For example, these are all valid\n   * identifiers: C5, G4, D#-1, F0, Gb7, Eb-1, Abb4, B##6, etc.\n   *\n   * When converting note identifiers to numbers, C4 is considered to be middle C (MIDI note number\n   * 60) as per the scientific pitch notation standard.\n   *\n   * The resulting note number can be offset by using the `octaveOffset` parameter.\n   *\n   * @param identifier {string} The identifier in the form of a letter, followed by an optional \"#\",\n   * \"##\", \"b\" or \"bb\" followed by the octave number. For exemple: C5, G4, D#-1, F0, Gb7, Eb-1,\n   * Abb4, B##6, etc.\n   *\n   * @param {number} [octaveOffset=0] A integer to offset the octave by.\n   *\n   * @returns {number} The MIDI note number (an integer between 0 and 127).\n   *\n   * @throws RangeError Invalid 'octaveOffset' value\n   *\n   * @throws TypeError Invalid note identifier\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   * @static\n   */\n  static toNoteNumber(identifier, octaveOffset = 0) {\n\n    // Validation\n    octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n    if (isNaN(octaveOffset)) throw new RangeError(\"Invalid 'octaveOffset' value\");\n    if (typeof identifier !== \"string\") identifier = \"\";\n\n    const fragments = this.getNoteDetails(identifier);\n    if (!fragments) throw new TypeError(\"Invalid note identifier\");\n\n    const notes = { C: 0, D: 2, E: 4, F: 5, G: 7, A: 9, B: 11 };\n    let result = (fragments.octave + 1 + octaveOffset) * 12;\n    result += notes[fragments.name];\n\n    if (fragments.accidental) {\n      if (fragments.accidental.startsWith(\"b\")) {\n        result -= fragments.accidental.length;\n      } else {\n        result += fragments.accidental.length;\n      }\n    }\n\n    if (result < 0 || result > 127) throw new RangeError(\"Invalid octaveOffset value\");\n\n    return result;\n\n  }\n\n  /**\n   * Given a proper note identifier (\"C#4\", \"Gb-1\", etc.) or a valid MIDI note number (9-127), this\n   * method returns an object containing broken down details about the specified note (uppercase\n   * letter, accidental and octave).\n   *\n   * When a number is specified, the translation to note is done using a value of 60 for middle C\n   * (C4 = middle C).\n   *\n   * @param value {string|number} A note identifier A  atring (\"C#4\", \"Gb-1\", etc.) or a MIDI note\n   * number (0-127).\n   *\n   * @returns {{octave: number, letter: string, accidental: string}}\n   *\n   * @throws TypeError Invalid note identifier\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static getNoteDetails(value) {\n\n    if (Number.isInteger(value)) value = this.toNoteIdentifier(value);\n\n    const matches = value.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\\d+)$/i);\n    if (!matches) throw new TypeError(\"Invalid note identifier\");\n\n    const name = matches[1].toUpperCase();\n    const octave = parseInt(matches[3]);\n    let accidental = matches[2].toLowerCase();\n    accidental = accidental === \"\" ? undefined : accidental;\n\n    const fragments = {\n      name: name,\n      accidental: accidental,\n      octave: octave,\n      identifier: name + (accidental || \"\") + octave\n    };\n\n    return fragments;\n\n  }\n\n  /**\n   * Returns a sanitized array of valid MIDI channel numbers (1-16). The parameter should be a\n   * single integer or an array of integers.\n   *\n   * For backwards-compatibility, passing `undefined` as a parameter to this method results in all\n   * channels being returned (1-16). Otherwise, parameters that cannot successfully be parsed to\n   * integers between 1 and 16 are silently ignored.\n   *\n   * @param [channel] {number|number[]} An integer or an array of integers to parse as channel\n   * numbers.\n   *\n   * @returns {Array} An array of 0 or more valid MIDI channel numbers.\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static sanitizeChannels(channel) {\n\n    let channels;\n\n    if (this.validation) {\n\n      if (channel === \"all\") { // backwards-compatibility\n        channels = [\"all\"];\n      } else if (channel === \"none\") { // backwards-compatibility\n        return [];\n      }\n\n    }\n\n    if (!Array.isArray(channel)) {\n      channels = [channel];\n    } else {\n      channels = channel;\n    }\n\n    // In order to preserve backwards-compatibility, we let this assignment as it is.\n    if (channels.indexOf(\"all\") > -1) {\n      channels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    }\n\n    return channels\n      .map(function(ch) {\n        return parseInt(ch);\n      })\n      .filter(function(ch) {\n        return (ch >= 1 && ch <= 16);\n      });\n\n  }\n\n  /**\n   * Returns a valid timestamp, relative to the navigation start of the document, derived from the\n   * `time` parameter. If the parameter is a string starting with the \"+\" sign and followed by a\n   * number, the resulting timestamp will be the sum of the current timestamp plus that number. If\n   * the parameter is a positive number, it will be returned as is. Otherwise, false will be\n   * returned.\n   *\n   * @param [time] {number|string} The time string (e.g. `\"+2000\"`) or number to parse\n   * @return {number|false} A positive number or `false` (if the time cannot be converted)\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static toTimestamp(time) {\n\n    let value = false;\n\n    const parsed = parseFloat(time);\n    if (isNaN(parsed)) return false;\n\n    if (typeof time === \"string\" && time.substring(0, 1) === \"+\") {\n      if (parsed >= 0) value = WebMidi.time + parsed;\n    } else {\n      if (parsed >= 0) value = parsed;\n    }\n\n    return value;\n\n  }\n\n  /**\n   * Returns a valid MIDI note number (0-127) given the specified input. The input usually is a\n   * string containing a note identifier (`\"C3\"`, `\"F#4\"`, `\"D-2\"`, `\"G8\"`, etc.). If an integer\n   * between 0 and 127 is passed, it will simply be returned as is (for convenience). Other strings\n   * will be parsed for integer value, if possible.\n   *\n   * If the input is an identifier, the resulting note number is offset by the `octaveOffset`\n   * parameter. For example, if you pass in \"C4\" (note number 60) and the `octaveOffset` value is\n   * -2, the resulting MIDI note number will be 36.\n   *\n   * @param input {string|number} A string or number to extract the MIDI note number from.\n   *\n   * @returns {number|false} A valid MIDI note number (0-127) or `false` if the input could not\n   * successfully be parsed to a note number.\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static guessNoteNumber(input, octaveOffset) {\n\n    // Validate and, if necessary, assign default\n    octaveOffset = parseInt(octaveOffset) || 0;\n\n    let output = false;\n\n    // Check input type\n    if (Number.isInteger(input) && input >= 0 && input <= 127) {        // uint\n      output = parseInt(input);\n    } else if (parseInt(input) >= 0 && parseInt(input) <= 127) {        // float or uint as string\n      output = parseInt(input);\n    } else if (typeof input === \"string\" || input instanceof String) {  // string\n      try {\n        output = this.toNoteNumber(input.trim(), octaveOffset);\n      } catch (e) {\n        return false;\n      }\n    }\n\n    return output;\n\n  }\n\n  /**\n   * Returns an identifier string representing a note name (with optional accidental) followed by an\n   * octave number. The octave can be offset by using the `octaveOffset` parameter.\n   *\n   * @param {number} number The MIDI note number to convert to a note identifier\n   * @param {number} octaveOffset An offset to apply to the resulting octave\n   *\n   * @returns {string}\n   *\n   * @throws RangeError Invalid note number\n   * @throws RangeError Invalid octaveOffset value\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static toNoteIdentifier(number, octaveOffset) {\n\n    number = parseInt(number);\n    if (isNaN(number) || number < 0 || number > 127) throw new RangeError(\"Invalid note number\");\n\n    octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n    if (isNaN(octaveOffset)) throw new RangeError(\"Invalid octaveOffset value\");\n\n    const notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n    const octave = Math.floor(number / 12 - 1) + octaveOffset;\n    return notes[number % 12] + octave.toString();\n\n  }\n\n  /**\n   * Converts the `input` parameter to a valid {@link Note} object. The input usually is an unsigned\n   * integer (0-127) or a note identifier (`\"C4\"`, `\"G#5\"`, etc.). If the input is a {@link Note}\n   * object, it will be returned as is.\n   *\n   * If the input is a note number or identifier, it is possible to specify options by providing the\n   * `options` parameter.\n   *\n   * @param [input] {number|string|Note}\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n   * be explicitly stopped.\n   *\n   * @param {number} [options.attack=64] The note's attack velocity as an integer between 0 and 127.\n   *\n   * @param {number} [options.release=64] The note's release velocity as an integer between 0 and\n   * 127.\n   *\n   * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n   * used when the input value is a note identifier.**\n   *\n   * @returns {Note}\n   *\n   * @throws TypeError The input could not be parsed to a note\n   *\n   * @since version 3.0.0\n   * @static\n   */\n  static buildNote(input, options= {}) {\n\n    options.octaveOffset = parseInt(options.octaveOffset) || 0;\n\n    // If it's already a Note, we're done\n    if (input instanceof Note) return input;\n\n    let number = this.guessNoteNumber(input, options.octaveOffset);\n\n    if (number === false) { // We use a comparison b/c the note can be 0 (which equates to false)\n      throw new TypeError(`The input could not be parsed as a note (${input})`);\n    }\n\n    // If we got here, we have a proper note number. Before creating the new note, we strip out\n    // 'octaveOffset' because it has already been factored in when calling guessNoteNumber().\n    options.octaveOffset = undefined;\n    return new Note(number, options);\n\n  }\n\n  /**\n   * Converts an input value, which can be an unsigned integer (0-127), a note identifier, a\n   * {@link Note} object or an array of the previous types, to an array of {@link Note} objects.\n   *\n   * {@link Note} objects are returned as is. For note numbers and identifiers, a {@link Note}\n   * object is created with the options specified. An error will be thrown when encountering invalid\n   * input.\n   *\n   * @param [notes] {number|string|Note|number[]|string[]|Note[]}\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n   * be explicitly stopped.\n   *\n   * @param {number} [options.attack=0.5] The note's attack velocity as a decimal number between 0\n   * and 1.\n   *\n   * @param {number} [options.release=0.5] The note's release velocity as a decimal number between 0\n   * and 1.\n   *\n   * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n   * 127.\n   *\n   * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n   * 127.\n   *\n   * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n   * used when the input value is a note identifier.**\n   *\n   * @returns {Note[]}\n   *\n   * @throws TypeError An element could not be parsed as a note.\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static buildNoteArray(notes, options = {}) {\n\n    let result = [];\n    if (!Array.isArray(notes)) notes = [notes];\n\n    notes.forEach(note => {\n      result.push(this.buildNote(note, options));\n    });\n\n    return result;\n\n  }\n\n  /**\n   * Returns a number between 0 and 1 representing the ratio of the input value divided by 127 (7\n   * bit). The returned value is restricted between 0 and 1 even if the input is greater than 127 or\n   * smaller than 0.\n   *\n   * Passing `Infinity` will return `1` and passing `-Infinity` will return `0`. Otherwise, when the\n   * input value cannot be converted to an integer, the method returns 0.\n   *\n   * @param value A positive integer between 0 and 127 (inclusive)\n   * @returns {number} A number between 0 and 1 (inclusive)\n   * @static\n   */\n  static toNormalized(value) {\n    if (value === Infinity) value = 127;\n    value = parseInt(value) || 0;\n    return Math.min(Math.max(value / 127, 0), 1);\n  }\n\n  /**\n   * Returns a number between 0 and 127 which is the result of multiplying the input value by 127.\n   * The input value should be number between 0 and 1 (inclusively). The returned value is\n   * restricted between 0 and 127 even if the input is greater than 1 or smaller than 0.\n   *\n   * Passing `Infinity` will return `127` and passing `-Infinity` will return `0`. Otherwise, when\n   * the input value cannot be converted to a number, the method returns 0.\n   *\n   * @param value A positive integer between 0 and 127 (inclusive)\n   * @returns {number} A number between 0 and 1 (inclusive)\n   * @static\n   */\n  static to7Bit(value) {\n    if (value === Infinity) value = 1;\n    value = parseFloat(value) || 0;\n    return Math.min(Math.max(Math.round(value * 127), 0), 127);\n  }\n\n  /**\n   * Returns the supplied MIDI note number offset by the requested octave and semitone values. If\n   * the calculated value is less than 0, 0 will be returned. If the calculated value is more than\n   * 127, 127 will be returned. If an invalid offset value is supplied, 0 will be used.\n   *\n   * @param offset\n   * @returns {number} An integer between 0 and 127\n   *\n   * @throws {Error} Invalid note number\n   * @static\n   */\n  static offsetNumber(number, octaveOffset = 0, semitoneOffset = 0) {\n\n    if (WebMidi.validation) {\n      number = parseInt(number);\n      if (isNaN(number)) throw new Error(\"Invalid note number\");\n      octaveOffset = parseInt(octaveOffset) || 0;\n      semitoneOffset = parseInt(semitoneOffset) || 0;\n    }\n\n    return Math.min(Math.max(number + (octaveOffset * 12) + semitoneOffset, 0), 127);\n\n  }\n\n  /**\n   * Returns the name of the first property of the supplied object whose value is equal to the one\n   * supplied.\n   *\n   * @param object {Object}\n   * @param value {*}\n   * @returns {string} The name of the matching property\n   * @static\n   */\n  static getPropertyByValue(object, value) {\n    return Object.keys(object).find(key => object[key] === value);\n  }\n\n}\n","/**\n * The `Enumerations` class contains enumerations of elements used throughout the library. All\n * enumerations are static and should be referenced using the class name. For example:\n * `Enumerations.MIDI_CHANNEL_MESSAGES`.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Enumerations {\n\n  /**\n   * Enumeration of all MIDI channel messages and their associated 4-bit numerical value:\n   *\n   * - `noteoff`: 0x8 (8)\n   * - `noteon`: 0x9 (9)\n   * - `keyaftertouch`: 0xA (10)\n   * - `controlchange`: 0xB (11)\n   * - `nrpn`: 0xB (11)\n   * - `programchange`: 0xC (12)\n   * - `channelaftertouch`: 0xD (13)\n   * - `pitchbend`: 0xE (14)\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @static\n   */\n  static get MIDI_CHANNEL_MESSAGES() {\n\n    return {\n      noteoff: 0x8,           // 8\n      noteon: 0x9,            // 9\n      keyaftertouch: 0xA,     // 10\n      controlchange: 0xB,     // 11\n      programchange: 0xC,     // 12\n      channelaftertouch: 0xD, // 13\n      pitchbend: 0xE          // 14\n    };\n\n  }\n\n  /**\n   * Enumeration of all channel mode messages and their associated numerical value:\n   *\n   * - `allsoundoff`: 120\n   * - `resetallcontrollers`: 121\n   * - `localcontrol`: 122\n   * - `allnotesoff`: 123\n   * - `omnimodeoff`: 124\n   * - `omnimodeon`: 125\n   * - `monomodeon`: 126\n   * - `polymodeon`: 127\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @static\n   */\n  static get MIDI_CHANNEL_MODE_MESSAGES() {\n\n    return {\n      allsoundoff: 120,\n      resetallcontrollers: 121,\n      localcontrol: 122,\n      allnotesoff: 123,\n      omnimodeoff: 124,\n      omnimodeon: 125,\n      monomodeon: 126,\n      polymodeon: 127\n    };\n\n  }\n\n  /**\n   * Enumeration of most control change messages and their associated numerical value. Note that\n   * some control change numbers do not have a predefined purpose and are absent from this list.\n   *\n   * - `bankselectcoarse`: 0\n   * - `modulationwheelcoarse`: 1\n   * - `breathcontrollercoarse`: 2\n   * - `footcontrollercoarse`: 4\n   * - `portamentotimecoarse`: 5\n   * - `dataentrycoarse`: 6\n   * - `volumecoarse`: 7\n   * - `balancecoarse`: 8\n   * - `pancoarse`: 10\n   * - `expressioncoarse`: 11\n   * - `effectcontrol1coarse`: 12\n   * - `effectcontrol2coarse`: 13\n   * - `generalpurposeslider1`: 16\n   * - `generalpurposeslider2`: 17\n   * - `generalpurposeslider3`: 18\n   * - `generalpurposeslider4`: 19\n   * - `bankselectfine`: 32\n   * - `modulationwheelfine`: 33\n   * - `breathcontrollerfine`: 34\n   * - `footcontrollerfine`: 36\n   * - `portamentotimefine`: 37\n   * - `dataentryfine`: 38\n   * - `volumefine`: 39\n   * - `balancefine`: 40\n   * - `panfine`: 42\n   * - `expressionfine`: 43\n   * - `effectcontrol1fine`: 44\n   * - `effectcontrol2fine`: 45\n   * - `holdpedal`: 64\n   * - `portamento`: 65\n   * - `sustenutopedal`: 66\n   * - `softpedal`: 67\n   * - `legatopedal`: 68\n   * - `hold2pedal`: 69\n   * - `soundvariation`: 70\n   * - `resonance`: 71\n   * - `soundreleasetime`: 72\n   * - `soundattacktime`: 73\n   * - `brightness`: 74\n   * - `soundcontrol6`: 75\n   * - `soundcontrol7`: 76\n   * - `soundcontrol8`:`77\n   * - `soundcontrol9`: 78\n   * - `soundcontrol10`: 79\n   * - `generalpurposebutton1`: 80\n   * - `generalpurposebutton2`: 81\n   * - `generalpurposebutton3`: 82\n   * - `generalpurposebutton4`: 83\n   * - `reverblevel`: 91\n   * - `tremololevel`: 92\n   * - `choruslevel`: 93\n   * - `celestelevel`: 94\n   * - `phaserlevel`: 95\n   * - `databuttonincrement`: 96\n   * - `databuttondecrement`: 97\n   * - `nonregisteredparametercoarse`: 98\n   * - `nonregisteredparameterfine`: 99\n   * - `registeredparametercoarse`: 100\n   * - `registeredparameterfine`: 101\n   *\n   * - `allsoundoff`: 120\n   * - `resetallcontrollers`: 121\n   * - `localcontrol`: 122\n   * - `allnotesoff`: 123\n   * - `omnimodeoff`: 124\n   * - `omnimodeon`: 125\n   * - `monomodeon`: 126\n   * - `polymodeon`: 127\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @static\n   */\n  static get MIDI_CONTROL_CHANGE_MESSAGES() {\n\n    return {\n\n      bankselectcoarse: 0,\n      modulationwheelcoarse: 1,\n      breathcontrollercoarse: 2,\n      footcontrollercoarse: 4,\n      portamentotimecoarse: 5,\n      dataentrycoarse: 6,\n      volumecoarse: 7,\n      balancecoarse: 8,\n      pancoarse: 10,\n      expressioncoarse: 11,\n      effectcontrol1coarse: 12,\n      effectcontrol2coarse: 13,\n      generalpurposeslider1: 16,\n      generalpurposeslider2: 17,\n      generalpurposeslider3: 18,\n      generalpurposeslider4: 19,\n      bankselectfine: 32,\n      modulationwheelfine: 33,\n      breathcontrollerfine: 34,\n      footcontrollerfine: 36,\n      portamentotimefine: 37,\n      dataentryfine: 38,\n      volumefine: 39,\n      balancefine: 40,\n      panfine: 42,\n      expressionfine: 43,\n      effectcontrol1fine: 44,\n      effectcontrol2fine: 45,\n      holdpedal: 64,\n      portamento: 65,\n      sustenutopedal: 66,\n      softpedal: 67,\n      legatopedal: 68,\n      hold2pedal: 69,\n      soundvariation: 70,\n      resonance: 71,\n      soundreleasetime: 72,\n      soundattacktime: 73,\n      brightness: 74,\n      soundcontrol6: 75,\n      soundcontrol7: 76,\n      soundcontrol8: 77,\n      soundcontrol9: 78,\n      soundcontrol10: 79,\n      generalpurposebutton1: 80,\n      generalpurposebutton2: 81,\n      generalpurposebutton3: 82,\n      generalpurposebutton4: 83,\n      reverblevel: 91,\n      tremololevel: 92,\n      choruslevel: 93,\n      celestelevel: 94,\n      phaserlevel: 95,\n      databuttonincrement: 96,\n      databuttondecrement: 97,\n      nonregisteredparametercoarse: 98,\n      nonregisteredparameterfine: 99,\n      registeredparametercoarse: 100,\n      registeredparameterfine: 101,\n\n      allsoundoff: 120,\n      resetallcontrollers: 121,\n      localcontrol: 122,\n      allnotesoff: 123,\n      omnimodeoff: 124,\n      omnimodeon: 125,\n      monomodeon: 126,\n      polymodeon: 127\n\n    };\n\n  }\n\n  /**\n   * Enumeration of all registered parameters and their associated pair of numerical values. MIDI\n   * registered parameters extend the original list of control change messages. Currently, there are\n   * only a limited number of them:\n   *\n   * - `pitchbendrange`: [0x00, 0x00]\n   * - `channelfinetuning`: [0x00, 0x01]\n   * - `channelcoarsetuning`: [0x00, 0x02]\n   * - `tuningprogram`: [0x00, 0x03]\n   * - `tuningbank`: [0x00, 0x04]\n   * - `modulationrange`: [0x00, 0x05]\n   * - `azimuthangle`: [0x3D, 0x00]\n   * - `elevationangle`: [0x3D, 0x01]\n   * - `gain`: [0x3D, 0x02]\n   * - `distanceratio`: [0x3D, 0x03]\n   * - `maximumdistance`: [0x3D, 0x04]\n   * - `maximumdistancegain`: [0x3D, 0x05]\n   * - `referencedistanceratio`: [0x3D, 0x06]\n   * - `panspreadangle`: [0x3D, 0x07]\n   * - `rollangle`: [0x3D, 0x08]\n   *\n   * @enum {Object.<string, number[]>}\n   * @readonly\n   * @static\n   */\n  static get MIDI_REGISTERED_PARAMETERS() {\n\n    return {\n      pitchbendrange: [0x00, 0x00],\n      channelfinetuning: [0x00, 0x01],\n      channelcoarsetuning: [0x00, 0x02],\n      tuningprogram: [0x00, 0x03],\n      tuningbank: [0x00, 0x04],\n\n      modulationrange: [0x00, 0x05],\n      azimuthangle: [0x3D, 0x00],\n      elevationangle: [0x3D, 0x01],\n      gain: [0x3D, 0x02],\n      distanceratio: [0x3D, 0x03],\n      maximumdistance: [0x3D, 0x04],\n      maximumdistancegain: [0x3D, 0x05],\n      referencedistanceratio: [0x3D, 0x06],\n      panspreadangle: [0x3D, 0x07],\n      rollangle: [0x3D, 0x08]\n    };\n\n  }\n\n  /**\n   * Enumeration of all valid MIDI system messages and matching numerical values. WebMidi.js also\n   * uses two custom messages.\n   *\n   * **System common messages**\n   * - `sysex`: 0xF0 (240)\n   * - `timecode`: 0xF1 (241)\n   * - `songposition`: 0xF2 (242)\n   * - `songselect`: 0xF3 (243)\n   * - `tunerequest`: 0xF6 (246)\n   * - `sysexend`: 0xF7 (247)\n   *\n   * The `sysexend` message is never actually received. It simply ends a sysex stream.\n   *\n   * **System real-time messages**\n   *\n   * - `clock`: 0xF8 (248)\n   * - `start`: 0xFA (250)\n   * - `continue`: 0xFB (251)\n   * - `stop`: 0xFC (252)\n   * - `activesensing`: 0xFE (254)\n   * - `reset`: 0xFF (255)\n   *\n   * Values 249 and 253 are actually relayed by the Web MIDI API but they do not serve a specific\n   * purpose. The\n   * [MIDI 1.0 spec](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n   * simply states that they are undefined/reserved.\n   *\n   * **Custom WebMidi.js messages**\n   *\n   * - `midimessage`: 0\n   * - `unknownsystemmessage`: -1\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @static\n   */\n  static get MIDI_SYSTEM_MESSAGES() {\n\n    return {\n\n      // System common messages\n      sysex: 0xF0,            // 240\n      timecode: 0xF1,         // 241\n      songposition: 0xF2,     // 242\n      songselect: 0xF3,       // 243\n      tunerequest: 0xF6,      // 246\n      tuningrequest: 0xF6,    // for backwards-compatibility (deprecated in version 3.0)\n      sysexend: 0xF7,         // 247 (never actually received - simply ends a sysex)\n\n      // System real-time messages\n      clock: 0xF8,            // 248\n      start: 0xFA,            // 250\n      continue: 0xFB,         // 251\n      stop: 0xFC,             // 252\n      activesensing: 0xFE,    // 254\n      reset: 0xFF,            // 255\n\n      // Custom WebMidi.js messages\n      midimessage: 0,\n      unknownsystemmessage: -1\n\n    };\n\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\nimport {Note} from \"./Note.js\";\nimport {Enumerations} from \"./Enumerations.js\";\n\n/**\n * The `InputChannel` class represents a MIDI input channel (1-16) from a single input device. This\n * object is derived from the host's MIDI subsystem and cannot be instantiated directly.\n *\n * All 16 `InputChannel` objects can be found inside the input's [channels](Input#channels)\n * property.\n *\n * @param {Input} input The `Input` object this channel belongs to\n * @param {number} number The MIDI channel's number (1-16)\n *\n * @fires InputChannel#midimessage\n *\n * @fires InputChannel#noteoff\n * @fires InputChannel#noteon\n * @fires InputChannel#keyaftertouch\n * @fires InputChannel#controlchange\n * @fires InputChannel#programchange\n * @fires InputChannel#channelaftertouch\n * @fires InputChannel#pitchbend\n *\n * @fires InputChannel#allnotesoff\n * @fires InputChannel#allsoundoff\n * @fires InputChannel#localcontrol\n * @fires InputChannel#monomode\n * @fires InputChannel#omnimode\n * @fires InputChannel#resetallcontrollers\n *\n * @fires InputChannel#nrpndataentrycoarse\n * @fires InputChannel#nrpndataentryfine\n * @fires InputChannel#nrpndatabuttonincrement\n * @fires InputChannel#nrpndatabuttondecrement\n *\n * @fires InputChannel#rpndataentrycoarse\n * @fires InputChannel#rpndataentryfine\n * @fires InputChannel#rpndatabuttonincrement\n * @fires InputChannel#rpndatabuttondecrement\n *\n * @extends EventEmitter\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class InputChannel extends EventEmitter {\n\n  constructor(input, number) {\n\n    super();\n\n    /**\n     * @type {Input}\n     * @private\n     */\n    this._input = input;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._number = number;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * An array of messages that form the current NRPN sequence\n     * @private\n     * @type {Message[]}\n     */\n    this._nrpnBuffer = [];\n\n    /**\n     * An array of messages that form the current RPN sequence\n     * @private\n     * @type {Message[]}\n     */\n    this._rpnBuffer = [];\n\n    /**\n     * Indicates whether events for **Non-Registered Parameter Number** should be dispatched. NRPNs\n     * are composed of a sequence of specific **control change** messages. When a valid sequence of\n     * such control change messages is received, an `nrpn` event will fire.\n     *\n     * If an invalid or\n     * out-of-order control change message is received, it will fall through the collector logic and\n     * all buffered control change messages will be discarded as incomplete.\n     *\n     * @type {boolean}\n     */\n    this.parameterNumberEventsEnabled = true;\n\n  }\n\n  /**\n   * Destroys the `Input` by removing all listeners and severing the link with the MIDI subsystem's\n   * input.\n   */\n  destroy() {\n    this._input = null;\n    this._number = null;\n    this._octaveOffset = 0;\n    this._nrpnBuffer = [];\n    this.parameterNumberEventsEnabled = false;\n    this.removeListener();\n  }\n\n  /**\n   * @param e MIDIMessageEvent\n   * @private\n   */\n  _processMidiMessageEvent(e) {\n\n    // Create and emit a new 'midimessage' event based on the incoming one\n    const event = Object.assign({}, e);\n    event.target = this;\n    event.type = \"midimessage\";\n\n    /**\n     * Event emitted when a MIDI message of any kind is received by an `InputChannel`\n     *\n     * @event InputChannel#midimessage\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `InputChannel` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"midimessage\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     * @property {number} event.statusByte The message's status byte  (deprecated, use the `message`\n     * object instead).\n     * @property {?number[]} event.dataBytes The message's data bytes as an array of 0, 1 or 2\n     * integers. This will be null for `sysex` messages (deprecated, use the `message` object\n     * instead).\n     */\n    this.emit(event.type, event);\n\n    // Parse the inbound event for regular MIDI messages\n    this._parseEventForStandardMessages(event);\n\n  }\n\n  /**\n   * Parses incoming channel events and emit standard MIDI message events (noteon, noteoff, etc.)\n   * @param e Event\n   * @private\n   */\n  _parseEventForStandardMessages(e) {\n\n    const event = Object.assign({}, e);\n    event.type = event.message.type || \"unknownmidimessage\";\n\n    const data1 = e.message.dataBytes[0];\n    const data2 = e.message.dataBytes[1];\n\n    if ( event.type === \"noteoff\" || (event.type === \"noteon\" && data2 === 0) ) {\n\n      /**\n       * Event emitted when a **note off** MIDI message has been received on the channel.\n       *\n       * @event InputChannel#noteoff\n       *\n       * @type {Object}\n       * @property {string} type `\"noteoff\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {Object} note A [`Note`](Note) object containing information such as note name,\n       * octave and release velocity.\n       * @property {number} value The release velocity amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The release velocity amount expressed as an integer (between 0\n       * and 127).\n       */\n\n      // The object created when a noteoff event arrives is a Note with an attack velocity of 0.\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + WebMidi.octaveOffset\n        ),\n        {\n          rawAttack: 0,\n          rawRelease: data2,\n        }\n      );\n\n      event.value = Utilities.toNormalized(data2);\n      event.rawValue = data2;\n\n      // Those are kept for backwards-compatibility but are gone from the documentation. They will\n      // be removed in future versions (@deprecated).\n      event.velocity = event.note.release;\n      event.rawVelocity = event.note.rawRelease;\n\n    } else if (event.type === \"noteon\") {\n\n      /**\n       * Event emitted when a **note on** MIDI message has been received.\n       *\n       * @event InputChannel#noteon\n       *\n       * @type {Object}\n       * @property {string} type `\"noteon\"`\n       *\n       * @property {InputChannel} channel The `InputChannel` object that triggered the event.\n       * @property {Array} event.data The MIDI message as an array of 8 bit values.\n       * @property {InputChannel} input The [`Input`](Input) object where through which the message\n       * was received.\n       * @property {Uint8Array} event.rawData The raw MIDI message as a `Uint8Array`.\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {Note} note A [`Note`](Note) object containing information such as note name,\n       * octave and attack velocity.\n       *\n       * @property {number} value The attack velocity amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The attack velocity amount expressed as an integer (between 0\n       * and 127).\n       */\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + WebMidi.octaveOffset\n        ),\n        { rawAttack: data2 }\n      );\n\n      event.value = Utilities.toNormalized(data2);\n      event.rawValue = data2;\n\n      // Those are kept for backwards-compatibility but are gone from the documentation. They will\n      // be removed in future versions (@deprecated).\n      event.velocity = event.note.attack;\n      event.rawVelocity = event.note.rawAttack;\n\n    } else if (event.type === \"keyaftertouch\") {\n\n      /**\n       * Event emitted when a **key-specific aftertouch** MIDI message has been received.\n       *\n       * @event InputChannel#keyaftertouch\n       *\n       * @type {Object}\n       * @property {string} type `\"keyaftertouch\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {string} identifier The note identifier of the key to apply the aftertouch to.\n       * This includes any octave offset applied at the channel, input or global level.\n       * @property {number} key The MIDI note number of the key to apply the aftertouch to. This\n       * includes any octave offset applied at the channel, input or global level.\n       * @property {number} rawKey The MIDI note number of the key to apply the aftertouch to. This\n       * excludes any octave offset defined at the channel, input or global level.\n       * @property {number} value The aftertouch amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The aftertouch amount expressed as an integer (between 0 and\n       * 127).\n       */\n      event.identifier = Utilities.toNoteIdentifier(\n        data1, WebMidi.octaveOffset + this.input.octaveOffset + this.octaveOffset\n      );\n\n      event.key = Utilities.toNoteNumber(event.identifier);\n      event.rawKey = data1;\n\n      event.value = Utilities.toNormalized(data2);\n      event.rawValue = data2;\n\n      // This is kept for backwards-compatibility but is gone from the documentation. It will be\n      // removed from future versions (@deprecated).\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + WebMidi.octaveOffset\n        )\n      );\n\n    } else if (event.type === \"controlchange\") {\n\n      /**\n       * Event emitted when a **control change** MIDI message has been received.\n       *\n       * @event InputChannel#controlchange\n       *\n       * @type {Object}\n       * @property {string} type `\"controlchange\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {Object} controller\n       * @property {Object} controller.number The number of the controller.\n       * @property {Object} controller.name The usual name or function of the controller.\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      event.controller = {\n        number: data1,\n        name: this.getCcNameByNumber(data1)\n      };\n\n      event.value = Utilities.toNormalized(data2);\n      event.rawValue = data2;\n\n      // Trigger channel mode message events (if appropriate)\n      if (event.message.dataBytes[0] >= 120) this._parseChannelModeMessage(event);\n\n      // Parse the inbound event to see if its part of an RPN/NRPN sequence\n      if (\n        this.parameterNumberEventsEnabled &&\n        this.isRpnOrNrpnController(event.message.dataBytes[0])\n      ) {\n        this._parseEventForParameterNumber(event);\n      }\n\n    } else if (event.type === \"programchange\") {\n\n      /**\n       * Event emitted when a **program change** MIDI message has been received.\n       *\n       * @event InputChannel#programchange\n       *\n       * @type {Object}\n       * @property {string} type `\"programchange\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as an integer between 1 and 128.\n       * @property {number} rawValue The value expressed as an integer between 0 and 127..\n       */\n      event.value = data1 + 1;\n      event.rawValue = data1;\n\n    } else if (event.type === \"channelaftertouch\") {\n\n      /**\n       * Event emitted when a control change MIDI message has been received.\n       *\n       * @event InputChannel#channelaftertouch\n       *\n       * @type {Object}\n       * @property {string} type `\"channelaftertouch\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      event.value = Utilities.toNormalized(data1);\n      event.rawValue = data1;\n\n    } else if (event.type === \"pitchbend\") {\n\n      /**\n       * Event emitted when a pitch bend MIDI message has been received.\n       *\n       * @event InputChannel#pitchbend\n       *\n       * @type {Object}\n       * @property {string} type `\"pitchbend\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 16383).\n       */\n      event.value = ((data2 << 7) + data1 - 8192) / 8192;\n      event.rawValue = (data2 << 7) + data1;\n\n    } else {\n      event.type = \"unknownmessage\";\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  _parseChannelModeMessage(e) {\n\n    // Make a shallow copy of the incoming event so we can use it as the new event.\n    const event = Object.assign({}, e);\n    event.type = event.controller.name;\n\n    /**\n     * Event emitted when an \"all sound off\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#allsoundoff\n     *\n     * @type {Object}\n     * @property {string} type `\"allsoundoff\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when a \"reset all controllers\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#resetallcontrollers\n     *\n     * @type {Object}\n     * @property {string} type `\"resetallcontrollers\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when a \"local control\" channel-mode MIDI message has been received. The value\n     * property of the event is set to either `true` (local control on) of `false` (local control\n     * off).\n     *\n     * @event InputChannel#localcontrol\n     *\n     * @type {Object}\n     * @property {string} type `\"localcontrol\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value For local control on, the value is `true`. For local control off,\n     * the value is `false`.\n     */\n    if (event.type === \"localcontrol\") {\n      event.value = event.message.data[2] === 127 ? true : false;\n    }\n\n    /**\n     * Event emitted when an \"all notes off\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#allnotesoff\n     *\n     * @type {Object}\n     * @property {string} type `\"allnotesoff\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when an \"omni mode\" channel-mode MIDI message has been received. The value\n     * property of the event is set to either `true` (omni mode on) of `false` (omni mode off).\n     *\n     * @event InputChannel#omnimode\n     *\n     * @type {Object}\n     * @property {string} type `\"omnimode\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n     */\n    if (event.type === \"omnimodeon\") {\n      event.type = \"omnimode\";\n      event.value = true;\n    } else if (event.type === \"omnimodeoff\") {\n      event.type = \"omnimode\";\n      event.value = false;\n    }\n\n    /**\n     * Event emitted when a \"mono/poly mode\" MIDI message has been received. The value property of\n     * the event is set to either `true` (mono mode on / poly mode off) or `false` (mono mode off /\n     * poly mode on).\n     *\n     * @event InputChannel#monomode\n     *\n     * @type {Object}\n     * @property {string} type `\"monomode\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n     */\n    if (event.type === \"monomodeon\") {\n      event.type = \"monomode\";\n      event.value = true;\n    } else if (event.type === \"polymodeon\") {\n      event.type = \"monomode\";\n      event.value = false;\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Parses inbound events to identify NRPN sequences.\n   *\n   * and constructs NRPN message parts in valid sequences.\n   * Keeps a separate NRPN buffer for each channel.\n   * Emits an event after it receives the final CC parts msb 127 lsb 127.\n   * If a message is incomplete and other messages are received before\n   * the final 127 bytes, the incomplete message is cleared.\n   * @param e Event\n   * @private\n   */\n  _parseEventForParameterNumber(event) {\n\n    // To make it more legible\n    const controller = event.message.dataBytes[0];\n    const value = event.message.dataBytes[1];\n    const list = Enumerations.MIDI_CONTROL_CHANGE_MESSAGES;\n\n    // A. Check if the message is the start of an RPN (101) or NRPN (99) parameter declaration.\n    if (\n      controller === list.nonregisteredparameterfine ||         // 99\n      controller === list.registeredparameterfine               // 101\n    ) {\n\n      this._nrpnBuffer = [];\n      this._rpnBuffer = [];\n\n      if (controller === list.nonregisteredparameterfine) {     // 99\n        this._nrpnBuffer = [event.message];\n      } else {                                                  // 101\n        // 127 is a reset so we ignore it\n        if (value !== 127) this._rpnBuffer = [event.message];\n      }\n\n    // B. Check if the message is the end of an RPN (100) or NRPN (98) parameter declaration.\n    } else if (\n      controller === list.nonregisteredparametercoarse ||       // 98\n      controller === list.registeredparametercoarse             // 100\n    ) {\n\n      if (controller === list.nonregisteredparametercoarse) {   // 98\n\n        // Flush the other buffer (they are mutually exclusive)\n        this._rpnBuffer = [];\n\n        // Check if we are in sequence\n        if (this._nrpnBuffer.length === 1) {\n          this._nrpnBuffer.push(event.message);\n        } else {\n          this._nrpnBuffer = []; // out of sequence\n        }\n\n      } else {                                                  // 100\n\n        // Flush the other buffer (they are mutually exclusive)\n        this._nrpnBuffer = [];\n\n        // 127 is a reset so we ignore it\n        if (this._rpnBuffer.length === 1 && value !== 127) {\n          this._rpnBuffer.push(event.message);\n        } else {\n          this._rpnBuffer = []; // out of sequence or reset\n        }\n\n      }\n\n    // C. Check if the message is for data entry (6, 38, 96 or 97). Those messages trigger events.\n    } else if (\n      controller === list.dataentrycoarse ||                    // 6\n      controller === list.dataentryfine ||                      // 38\n      controller === list.databuttonincrement ||                // 96\n      controller === list.databuttondecrement                   // 97\n    ) {\n\n      if (this._rpnBuffer.length === 2) {\n        this._dispatchParameterNumberEvent(\n          \"rpn\",\n          this._rpnBuffer[0].dataBytes[1],\n          this._rpnBuffer[1].dataBytes[1],\n          event\n        );\n      } else if (this._nrpnBuffer.length === 2) {\n        this._dispatchParameterNumberEvent(\n          \"nrpn\",\n          this._nrpnBuffer[0].dataBytes[1],\n          this._nrpnBuffer[1].dataBytes[1],\n          event\n        );\n      } else {\n        this._nrpnBuffer = [];\n        this._rpnBuffer = [];\n      }\n\n    }\n\n  }\n\n  isRpnOrNrpnController(controller) {\n\n    return controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.dataentrycoarse ||        //   6\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.dataentryfine ||               //  38\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.databuttonincrement ||         //  96\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.databuttondecrement ||         //  97\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.nonregisteredparametercoarse ||//  98\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.nonregisteredparameterfine ||  //  99\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.registeredparametercoarse ||   // 100\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.registeredparameterfine;       // 101\n\n  }\n\n  _dispatchParameterNumberEvent(type, paramMsb, paramLsb, e) {\n\n    /**\n     * Event emitted when a 'dataentrycoarse' NRPN message has been received on the input.\n     *\n     * @event InputChannel#nrpndataentrycoarse\n     *\n     * @type {Object}\n     *\n     * @property {string} type `\"nrpndataentrycoarse\"`\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {number} parameter The non-registered parameter number (0-16383)\n     * @property {number} parameterMsb The MSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} parameterLsb: The LSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when a 'dataentryfine' NRPN message has been received on the input.\n     *\n     * @event InputChannel#nrpndataentryfine\n     *\n     * @type {Object}\n     *\n     * @property {string} type `\"nrpndataentryfine\"`\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {number} parameter The non-registered parameter number (0-16383)\n     * @property {number} parameterMsb The MSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} parameterLsb: The LSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when a 'databuttonincrement' NRPN message has been received on the input.\n     *\n     * @event InputChannel#nrpndatabuttonincrement\n     *\n     * @type {Object}\n     *\n     * @property {string} type `\"nrpndatabuttonincrement\"`\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {number} parameter The non-registered parameter number (0-16383)\n     * @property {number} parameterMsb The MSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} parameterLsb: The LSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when a 'databuttondecrement' NRPN message has been received on the input.\n     *\n     * @event InputChannel#nrpndatabuttondecrement\n     *\n     * @type {Object}\n     *\n     * @property {string} type `\"nrpndatabuttondecrement\"`\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {number} parameter The non-registered parameter number (0-16383)\n     * @property {number} parameterMsb The MSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} parameterLsb: The LSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n\n    /**\n     * Event emitted when a 'dataentrycoarse' RPN message has been received on the input.\n     *\n     * @event InputChannel#rpndataentrycoarse\n     *\n     * @type {Object}\n     *\n     * @property {string} type `\"rpndataentrycoarse\"`\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when a 'dataentryfine' RPN message has been received on the input.\n     *\n     * @event InputChannel#rpndataentryfine\n     *\n     * @type {Object}\n     *\n     * @property {string} type `\"rpndataentryfine\"`\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when a 'databuttonincrement' RPN message has been received on the input.\n     *\n     * @event InputChannel#rpndatabuttonincrement\n     *\n     * @type {Object}\n     *\n     * @property {string} type `\"rpndatabuttonincrement\"`\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when a 'databuttondecrement' RPN message has been received on the input.\n     *\n     * @event InputChannel#rpndatabuttondecrement\n     *\n     * @type {Object}\n     *\n     * @property {string} type `\"rpndatabuttondecrement\"`\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    const event = {\n      target: e.target,\n      timestamp: e.timestamp,\n      parameterMsb: paramMsb,\n      parameterLsb: paramLsb,\n      value: Utilities.toNormalized(e.message.dataBytes[1]),\n      rawValue: e.message.dataBytes[1],\n      type: type === \"rpn\" ? \"rpn\" : \"nrpn\"\n    };\n\n    // Retrieve controller type and append to event type\n    event.type += Utilities.getPropertyByValue(\n      Enumerations.MIDI_CONTROL_CHANGE_MESSAGES,\n      e.message.dataBytes[0]\n    );\n\n    // Identify the parameter (by name for RPN and by number for NRPN)\n    if (type === \"rpn\") {\n\n      event.parameter = Object.keys(Enumerations.MIDI_REGISTERED_PARAMETERS).find(key => {\n        return Enumerations.MIDI_REGISTERED_PARAMETERS[key][0] === paramMsb &&\n          Enumerations.MIDI_REGISTERED_PARAMETERS[key][1] === paramLsb;\n      });\n\n    } else {\n      event.parameter = (paramMsb << 7) + paramLsb;\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Returns the channel mode name matching the specified number. If no match is found, the function\n   * returns `false`.\n   *\n   * @param {number} number An integer representing the channel mode message.\n   * @returns {string|false} The name of the matching channel mode or `false` if not match could be\n   * found.\n   *\n   * @since 2.0.0\n   */\n  getChannelModeByNumber(number) {\n\n    if (WebMidi.validation) {\n      number = Math.floor(number);\n    }\n\n    if ( !(number >= 120 && number <= 127) ) return false;\n\n    for (let cm in Enumerations.MIDI_CHANNEL_MODE_MESSAGES) {\n\n      if (\n        Enumerations.MIDI_CHANNEL_MODE_MESSAGES.hasOwnProperty(cm) &&\n        number === Enumerations.MIDI_CHANNEL_MODE_MESSAGES[cm]\n      ) {\n        return cm;\n      }\n\n    }\n\n    return false;\n\n  }\n\n  /**\n   * Returns the name of a control change message matching the specified number. Some valid control\n   * change numbers do not have a specific name or purpose assigned in the MIDI\n   * [spec](https://midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2).\n   * In this case, the method returns `false`.\n   *\n   * @param {number} number An integer representing the control change message\n   * @returns {string|undefined} The matching control change name or `undefined` if not match was\n   * found.\n   *\n   * @throws {RangeError} Invalid control change number.\n   *\n   * @since 2.0.0\n   */\n  getCcNameByNumber(number) {\n\n    if (WebMidi.validation) {\n      number = parseInt(number);\n      if ( !(number >= 0 && number <= 127) ) throw new RangeError(\"Invalid control change number.\");\n    }\n\n    return Utilities.getPropertyByValue(Enumerations.MIDI_CONTROL_CHANGE_MESSAGES, number);\n\n  }\n\n  /**\n   * An integer to offset the reported octave of incoming note-specific messages (`noteon`,\n   * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n   * octave (C4).\n   *\n   * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n   * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n   *\n   * Note that this value is combined with the global offset value defined on the `WebMidi` object\n   * and with the value defined on the parent `Input` object.\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * The [`Input`](Input) this channel belongs to\n   * @type {Input}\n   * @since 3.0\n   */\n  get input() {\n    return this._input;\n  }\n\n  /**\n   * This channel's MIDI number (1-16)\n   * @type {number}\n   * @since 3.0\n   */\n  get number() {\n    return this._number;\n  }\n\n  /**\n   * Whether RPN/NRPN events are parsed and dispatched.\n   * @type {boolean}\n   * @since 3.0\n   * @deprecated Use parameterNumberEventsEnabled instead.\n   * @private\n   */\n  get nrpnEventsEnabled() {\n    return this.parameterNumberEventsEnabled;\n  }\n  set nrpnEventsEnabled(value) {\n\n    if (this.validation) {\n      value = !!value;\n    }\n\n    this.parameterNumberEventsEnabled = value;\n\n  }\n\n  /**\n   * Array of channel-specific event names that can be listened to.\n   * @type {string[]}\n   * @readonly\n   */\n  static get EVENTS() {\n\n    return [\n\n      // MIDI channel message events\n      \"noteoff\",\n      \"controlchange\",\n      \"noteon\",\n      \"keyaftertouch\",\n      \"programchange\",\n      \"channelaftertouch\",\n      \"pitchbend\",\n\n      // MIDI channel mode events\n      \"allnotesoff\",\n      \"allsoundoff\",\n      \"localcontrol\",\n      \"monomode\",\n      \"omnimode\",\n      \"resetallcontrollers\",\n\n      // NRPN events\n      \"nrpndataentrycoarse\",\n      \"nrpndataentryfine\",\n      \"nrpndatabuttonincrement\",\n      \"nrpndatabuttondecrement\",\n\n      // RPN events\n      \"rpndataentrycoarse\",\n      \"rpndataentryfine\",\n      \"rpndatabuttonincrement\",\n      \"rpndatabuttondecrement\"\n\n    ];\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {Message, WebMidi} from \"./WebMidi.js\";\nimport {InputChannel} from \"./InputChannel.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/**\n * The `Input` class represents a single MIDI input port. This object is automatically instantiated\n * by the library according to the host's MIDI subsystem and should not be directly instantiated.\n * Instead, you can access all `Input` objects by referring to the [`WebMidi.inputs`](WebMidi#inputs)\n * array.\n *\n * Note that a single device may expose several inputs and/or outputs.\n *\n * @param {MIDIInput} midiInput `MIDIInput` object as provided by the MIDI subsystem (Web MIDI API).\n *\n * @fires Input#opened\n * @fires Input#disconnected\n * @fires Input#closed\n * @fires Input#midimessage\n * @fires Input#sysex\n * @fires Input#timecode\n * @fires Input#songposition\n * @fires Input#songselect\n * @fires Input#tunerequest\n * @fires Input#clock\n * @fires Input#start\n * @fires Input#continue\n * @fires Input#stop\n * @fires Input#activesensing\n * @fires Input#reset\n * @fires Input#unknownmidimessage\n *\n * @extends EventEmitter\n * @license Apache-2.0\n */\nexport class Input extends EventEmitter {\n\n  constructor(midiInput) {\n\n    super();\n\n    /**\n     * Reference to the actual MIDIInput object\n     * @private\n     */\n    this._midiInput = midiInput;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * Array containing the 16 [`InputChannel`](InputChannel) objects available for this `Input`. The\n     * channels are numbered 1 through 16.\n     *\n     * @type {InputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new InputChannel(this, i);\n\n    // Setup listeners\n    this._midiInput.onstatechange = this._onStateChange.bind(this);\n    this._midiInput.onmidimessage = this._onMidiMessage.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Input` by removing all listeners, emptying the `channels` array and unlinking the\n   * MIDI subsystem.\n   *\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    if (this._midiInput) {\n      this._midiInput.onstatechange = null;\n      this._midiInput.onmidimessage = null;\n    }\n    await this.close();\n    this._midiInput = null;\n  }\n\n  /**\n   * Executed when a `\"statechange\"` event occurs.\n   *\n   * @param e\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: WebMidi.time,\n      target: this\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the {@link Input} has been opened by calling the {@link Input#open}\n       * method.\n       *\n       * @event Input#opened\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"opened\"`\n       * @property {Input} target The object that triggered the event\n       */\n      event.type = \"opened\";\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the {@link Input} has been closed by calling the {@link Input#close}\n       * method.\n       *\n       * @event Input#closed\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"closed\"`\n       * @property {Input} target The object that triggered the event\n       */\n      event.type = \"closed\";\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the {@link Input} becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Input#disconnected\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"disconnected\"`\n       * @property {Object} target Object with properties describing the {@link Input} that\n       * triggered the event. This is not the actual `Input` as it is no longer available.\n       * @property {string} target.connection `\"closed\"`\n       * @property {string} target.id ID of the input\n       * @property {string} target.manufacturer Manufacturer of the device that provided the input\n       * @property {string} target.name Name of the device that provided the input\n       * @property {string} target.state `\"disconnected\"`\n       * @property {string} target.type `\"input\"`\n       */\n      event.type = \"disconnected\";\n      event.target = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") {\n      // I don't see the need to forward that...\n    } else {\n      console.warn(\"This statechange event was not caught: \", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Executed when a `\"midimessage\"` event is received\n   * @param e\n   * @private\n   */\n  _onMidiMessage(e) {\n\n    // Create Message object from MIDI data\n    const message = new Message(e.data);\n\n    /**\n     * Event emitted when any MIDI message is received on an `Input`\n     *\n     * @event Input#midimessage\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"midimessage\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array (deprecated, use\n     * the `message` object instead).\n     * @property {number} event.statusByte The message's status byte  (deprecated, use the `message`\n     * object instead).\n     * @property {?number[]} event.dataBytes The message's data bytes as an array of 0, 1 or 2\n     * integers. This will be null for `sysex` messages (deprecated, use the `message` object\n     * instead).\n     *\n     * @since 2.1\n     */\n    const event = {\n      target: this,\n      message: message,\n      timestamp: e.timeStamp,\n      type: \"midimessage\",\n\n      data: message.data,           // @deprecated (will be removed in v4)\n      rawData: message.data,        // @deprecated (will be removed in v4)\n      statusByte: message.data[0],  // @deprecated (will be removed in v4)\n      dataBytes: message.dataBytes  // @deprecated (will be removed in v4)\n    };\n\n    this.emit(\"midimessage\", event);\n\n    // Messages are forwarded to InputChannel if they are channel messages or parsed locally for\n    // system messages.\n    if (message.isSystemMessage) {                                         // system messages\n      this._parseEvent(event);\n    } else if (message.isChannelMessage) {   // channel messages\n      this.channels[message.channel]._processMidiMessageEvent(event);\n    }\n\n  }\n\n  /**\n   * @private\n   */\n  _parseEvent(e) {\n\n    // Make a shallow copy of the incoming event so we can use it as the new event.\n    const event = Object.assign({}, e);\n    event.type = event.message.type || \"unknownmidimessage\";\n\n    // Add custom property for 'songselect'\n    if (event.type === \"songselect\") {\n      event.song = e.data[1] + 1;\n    }\n\n    // Emit event\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Opens the input for usage. This is usually unnecessary as the port is open automatically when\n   * WebMidi is enabled.\n   *\n   * @returns {Promise<Input>} The promise is fulfilled with the `Input` object\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when assigning a listener to the\n    // `onmidimessage` property of the `MIDIInput`. We do it explicitly so that 'connected' events\n    // are dispatched immediately and that we are ready to listen.\n    try {\n      await this._midiInput.open();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * Closes the input. When an input is closed, it cannot be used to listen to MIDI messages until\n   * the input is opened again by calling [Input.open()]{@link Input#open}.\n   *\n   * @returns {Promise<Input>} The promise is fulfilled with the `Input` object\n   */\n  async close() {\n\n    // We close the port. This triggers a statechange event which, in turn, will emit the 'closed'\n    // event.\n    if (!this._midiInput) return Promise.resolve(this);\n\n    try {\n      await this._midiInput.close();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since v3.0.0 (moved to 'InputChannel' class)\n   */\n  getChannelModeByNumber() {\n    if (WebMidi.validation) {\n      console.warn(\n        \"The 'getChannelModeByNumber()' method has been moved to the 'InputChannel' class.\"\n      );\n    }\n  }\n\n  /**\n   * Adds an event listener that will trigger a function callback when the specified event happens.\n   * The event can be **channel-bound** or **input-wide**. Channel-bound events are dispatched by\n   * {@link InputChannel} objects and are tied to a specific MIDI channel while input-wide events\n   * are dispatched by the {@link Input} object itself and are not tied to a specific channel.\n   *\n   * When listening for an input-wide event, you must specify the event to listen for and the\n   * callback function to trigger when the event happens:\n   *\n   * ```\n   * WebMidi.inputs[0].addListener(\"midimessage\", someFunction);\n   * ```\n   *\n   * To listen for a channel-bound event, you must also specify the event to listen for and the\n   * function to trigger but you have to add the channels you wish to listen on in the `options`\n   * parameter:\n   *\n   * ```\n   * WebMidi.inputs[0].addListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n   * ```\n   *\n   * The code above will add a listener for the `\"noteon\"` event and call `someFunction` when the\n   * event is triggered on MIDI channels `1`, `2` or `3`.\n   *\n   * Note that, when adding events to channels, it is the {@link InputChannel} instance that\n   * actually gets a listener added and not the `{@link Input} instance.\n   *\n   * Note: if you want to add a listener to a single MIDI channel you should probably do so directly\n   * on the {@link InputChannel} object itself.\n   *\n   * There are 6 families of events you can listen to:\n   *\n   * 1. **MIDI System Common** Events (input-wide)\n   *\n   *    * [songposition]{@link Input#event:songposition}\n   *    * [songselect]{@link Input#event:songselect}\n   *    * [sysex]{@link Input#event:sysex}\n   *    * [timecode]{@link Input#event:timecode}\n   *    * [tunerequest]{@link Input#event:tunerequest}\n   *\n   * 2. **MIDI System Real-Time** Events (input-wide)\n   *\n   *    * [clock]{@link Input#event:clock}\n   *    * [start]{@link Input#event:start}\n   *    * [continue]{@link Input#event:continue}\n   *    * [stop]{@link Input#event:stop}\n   *    * [activesensing]{@link Input#event:activesensing}\n   *    * [reset]{@link Input#event:reset}\n   *\n   * 3. **State Change** Events (input-wide)\n   *\n   *    * [opened]{@link Input#event:opened}\n   *    * [closed]{@link Input#event:closed}\n   *    * [disconnected]{@link Input#event:disconnected}\n   *\n   * 4. **Catch-All** Events (input-wide)\n   *\n   *    * [midimessage]{@link Input#event:midimessage}\n   *    * [unknownmidimessage]{@link Input#event:unknownmidimessage}\n   *\n   * 5. **Channel Voice** Events (channel-specific)\n   *\n   *    * [channelaftertouch]{@link InputChannel#event:channelaftertouch}\n   *    * [controlchange]{@link InputChannel#event:controlchange}\n   *    * [keyaftertouch]{@link InputChannel#event:keyaftertouch}\n   *    * [noteoff]{@link InputChannel#event:noteoff}\n   *    * [noteon]{@link InputChannel#event:noteon}\n   *    * [nrpn]{@link InputChannel#event:nrpn}\n   *    * [pitchbend]{@link InputChannel#event:pitchbend}\n   *    * [programchange]{@link InputChannel#event:programchange}\n   *\n   * 6. **Channel Mode** Events (channel-specific)\n   *\n   *    * allnotesoff\n   *    * allsoundoff\n   *    * localcontrol\n   *    * monomode\n   *    * omnimode\n   *    * resetallcontrollers\n   *\n   * 7. **NRPN** Events (channel-specific)\n   *\n   *    * nrpndataentrycoarse\n   *    * nrpndataentryfine\n   *    * nrpndatabuttonincrement\n   *    * nrpndatabuttondecrement\n   *\n   * 8. **RPN** Events (channel-specific)\n   *\n   *    * rpndataentrycoarse\n   *    * rpndataentryfine\n   *    * rpndatabuttonincrement\n   *    * rpndatabuttondecrement\n   *\n   * @param event {string} The type of the event.\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object's properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the `arguments` property of the `Listener` object\n   * and can be retrieved or modified as desired.\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to listen on. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {Object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array.\n   *\n   * @param {boolean} [options.remaining=Infinity] The number of times after which the callback\n   * should automatically be removed.\n   *\n   * @throws {Error} For channel-specific events, 'options.channels' must be defined.\n   *\n   * @returns {Listener[]} An array of all `Listener` objects that were created.\n   */\n  addListener(event, listener, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = (listener != undefined) ? [].concat(listener) : undefined; // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n      // Validation\n      if (\n        InputChannel.EVENTS.includes(event) &&\n        options.channels === undefined\n      ) {\n        throw new Error(\"For channel-specific events, 'options.channels' must be defined.\");\n      }\n\n    }\n\n    let listeners = [];\n\n    // Check if the event is channel-specific or input-wide\n    if (!InputChannel.EVENTS.includes(event)) {\n      listeners.push(super.addListener(event, listener, options));\n    } else {\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        listeners.push(this.channels[ch].addListener(event, listener, options));\n      });\n    }\n\n    return listeners;\n\n  }\n\n  /**\n   * Adds a one-time event listener that will trigger a function callback when the specified event\n   * happens. The event can be **channel-bound** or **input-wide**. Channel-bound events are\n   * dispatched by {@link InputChannel} objects and are tied to a specific MIDI channel while\n   * input-wide events are dispatched by the {@link Input} object itself and are not tied to a\n   * specific channel.\n   *\n   * When listening for an input-wide event, you must specify the event to listen for and the\n   * callback function to trigger when the event happens:\n   *\n   * ```\n   * WebMidi.inputs[0].addListener(\"midimessage\", someFunction);\n   * ```\n   *\n   * To listen for a channel-bound event, you must also specify the event to listen for and the\n   * function to trigger but you have to add the channels you wish to listen on in the `options`\n   * parameter:\n   *\n   * ```\n   * WebMidi.inputs[0].addListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n   * ```\n   *\n   * The code above will add a listener for the `\"noteon\"` event and call `someFunction` when the\n   * event is triggered on MIDI channels `1`, `2` or `3`.\n   *\n   * Note that, when adding events to channels, it is the {@link InputChannel} instance that\n   * actually gets a listener added and not the `{@link Input} instance.\n   *\n   * Note: if you want to add a listener to a single MIDI channel you should probably do so directly\n   * on the {@link InputChannel} object itself.\n   *\n   * There are 6 families of events you can listen to:\n   *\n   * 1. **MIDI System Common** Events (input-wide)\n   *\n   *    * [songposition]{@link Input#event:songposition}\n   *    * [songselect]{@link Input#event:songselect}\n   *    * [sysex]{@link Input#event:sysex}\n   *    * [timecode]{@link Input#event:timecode}\n   *    * [tunerequest]{@link Input#event:tunerequest}\n   *\n   * 2. **MIDI System Real-Time** Events (input-wide)\n   *\n   *    * [clock]{@link Input#event:clock}\n   *    * [start]{@link Input#event:start}\n   *    * [continue]{@link Input#event:continue}\n   *    * [stop]{@link Input#event:stop}\n   *    * [activesensing]{@link Input#event:activesensing}\n   *    * [reset]{@link Input#event:reset}\n   *\n   * 3. **State Change** Events (input-wide)\n   *\n   *    * [opened]{@link Input#event:opened}\n   *    * [closed]{@link Input#event:closed}\n   *    * [disconnected]{@link Input#event:disconnected}\n   *\n   * 4. **Catch-All** Events (input-wide)\n   *\n   *    * [midimessage]{@link Input#event:midimessage}\n   *    * [unknownmidimessage]{@link Input#event:unknownmidimessage}\n   *\n   * 5. **Channel Voice** Events (channel-specific)\n   *\n   *    * [channelaftertouch]{@link InputChannel#event:channelaftertouch}\n   *    * [controlchange]{@link InputChannel#event:controlchange}\n   *    * [keyaftertouch]{@link InputChannel#event:keyaftertouch}\n   *    * [noteoff]{@link InputChannel#event:noteoff}\n   *    * [noteon]{@link InputChannel#event:noteon}\n   *    * [nrpn]{@link InputChannel#event:nrpn}\n   *    * [pitchbend]{@link InputChannel#event:pitchbend}\n   *    * [programchange]{@link InputChannel#event:programchange}\n   *\n   * 6. **Channel Mode** Events (channel-specific)\n   *\n   *    * allnotesoff\n   *    * allsoundoff\n   *    * localcontrol\n   *    * monomode\n   *    * omnimode\n   *    * resetallcontrollers\n   *\n   * @param event {string} The type of the event.\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object's properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the `arguments` property of the `Listener` object\n   * and can be retrieved or modified as desired.\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to listen on. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {Object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array.\n   *\n   * @throws {Error} For channel-specific events, 'options.channels' must be defined.\n   *\n   * @returns {Listener[]} An array of all `Listener` objects that were created.\n   */\n  addOneTimeListener(event, listener, options = {}) {\n    options.remaining = 1;\n    return this.addListener(event, listener, options);\n  }\n\n  /**\n   * This is an alias to the [Input.addListener()]{@link Input#addListener} method.\n   * @since 2.0.0\n   * @deprecated since v3.0\n   * @private\n   */\n  on(event, channel, listener, options) {\n    return this.addListener(event, channel, listener, options);\n  }\n\n  /**\n   * Checks if the specified event type is already defined to trigger the listener function. For\n   * channel-specific events, the function will return `true` only if all channels have the listener\n   * defined.\n   *\n   * @param event {string} The type of the event.\n   *\n   * @param listener {function} The callback function to check for.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to check. This parameter is ignored for\n   * input-wide events.\n   *\n   * @returns {Boolean} Boolean value indicating whether or not the channel(s) already have this\n   * listener defined.\n   *\n   * @throws Error For channel-specific events, 'options.channels' must be defined.\n   */\n  hasListener(event, listener, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = [].concat(listener); // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n      // Validation\n      if (\n        InputChannel.EVENTS.includes(event) &&\n        options.channels === undefined\n      ) {\n        throw new Error(\"For channel-specific events, 'options.channels' must be defined.\");\n      }\n\n    }\n\n    if (InputChannel.EVENTS.includes(event)) {\n\n      return Utilities.sanitizeChannels(options.channels).every(ch => {\n        return this.channels[ch].hasListener(event, listener);\n      });\n\n    } else {\n      return super.hasListener(event, listener);\n    }\n\n  }\n\n  /**\n   * Removes the specified listener for the specified event. If no listener is specified, all\n   * listeners for the specified event will be removed. If no event is specified, all listeners for\n   * the `Input` as well as all listeners for all `InputChannels` will be removed.\n   *\n   * By default, channel-specific listeners will be removed from all channels unless the\n   * `options.channel` narrows it down.\n   *\n   * @param [type] {String} The type of the event.\n   *\n   * @param [listener] {Function} The callback function to check for.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to match. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {*} [options.context] Only remove the listeners that have this exact context.\n   *\n   * @param {number} [options.remaining] Only remove the listener if it has exactly that many\n   * remaining times to be executed.\n   */\n  removeListener(event, listener, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = [].concat(listener); // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n    }\n\n    if (options.channels === undefined) {\n      options.channels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    }\n\n    // If the event is not specified, remove everything (channel-specific and input-wide)!\n    if (event == undefined) {\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        if (this.channels[ch]) this.channels[ch].removeListener();\n      });\n      return super.removeListener();\n    }\n\n    // If the event is specified, check if it's channel-specific or input-wide.\n    if (InputChannel.EVENTS.includes(event)) {\n\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].removeListener(event, listener, options);\n      });\n\n    } else {\n\n      super.removeListener(event, listener, options);\n\n    }\n\n  }\n\n  /**\n   * Name of the MIDI input\n   *\n   * @type {string}\n   * @readonly\n   */\n  get name() {\n    return this._midiInput.name;\n  }\n\n  /**\n   * ID string of the MIDI port. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiInput.id;\n  }\n\n  /**\n   * Input port's connection state: `\"pending\"`, `\"open\"` or `\"closed\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiInput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this input port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiInput.manufacturer;\n  }\n\n  /**\n   * An integer to offset the reported octave of incoming notes. By default, middle C (MIDI note\n   * number 60) is placed on the 4th octave (C4).\n   *\n   * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n   * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n   *\n   * Note that this value is combined with the global offset value defined on the `WebMidi` object\n   * (if any).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * State of the input port: `\"connected\"` or `\"disconnected\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiInput.state;\n  }\n\n  /**\n   * Port type. In the case of `Input`, this is always: `\"input\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiInput.type;\n  }\n\n  /**\n   * @type {boolean}\n   * @private\n   * @deprecated since v3.0.0 (moved to 'InputChannel' class)\n   */\n  get nrpnEventsEnabled() {\n    if (WebMidi.validation) {\n      console.warn(\"The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class.\");\n    }\n    return false;\n  }\n\n}\n\n// Events that do not have code below them must be placed outside the class definition (?!)\n\n/**\n * Input-wide (system) event emitted when a **system exclusive** message has been received.\n * You should note that, to receive `sysex` events, you must call the `WebMidi.enable()`\n * method with the `sysex` option set to `true`:\n *\n * ```js\n * WebMidi.enable({sysex: true})\n *  .then(() => console.log(\"WebMidi has been enabled with sysex support.\"))\n *  .catch(err => console.log(\"WebMidi could not be enabled.\"))\n * ```\n *\n * @event Input#sysex\n *\n * @type {Object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"sysex\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values.\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array.\n */\n\n/**\n * Input-wide (system) event emitted when a **time code quarter frame** message has been\n * received.\n *\n * @event Input#timecode\n *\n * @type {Object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"timecode\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **song position** message has been received.\n *\n * @event Input#songposition\n *\n * @type {Object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"songposition\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **song select** message has been received.\n *\n * @event Input#songselect\n *\n * @type {Object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"songselect\"`\n * @property {string} song Song (or sequence) number to select (1-128)\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **tune request** message has been received.\n *\n * @event Input#tunerequest\n *\n * @type {Object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"tunerequest\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **timing clock** message has been received.\n *\n * @event Input#clock\n *\n * @type {Object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"clock\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **start** message has been received.\n *\n * @event Input#start\n *\n * @type {Object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"start\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **continue** message has been received.\n *\n * @event Input#continue\n *\n * @type {Object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"continue\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **stop** message has been received.\n *\n * @event Input#stop\n *\n * @type {Object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"stop\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when an **active sensing** message has been received.\n *\n * @event Input#activesensing\n *\n * @type {Object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"activesensing\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **reset** message has been received.\n *\n * @event Input#reset\n *\n * @type {Object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"reset\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when an unknown MIDI message has been received. It could\n * be, for example, one of the undefined/reserved messages.\n *\n * @event Input#unknownmidimessage\n *\n * @type {Object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"unknownmidimessage\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n","import {Utilities} from \"./Utilities.js\";\nimport {Enumerations} from \"./Enumerations.js\";\n\n/**\n * The `Message` class represents a single MIDI message. It has several properties that make it\n * easy to make sense of the binaru data it contains.\n *\n * @param {Uint8Array} data The raw data of the MIDI message as a Uint8Array of integers between 0\n * and 255.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Message {\n\n  constructor(data) {\n\n    /**\n     * A Uint8Array containing the bytes of the MIDI message. Each byte is an integer between 0 and\n     * 255.\n     *\n     * @type {Uint8Array}\n     * @readonly\n     */\n    this.rawData = data;\n\n    /**\n     * An array containing the bytes of the MIDI message. Each byte is an integer is between 0 and\n     * 255.\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.data = Array.from(this.rawData);\n\n    /**\n     * The MIDI status byte of the message as an integer between 0 and 255.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.statusByte = this.rawData[0];\n\n    /**\n     * A Uint8Array of the data byte(s) of the MIDI message. When the message is a system exclusive\n     * message (sysex), `rawDataBytes` explicitly excludes the manufacturer ID and the sysex end\n     * byte so only the actual data is included.\n     *\n     * @type {Uint8Array}\n     * @readonly\n     */\n    this.rawDataBytes = this.rawData.slice(1);\n\n    /**\n     * An array of the the data byte(s) of the MIDI message. When the message is a system exclusive\n     * message (sysex), `dataBytes` explicitly excludes the manufacturer ID and the sysex end\n     * byte so only the actual data is included.\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.dataBytes = this.data.slice(1);\n\n    /**\n     * A boolean indicating whether the MIDI message is a channel-specific message.\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    this.isChannelMessage = false;\n\n    /**\n     * A boolean indicating whether the MIDI message is a system message (not specific to a\n     * channel).\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    this.isSystemMessage = false;\n\n    /**\n     * An integer identifying the MIDI command. For channel-specific messages, the value will be\n     * between 8 and 14. For system messages, the value will be between 240 and 255.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.command = undefined;\n\n    /**\n     * The MIDI channel number (1-16) that the message is targeting. This is only for\n     * channel-specific messages. For system messages, this will be left undefined.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.channel = undefined;\n\n    /**\n     * When the message is a system exclusive message (sysex), this property contains an array with\n     * either 1 or 3 entries that identify the manufacturer targeted by the message.\n     *\n     * To know how to translate these entries into manufacturer names, check out the official list:\n     * https://www.midi.org/specifications-old/item/manufacturer-id-numbers\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.manufacturerId = undefined;\n\n    // Assign values to property that vary according to whether they are channel-specific or system\n    if (this.statusByte < 240) {\n      this.isChannelMessage = true;\n      this.command = this.statusByte >> 4;\n      this.channel = (this.statusByte & 0b00001111) + 1;\n    } else {\n      this.isSystemMessage = true;\n      this.command = this.statusByte;\n    }\n\n    // Assign type (depending in whether the message is channel-specific or system)\n    if (this.isChannelMessage) {\n      this.type = Utilities.getPropertyByValue(Enumerations.MIDI_CHANNEL_MESSAGES, this.command);\n    } else if (this.isSystemMessage) {\n      this.type = Utilities.getPropertyByValue(Enumerations.MIDI_SYSTEM_MESSAGES, this.command);\n    }\n\n    // When the message is a sysex message, we add a manufacturer property and strip out the id from\n    // dataBytes and rawDataBytes.\n    if (this.statusByte === Enumerations.MIDI_SYSTEM_MESSAGES.sysex) {\n\n      if (this.dataBytes[0] === 0) {\n        this.manufacturerId = this.dataBytes.slice(0, 3);\n        this.dataBytes = this.dataBytes.slice(3, this.rawDataBytes.length - 1);\n        this.rawDataBytes = this.rawDataBytes.slice(3, this.rawDataBytes.length - 1);\n      } else {\n        this.manufacturerId = [this.dataBytes[0]];\n        this.dataBytes = this.dataBytes.slice(1, this.dataBytes.length - 1);\n        this.rawDataBytes = this.rawDataBytes.slice(1, this.rawDataBytes.length - 1);\n      }\n\n    }\n\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {Input} from \"./Input.js\";\nimport {Output} from \"./Output.js\";\nimport {Utilities} from \"./Utilities.js\";\nimport {Enumerations} from \"./Enumerations.js\";\nimport {InputChannel} from \"./InputChannel.js\";\n\n/*START-NODE.JS*/\n// This block of code is only relevant on Node.js and causes issues with bundlers (such as Webpack)\n// and server-side rendering. This is why it is explicitly being stripped off for the IIFE and ESM\n// distributions.\nglobal[\"performance\"] = require(\"perf_hooks\").performance;\nglobal[\"navigator\"] = require(\"jzz\");\n/*END-NODE.JS*/\n\n/**\n * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it\n * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.\n *\n * When using the WebMidi.js library, you should know that the `WebMidi` class has already been\n * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should\n * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6\n * module) version, you get an already-instantiated object when you import the module.\n *\n * @fires WebMidi#connected\n * @fires WebMidi#disabled\n * @fires WebMidi#disconnected\n * @fires WebMidi#enabled\n * @fires WebMidi#midiaccessgranted\n *\n * @extends EventEmitter\n * @license Apache-2.0\n */\nclass WebMidi extends EventEmitter {\n\n  constructor() {\n\n    super();\n\n    /**\n     * Object containing system-wide default values that can be changed to customize how the library\n     * works.\n     *\n     * @type {Object}\n     *\n     * @property {object}  defaults.note - Default values relating to note\n     * @property {number}  defaults.note.attack - A number between 0 and 127 representing the\n     * default attack velocity of notes. Initial value is 64.\n     * @property {number}  defaults.note.release - A number between 0 and 127 representing the\n     * default release velocity of notes. Initial value is 64.\n     * @property {number}  defaults.note.duration - A number representing the default duration of\n     * notes (in seconds). Initial value is Infinity.\n     */\n    this.defaults = {\n      note: {\n        attack: Utilities.toNormalized(64),\n        release: Utilities.toNormalized(64),\n        duration: Infinity\n      }\n    };\n\n    /**\n     * The [`MIDIAccess`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess)\n     * instance used to talk to the lower-level Web MIDI API. This should not be used directly\n     * unless you know what you are doing.\n     *\n     * @type {?MIDIAccess}\n     * @readonly\n     */\n    this.interface = null;\n\n    /**\n     * Indicates whether argument validation and backwards-compatibility checks are performed\n     * throughout the WebMidi.js library for object methods and property setters.\n     *\n     * This is an advanced setting that should be used carefully. Setting `validation` to `false`\n     * improves performance but should only be done once the project has been thoroughly tested with\n     * `validation` turned on.\n     *\n     * @type {boolean}\n     */\n    this.validation = true;\n\n    /**\n     * Array of all (Input) objects\n     * @type {Input[]}\n     * @private\n     */\n    this._inputs = [];\n    this._disconnectedInputs = [];\n\n    /**\n     * Array of all [`Output`](Output) objects\n     * @type {Output[]}\n     * @private\n     */\n    this._outputs = [];\n    this._disconnectedOutputs = [];\n\n    /**\n     * Array of statechange events to process. These events must be parsed synchronously so they do\n     * not override each other.\n     *\n     * @type {string[]}\n     * @private\n     */\n    this._stateChangeQueue = [];\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n  }\n\n  /**\n   * Checks if the Web MIDI API is available in the current environment and then tries to connect to\n   * the host's MIDI subsystem. This is an asynchronous operation and it causes a security prompt to\n   * be displayed to the user.\n   *\n   * To enable the use of MIDI system exclusive messages, the `sysex` option should be set to\n   * `true`. However, under some environments (e.g. Jazz-Plugin), the `sysex` option is ignored\n   * and system exclusive messages are always enabled. You can check the\n   * [`sysexEnabled`](#sysexEnabled) property to confirm.\n   *\n   * To enable access to software synthesizers available on the host, you would set the `software`\n   * option to `true`. However, this option is only there to future-proof the library as support for\n   * software synths has not yet been implemented in any browser (as of September 2021).\n   *\n   * By the way, if you call the [`enable()`](#enable) method while WebMidi.js is already enabled,\n   * the callback function will be executed (if any), the promise will resolve but the events\n   * ([`\"midiaccessgranted\"`](#event:midiaccessgranted), [`\"connected\"`](#event:connected) and\n   * [`\"enabled\"`](#event:enabled)) will not be fired.\n   *\n   * There are 3 ways to execute code after `WebMidi` has been enabled:\n   *\n   * - Pass a callback function in the `options`\n   * - Listen to the [`\"enabled\"`](#event:enabled) event\n   * - Wait for the promise to resolve\n   *\n   * In order, this is what happens towards the end of the enabling process:\n   *\n   * 1. [`\"midiaccessgranted\"`](#event:midiaccessgranted) event is triggered\n   * 2. [`\"connected\"`](#event:connected) events are triggered (for each available input and output)\n   * 3. [`\"enabled\"`](#event:enabled) event is triggered when WebMidi.js is ready\n   * 4. specified callback (if any) is executed\n   * 5. promise is resolved and fulfilled with the `WebMidi` object.\n   *\n   * **Important note**: starting with Chrome v77, a page using Web MIDI API must be hosted on a\n   * secure origin (`https://`, `localhost` or `file:///`) and the user will always be prompted to\n   * authorize the operation (no matter if the `sysex` option is `true` or not).\n   *\n   * ##### Example\n   * ```js\n   * // Enabling WebMidi and using the promise\n   * WebMidi.enable().then(ports => {\n   *   console.log(\"WebMidi.js has been enabled!\");\n   *   console.log(\"Inputs: \", ports.inputs);\n   *   console.log(\"Outputs: \", ports.outputs);\n   * })\n   * ```\n   *\n   * @param [options] {Object}\n   *\n   * @param [options.callback] {function} A function to execute once the operation completes. This\n   * function will receive an `Error` object if enabling the Web MIDI API failed.\n   *\n   * @param [options.sysex=false] {boolean} Whether to enable MIDI system exclusive messages or not.\n   *\n   * @param [options.validation=true] {boolean} Whether to enable library-wide validation of method\n   * arguments and setter values. This is an advanced setting that should be used carefully. Setting\n   * [`validation`](#validation) to `false` improves performance but should only be done once the\n   * project has been thoroughly tested with [`validation`](#validation)  turned on.\n   *\n   * @param [options.software=false] {boolean} Whether to request access to software synthesizers on\n   * the host system. This is part of the spec but has not yet been implemented by most browsers as\n   * of April 2020.\n   *\n   * @async\n   *\n   * @returns {Promise.<WebMidi>} The promise is fulfilled with the `WebMidi` object fro\n   * chainability\n   *\n   * @throws {Error} The Web MIDI API is not supported in your environment.\n   * @throws {Error} Jazz-Plugin must be installed to use WebMIDIAPIShim.\n   */\n  async enable(options = {}, legacy = false) {\n\n    this.validation = (options.validation !== false);\n\n    if (this.validation) {\n      // Backwards-compatibility. Previous syntax was: enable(callback, sysex)\n      if (typeof options === \"function\") options = {callback: options, sysex: legacy};\n      if (legacy) options.sysex = true;\n    }\n\n    // If already enabled, trigger callback and resolve promise but do not dispatch events.\n    if (this.enabled) {\n      if (typeof options.callback === \"function\") options.callback();\n      return Promise.resolve();\n    }\n\n    // The Jazz-Plugin takes a while to be available (even after the Window's 'load' event has been\n    // fired). Therefore, we wait a little while to give it time to finish loading (initiqted in\n    // constructor).\n    // if (!this.supported) {\n    //\n    //   await new Promise((resolve, reject) => {\n    //\n    //     const start = this.time;\n    //\n    //     const intervalID = setInterval(() => {\n    //\n    //       if (this.supported) {\n    //         clearInterval(intervalID);\n    //         resolve();\n    //       } else {\n    //         if (this.time > start + 1500) {\n    //           clearInterval(intervalID);\n    //           let error = new Error(\"The Web MIDI API is not available in your environment.\");\n    //           if (typeof options.callback === \"function\") options.callback(error);\n    //           reject(error);\n    //         }\n    //       }\n    //\n    //     }, 25);\n    //\n    //   });\n    //\n    // }\n\n    /**\n     * Event emitted when an error occurs trying to enable `WebMidi`\n     *\n     * @event WebMidi#error\n     * @type {Object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `error`\n     * @property {*} error Actual error that occurred\n     */\n    const errorEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"error\",\n      error: undefined\n    };\n\n    /**\n     * Event emitted once the MIDI interface has been successfully created.\n     *\n     * @event WebMidi#midiaccessgranted\n     * @type {Object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `midiaccessgranted`\n     */\n    const midiAccessGrantedEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"midiaccessgranted\"\n    };\n\n    /**\n     * Event emitted once `WebMidi` has been fully enabled\n     *\n     * @event WebMidi#enabled\n     * @type {Object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `\"enabled\"`\n     */\n    const enabledEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"enabled\"\n    };\n\n    // Request MIDI access (this iw where the prompt will appear)\n    try {\n      this.interface = await navigator.requestMIDIAccess(\n        {sysex: options.sysex, software: options.software}\n      );\n    } catch(err) {\n      errorEvent.error = err;\n      this.emit(\"error\", errorEvent);\n      if (typeof options.callback === \"function\") options.callback(err);\n      return Promise.reject(err);\n    }\n\n    // Now that the Web MIDI API interface has been created, we trigger the 'midiaccessgranted'\n    // event. This allows the developer an occasion to assign listeners on 'connected' events.\n    this.emit(\"midiaccessgranted\", midiAccessGrantedEvent);\n\n    // We setup the state change listener before creating the ports so that it properly catches the\n    // the ports' `connected` events\n    this.interface.onstatechange = this._onInterfaceStateChange.bind(this);\n\n    // Update inputs and outputs (this is where `Input` and `Output` objects are created).\n    try {\n      await this._updateInputsAndOutputs();\n    } catch (err) {\n      errorEvent.error = err;\n      this.emit(\"error\", errorEvent);\n      if (typeof options.callback === \"function\") options.callback(err);\n      return Promise.reject(err);\n    }\n\n    // If we make it here, the ports have been successfully created, so we trigger the 'enabled'\n    // event.\n    this.emit(\"enabled\", enabledEvent);\n\n    // Execute the callback (if any) and resolve the promise with 'this' (for chainability)\n    if (typeof options.callback === \"function\") options.callback();\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * Completely disables **WebMidi.js** by unlinking the MIDI subsystem's interface and closing all\n   * [`Input`](Input) and [`Output`](Output) objects that may have been opened. This also means that\n   * listeners added to [`Input`](Input) objects, [`Output`](Output) objects or to `WebMidi` itself\n   * are also destroyed.\n   *\n   * @async\n   * @returns {Promise}\n   *\n   * @throws {Error} The Web MIDI API is not supported by your environment.\n   *\n   * @since 2.0.0\n   */\n  async disable() {\n\n    return this._destroyInputsAndOutputs().then(() => {\n\n      if (typeof navigator.close === \"function\") navigator.close();\n\n      if (this.interface) this.interface.onstatechange = undefined;\n      this.interface = null; // also resets enabled, sysexEnabled\n\n      /**\n       * Event emitted once `WebMidi` has been successfully disabled.\n       *\n       * @event WebMidi#disabled\n       * @type {Object}\n       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {WebMidi} target The object that triggered the event\n       * @property {string} type `\"disabled\"`\n       */\n      let event = {\n        timestamp: this.time,\n        target: this,\n        type: \"disabled\"\n      };\n\n      // Finally, trigger the 'disabled' event and then remove all listeners.\n      this.emit(\"disabled\", event);\n      this.removeListener();\n\n    });\n\n  };\n\n  /**\n   * Returns the [`Input`](Input) object that matches the specified ID string or `false` if no\n   * matching input is found. As per the Web MIDI API specification, IDs are strings (not integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the input. IDs can be viewed by looking at the\n   * [`WebMidi.inputs`](WebMidi#inputs) array. Even though they sometimes look like integers, IDs\n   * are strings.\n   *\n   * @returns {Input|false} An [`Input`](Input) object matching the specified ID string or `false`\n   * if no matching input can be found.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputById(id) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!id) return false;\n    }\n\n    for (let i = 0; i < this.inputs.length; i++) {\n      if (this.inputs[i].id === id.toString()) return this.inputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the first [`Input`](Input) object whose name **contains** the specified string. Note\n   * that the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [inputs](WebMidi#inputs) array).\n   *\n   * @returns {Input|false} The [`Input`](Input) that was found or `false` if no input contained the\n   * specified name.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputByName(name) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!name) return false;\n      name = name.toString();\n    }\n\n    for (let i = 0; i < this.inputs.length; i++) {\n      if (~this.inputs[i].name.indexOf(name)) return this.inputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the first [`Output`](Output) object whose name **contains** the specified string. Note\n   * that the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [outputs](WebMidi#outputs) array).\n   *\n   * @returns {Output|false} The [`Output`](Output) that was found or `false` if no output matched\n   * the specified name.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputByName(name) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!name) return false;\n      name = name.toString();\n    }\n\n    for (let i = 0; i < this.outputs.length; i++) {\n      if (~this.outputs[i].name.indexOf(name)) return this.outputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the [`Output`](Output) object that matches the specified ID string or `false` if no\n   * matching output is found. As per the Web MIDI API specification, IDs are strings (not\n   * integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the port. IDs can be viewed by looking at the\n   * [`WebMidi.outputs`](WebMidi#outputs) array.\n   *\n   * @returns {Output|false} An [`Output`](Output) object matching the specified ID string. If no\n   * matching output can be found, the method returns `false`.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputById(id) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!id) return false;\n    }\n\n    for (let i = 0; i < this.outputs.length; i++) {\n      if (this.outputs[i].id === id.toString()) return this.outputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.toNoteNumber() instead.\n   */\n  noteNameToNumber(name) {\n    if (this.validation) {\n      console.warn(\n        \"The noteNameToNumber() method is deprecated. Use \" +\n        \"Utilities.toNoteNumber() instead.\"\n      );\n    }\n    return Utilities.toNoteNumber(name, this.octaveOffset);\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0, use Utilities.getNoteDetails() instead.\n   */\n  getOctave(number) {\n\n    if (this.validation) {\n      console.warn(\"The getOctave()is deprecated. Use Utilities.getNoteDetails() instead\");\n      number = parseInt(number);\n    }\n\n    if (!isNaN(number) && number >= 0 && number <= 127) {\n      return Utilities.getNoteDetails(Utilities.offsetNumber(number, this.octaveOffset)).octave;\n    } else {\n      return false;\n    }\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0, use Utilities.sanitizeChannels() instead.\n   */\n  sanitizeChannels(channel) {\n\n    if (this.validation) {\n      console.warn(\"The sanitizeChannels() method has been moved to the utilities class.\");\n    }\n\n    return Utilities.sanitizeChannels(channel);\n\n    // let channels;\n    //\n    // if (this.validation) {\n    //\n    //   if (channel === \"all\") { // backwards-compatibility\n    //     channels = [\"all\"];\n    //   } else if (channel === \"none\") { // backwards-compatibility\n    //     return [];\n    //   }\n    //\n    // }\n    //\n    // if (!Array.isArray(channel)) {\n    //   channels = [channel];\n    // } else {\n    //   channels = channel;\n    // }\n    //\n    // // In order to preserve backwards-compatibility, we let this assignment as it is.\n    // if (channels.indexOf(\"all\") > -1) {\n    //   channels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    // }\n    //\n    // return channels\n    //   .map(function(ch) {\n    //     return parseInt(ch);\n    //   })\n    //   .filter(function(ch) {\n    //     return (ch >= 1 && ch <= 16);\n    //   });\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.sanitizeChannels() instead.\n   */\n  toMIDIChannels(channel) {\n\n    if (this.validation) {\n      console.warn(\n        \"The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead.\"\n      );\n    }\n\n    return Utilities.sanitizeChannels(channel);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.guessNoteNumber() instead.\n   */\n  guessNoteNumber(input) {\n\n    if (this.validation) {\n      console.warn(\n        \"The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead.\"\n      );\n    }\n\n    return Utilities.guessNoteNumber(input, this.octaveOffset);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.buildNoteArray() instead.\n   */\n  getValidNoteArray(notes, options = {}) {\n    if (this.validation) {\n      console.warn(\n        \"The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()\"\n      );\n    }\n    return Utilities.buildNoteArray(notes, options);\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.toTimestamp() instead.\n   */\n  convertToTimestamp(time) {\n\n    if (this.validation) {\n      console.warn(\n        \"The convertToTimestamp() method has been moved to Utilities.toTimestamp().\"\n      );\n    }\n\n    return Utilities.toTimestamp(time);\n\n  }\n\n  /**\n   * @return {Promise<void>}\n   * @private\n   */\n  async _destroyInputsAndOutputs() {\n\n    let promises = [];\n\n    this.inputs.forEach(input => promises.push(input.destroy()));\n    this.outputs.forEach(output => promises.push(output.destroy()));\n\n    return Promise.all(promises).then(() => {\n      this._inputs = [];\n      this._outputs = [];\n    });\n\n  }\n\n  /**\n   * @private\n   */\n  _onInterfaceStateChange(e) {\n\n    console.log(e.type, e.port.name, e.port.state, e.port.connection);\n\n    this._updateInputsAndOutputs();\n\n    /**\n     * Event emitted when an [`Input`](Input) or [`Output`](Output) becomes available. This event is\n     * typically fired whenever a MIDI device is plugged in. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#connected\n     * @type {Object}\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n     * (in milliseconds since the navigation start of the document).\n     * @property {string} type `\"connected\"`\n     * @property {Input|Output} target The [`Input`](Input) or [`Output`](Output) object that\n     * triggered the event.\n     */\n\n    /**\n     * Event emitted when an [`Input`](Input) or [`Output`](Output) becomes unavailable. This event\n     * is typically fired whenever a MIDI device is unplugged. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#disconnected\n     * @type {Object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {string} type `\"disconnected\"`\n     * @property {Object} target Object with properties describing the [`Input`](Input) or\n     * [`Output`](Output) that triggered the event.\n     * @property {string} target.connection `\"closed\"`\n     * @property {string} target.id ID of the input\n     * @property {string} target.manufacturer Manufacturer of the device that provided the input\n     * @property {string} target.name Name of the device that provided the input\n     * @property {string} target.state `disconnected`\n     * @property {string} target.type `input` or `output`\n     */\n    let event = {\n      timestamp: e.timeStamp,\n      type: e.port.state\n    };\n\n    // We check if \"connection\" is \"open\" because connected events are also triggered with\n    // \"connection=closed\"\n    if (e.port.state === \"connected\" && e.port.connection === \"open\") {\n\n      if (e.port.type === \"output\") {\n        event.port = this.getOutputById(e.port.id); // legacy\n        event.target = event.port;\n      } else if (e.port.type === \"input\") {\n        event.port = this.getInputById(e.port.id); // legacy\n        event.target = event.port;\n      }\n\n      this.emit(e.port.state, event);\n\n    // We check if \"connection\" is \"pending\" because we do not always get the \"closed\" event\n    } else if (e.port.state === \"disconnected\" && e.port.connection === \"pending\") {\n\n      // It feels more logical to include a `target` property instead of a `port` property. This is\n      // the terminology used everywhere in the library.\n      event.port = {\n        connection: \"closed\",\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n\n      event.target = event.port;\n\n      this.emit(e.port.state, event);\n\n    }\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputsAndOutputs() {\n\n    return Promise.all([\n      this._updateInputs(),\n      this._updateOutputs()\n    ]);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputs() {\n\n    // We must check for the existence of this.interface because it might have been closed via\n    // WebMidi.disable().\n    if (!this.interface) return;\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = this._inputs.length - 1; i >= 0; i--) {\n      const current = this._inputs[i];\n      const inputs = Array.from(this.interface.inputs.values());\n      if (! inputs.find(input => input === current._midiInput)) {\n        // Instead of destroying removed inputs, we stash them in case they come back later (which\n        // is the case when the computer goes to sleep and is later brought back online).\n        this._disconnectedInputs.push(current);\n        this._inputs.splice(i, 1);\n      }\n    }\n\n    // Array to hold pending promises from trying to open all input ports\n    let promises = [];\n\n    // Add new inputs (if not already present)\n    this.interface.inputs.forEach(nInput => {\n\n      // Check if the input is currently absent from the 'inputs' array.\n      if (! this._inputs.find(input => input._midiInput === nInput) ) {\n\n        // If the input has previously been stashed away, reuse it. If not, create a new one.\n        let input = this._disconnectedInputs.find(input => input._midiInput === nInput);\n        if (!input) input = new Input(nInput);\n        this._inputs.push(input);\n        promises.push(input.open());\n\n      }\n\n    });\n\n    // Return a promise that resolves when all promises have resolved\n    return Promise.all(promises);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateOutputs() {\n\n    // We must check for the existence of this.interface because it might have been closed via\n    // WebMidi.disable().\n    if (!this.interface) return;\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = this._outputs.length - 1; i >= 0; i--) {\n      const current = this._outputs[i];\n      const outputs = Array.from(this.interface.outputs.values());\n      if (! outputs.find(output => output === current._midiOutput)) {\n        // Instead of destroying removed inputs, we stash them in case they come back later (which\n        // is the case when the computer goes to sleep and is later brought back online).\n        this._disconnectedOutputs.push(current);\n        this._outputs.splice(i, 1);\n      }\n    }\n\n    // Array to hold pending promises from trying to open all output ports\n    let promises = [];\n\n    // // Add new outputs (if not already present)\n    // this.interface.outputs.forEach(nOutput => {\n    //\n    //   // Check if the output already exists\n    //   const exists = this._outputs.find(output => output._midiOutput === nOutput);\n    //\n    //   // If the output does not already exist, create new Input object and add it to the list of\n    //   // outputs.\n    //   if (!exists) {\n    //     const output = new Output(nOutput);\n    //     this._outputs.push(output);\n    //     promises.push(output.open());\n    //   }\n    //\n    // });\n\n    // Add new outputs (if not already present)\n    this.interface.outputs.forEach(nOutput => {\n\n      // Check if the output is currently absent from the 'outputs' array.\n      if (! this._outputs.find(output => output._midiOutput === nOutput) ) {\n\n        // If the output has previously been stashed away, reuse it. If not, create a new one.\n        let output = this._disconnectedOutputs.find(output => output._midiInput === nOutput);\n        if (!output) output = new Input(nOutput);\n        this._outputs.push(output);\n        promises.push(output.open());\n\n      }\n\n    });\n\n    // Return a promise that resolves when all promises have resolved\n    return Promise.all(promises);\n\n  };\n\n  // injectPluginMarkup(parent) {\n  //\n  //   // Silently ignore on Node.js\n  //   if (this.isNode) return;\n  //\n  //   // Default to <body> if no parent is specified\n  //   if (!(parent instanceof Element) && !(parent instanceof HTMLDocument)) {\n  //     parent = document.body;\n  //   }\n  //\n  //   // IE10 needs this:\n  //   // <meta http-equiv=\"X-UA-Compatible\" content=\"requiresActiveX=true\"/>\n  //\n  //   // Create markup and add to parent\n  //   const obj = document.createElement(\"object\");\n  //   obj.classid = \"CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90\"; // IE\n  //   if (!obj.isJazz) obj.type = \"audio/x-jazz\";                 // Standards-compliant\n  //   obj.style.visibility = \"hidden\";\n  //   obj.style.width = obj.style.height = \"0px\";\n  //   parent.appendChild(obj);\n  //\n  // }\n\n  /**\n   * Indicates whether access to the host's MIDI subsystem is active or not.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get enabled() {\n    return this.interface !== null;\n  }\n\n  /**\n   * An array of all currently available MIDI inputs.\n   *\n   * @readonly\n   * @type {Array}\n   */\n  get inputs() {\n    return this._inputs;\n  }\n\n  /**\n   * Indicates whether the current environment is Node.js or not. If you need to check if we are in\n   * browser, use [`isBrowser`](#isBrowser). In certain environments (such as Electron and\n   * NW.js) [`isNode`](#isNode) and [`isBrowser`](#isBrowser) can both be true at the\n   * same time.\n   * @type {boolean}\n   */\n  get isNode() {\n\n    return (Object.prototype.toString.call(\n      typeof process !== \"undefined\" ? process : 0\n    ) === \"[object process]\");\n\n    // Alternative way to try\n    // return typeof process !== \"undefined\" &&\n    //   process.versions != null &&\n    //   process.versions.node != null;\n\n  }\n\n  /**\n   * Indicates whether the current environment is a browser environment or not. If you need to check\n   * if we are in Node.js, use [`isNode`](#isNode). In certain environments (such as Electron and\n   * NW.js) [`isNode`](#isNode) and [`isBrowser`](#isBrowser) can both be true at the same time.\n   * @type {boolean}\n   */\n  get isBrowser() {\n    return typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n  }\n\n  /**\n   * An integer to offset the octave of notes received from external devices or sent to external\n   * devices.\n   *\n   * When a MIDI message comes in on an input channel the reported note name will be offset. For\n   * example, if the `octaveOffset` is set to `-1` and a [`\"noteon\"`](InputChannel#event:noteon)\n   * message with MIDI number 60 comes in, the note will be reported as C3 (instead of C4).\n   *\n   * By the same token, when [`OutputChannel.playNote()`](OutputChannel#playNote) is called, the\n   * MIDI note number being sent will be offset. If `octaveOffset` is set to `-1`, the MIDI note\n   * number sent will be 72 (instead of 60).\n   *\n   * @type {number}\n   *\n   * @since 2.1\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * An array of all currently available MIDI outputs as [`Output`](Output) objects.\n   *\n   * @readonly\n   * @type {Array}\n   */\n  get outputs() {\n    return this._outputs;\n  }\n\n  /**\n   * Indicates whether the environment provides support for the Web MIDI API or not.\n   *\n   * **Note**: in environments that do not offer built-in MIDI support, this will report `true` if\n   * the\n   * [`navigator.requestMIDIAccess`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess)\n   * function is available. For example, if you have installed WebMIDIAPIShim.js but no plugin, this\n   * property will be `true` even though actual support might not be there.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get supported() {\n    return (typeof navigator !== \"undefined\" && navigator.requestMIDIAccess);\n  }\n\n  /**\n   * Indicates whether MIDI system exclusive messages have been activated when WebMidi.js was\n   * enabled via the [`enable()`](#enable) method.\n   *\n   * @readonly\n   * @type boolean\n   */\n  get sysexEnabled() {\n    return !!(this.interface && this.interface.sysexEnabled);\n  }\n\n  /**\n   * The elapsed time, in milliseconds, since the time\n   * [origin](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp#The_time_origin).\n   * Said simply, it is the number of milliseconds that passed since the page was loaded. Being a\n   * floating-point number, it has sub-millisecond accuracy. According to the\n   * [documentation](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp), the\n   * time should be accurate to 5 µs (microseconds). However, due to various constraints, the\n   * browser might only be accurate to one millisecond.\n   *\n   * @type {DOMHighResTimeStamp}\n   * @readonly\n   */\n  get time() {\n    return performance.now();\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use InputChannel.EVENTS instead.\n   */\n  get CHANNEL_EVENTS() {\n    if (this.validation) {\n      console.warn(\n        \"The CHANNEL_EVENTS enum has been moved to InputChannel.EVENTS.\"\n      );\n    }\n    return InputChannel.EVENTS;\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.MIDI_SYSTEM_MESSAGES instead.\n   */\n  get MIDI_SYSTEM_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_SYSTEM_MESSAGES enum has been moved to \" +\n        \"Enumerations.MIDI_SYSTEM_MESSAGES.\"\n      );\n    }\n\n    return Enumerations.MIDI_SYSTEM_MESSAGES;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.MIDI_CHANNEL_MODE_MESSAGES instead\n   */\n  get MIDI_CHANNEL_MODE_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to \" +\n        \"Enumerations.MIDI_CHANNEL_MODE_MESSAGES.\"\n      );\n    }\n\n    return Enumerations.MIDI_CHANNEL_MODE_MESSAGES;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.MIDI_CONTROL_CHANGE_MESSAGES instead.\n   */\n  get MIDI_CONTROL_CHANGE_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CONTROL_CHANGE_MESSAGES enum has been moved to \" +\n        \"Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.\"\n      );\n    }\n\n    return Enumerations.MIDI_CONTROL_CHANGE_MESSAGES;\n\n  }\n\n  /**\n   * @deprecated since 3.0.0. Use Enumerations.MIDI_REGISTERED_PARAMETERS instead.\n   * @private\n   */\n  get MIDI_REGISTERED_PARAMETER() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_REGISTERED_PARAMETER enum has been moved to \" +\n        \"Enumerations.MIDI_REGISTERED_PARAMETERS.\"\n      );\n    }\n\n    return this.MIDI_REGISTERED_PARAMETERS;\n\n  }\n\n  /**\n   * @deprecated since 3.0.0.\n   * @private\n   */\n  get NOTES() {\n\n    if (this.validation) {\n      console.warn(\"The NOTES enum has been deprecated.\");\n    }\n\n    return [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n  }\n\n}\n\n// Export singleton instance of WebMidi class. The 'constructor' is nulled so that it cannot be used\n// to instantiate a new WebMidi object or extend it. However, it is not freezed so it remains\n// extensible (properties can be added at will).\nconst wm = new WebMidi();\nwm.constructor = null;\nexport {wm as WebMidi};\n\nexport {Note} from \"./Note.js\";\nexport {Utilities} from \"./Utilities.js\";\nexport {Enumerations} from \"./Enumerations.js\";\nexport {Message} from \"./Message.js\";\n"],"names":["Note","constructor","value","options","duration","WebMidi","defaults","note","attack","release","undefined","this","rawAttack","Utilities","toNormalized","rawRelease","Number","isInteger","identifier","toNoteIdentifier","_name","_accidental","_octave","fragments","getNoteDetails","validation","Error","name","accidental","octave","toUpperCase","includes","toLowerCase","parseInt","isNaN","_duration","parseFloat","RangeError","_attack","_release","to7Bit","toNoteNumber","getOffsetNumber","octaveOffset","semitoneOffset","Math","min","max","number","TypeError","result","C","D","E","F","G","A","B","startsWith","length","matches","match","channel","channels","Array","isArray","indexOf","map","ch","filter","time","parsed","substring","input","output","String","trim","e","floor","toString","guessNoteNumber","notes","forEach","push","buildNote","Infinity","round","object","Object","keys","find","key","Enumerations","noteoff","noteon","keyaftertouch","controlchange","programchange","channelaftertouch","pitchbend","allsoundoff","resetallcontrollers","localcontrol","allnotesoff","omnimodeoff","omnimodeon","monomodeon","polymodeon","bankselectcoarse","modulationwheelcoarse","breathcontrollercoarse","footcontrollercoarse","portamentotimecoarse","dataentrycoarse","volumecoarse","balancecoarse","pancoarse","expressioncoarse","effectcontrol1coarse","effectcontrol2coarse","generalpurposeslider1","generalpurposeslider2","generalpurposeslider3","generalpurposeslider4","bankselectfine","modulationwheelfine","breathcontrollerfine","footcontrollerfine","portamentotimefine","dataentryfine","volumefine","balancefine","panfine","expressionfine","effectcontrol1fine","effectcontrol2fine","holdpedal","portamento","sustenutopedal","softpedal","legatopedal","hold2pedal","soundvariation","resonance","soundreleasetime","soundattacktime","brightness","soundcontrol6","soundcontrol7","soundcontrol8","soundcontrol9","soundcontrol10","generalpurposebutton1","generalpurposebutton2","generalpurposebutton3","generalpurposebutton4","reverblevel","tremololevel","choruslevel","celestelevel","phaserlevel","databuttonincrement","databuttondecrement","nonregisteredparametercoarse","nonregisteredparameterfine","registeredparametercoarse","registeredparameterfine","pitchbendrange","channelfinetuning","channelcoarsetuning","tuningprogram","tuningbank","modulationrange","azimuthangle","elevationangle","gain","distanceratio","maximumdistance","maximumdistancegain","referencedistanceratio","panspreadangle","rollangle","sysex","timecode","songposition","songselect","tunerequest","tuningrequest","sysexend","clock","start","continue","stop","activesensing","reset","midimessage","unknownsystemmessage","InputChannel","EventEmitter","_input","_number","_octaveOffset","_nrpnBuffer","_rpnBuffer","parameterNumberEventsEnabled","destroy","removeListener","_processMidiMessageEvent","event","assign","target","type","emit","_parseEventForStandardMessages","message","data1","dataBytes","data2","offsetNumber","rawValue","velocity","rawVelocity","rawKey","controller","getCcNameByNumber","_parseChannelModeMessage","isRpnOrNrpnController","_parseEventForParameterNumber","data","list","MIDI_CONTROL_CHANGE_MESSAGES","_dispatchParameterNumberEvent","paramMsb","paramLsb","timestamp","parameterMsb","parameterLsb","getPropertyByValue","parameter","MIDI_REGISTERED_PARAMETERS","getChannelModeByNumber","cm","MIDI_CHANNEL_MODE_MESSAGES","hasOwnProperty","Input","midiInput","_midiInput","i","onstatechange","_onStateChange","bind","onmidimessage","_onMidiMessage","close","port","connection","state","id","manufacturer","console","warn","Message","timeStamp","rawData","statusByte","isSystemMessage","_parseEvent","isChannelMessage","song","open","err","Promise","reject","resolve","addListener","listener","concat","EVENTS","listeners","sanitizeChannels","super","addOneTimeListener","remaining","on","hasListener","every","from","rawDataBytes","slice","command","manufacturerId","MIDI_CHANNEL_MESSAGES","MIDI_SYSTEM_MESSAGES","wm","interface","_inputs","_disconnectedInputs","_outputs","_disconnectedOutputs","_stateChangeQueue","legacy","callback","enabled","errorEvent","error","midiAccessGrantedEvent","enabledEvent","navigator","requestMIDIAccess","software","_onInterfaceStateChange","_updateInputsAndOutputs","_destroyInputsAndOutputs","then","getInputById","inputs","getInputByName","getOutputByName","outputs","getOutputById","noteNameToNumber","getOctave","toMIDIChannels","getValidNoteArray","buildNoteArray","convertToTimestamp","toTimestamp","promises","all","log","_updateInputs","_updateOutputs","current","values","splice","nInput","_midiOutput","nOutput","prototype","call","process","window","document","sysexEnabled","performance","now"],"mappings":"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"}