{"version":3,"file":"webmidi.iife.min.js","sources":["../src/Note.js","../src/Utilities.js","../src/InputChannel.js","../src/Input.js","../src/OutputChannel.js","../src/Output.js","../src/Message.js","../src/WebMidi.js"],"sourcesContent":["import {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/**\n * The `Note` class represents a single musical note such as `\"D3\"`, `\"G#4\"`, `\"F-1\"`, `\"Gb7\"`, etc.\n *\n * `Note` objects can be played back on a single channel by calling\n * [OutputChannel.playNote()]{@link OutputChannel#playNote} or on multiple channels of the same\n * output by calling [Output.playNote()]{@link Output#playNote}.\n *\n * The note has attack and release velocities set at 0.5 by default. These can be changed by passing\n * in the appropriate option. It is also possible to set a system-wide default for attack and\n * release velocities by using the `WebMidi.defaults` property.\n *\n * The note may have a duration. If it does, playback will be automatically stopped when the\n * duration has elapsed by sending a **noteoff** event. By default, the duration is set to\n * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a\n * method such as [OutputChannel.stopNote()]{@link OutputChannel#stopNote},\n * [Output.stopNote()]{@link Output#stopNote} or similar.\n *\n * @param value {string|number} The value used to create the note. If an identifier string is used,\n * it must start with the note letter, optionally followed by an accidental and followed by the\n * octave number (`\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`, etc.). If a number is used, it must be an\n * integer between 0 and 127. In this case, middle C is considered to be C4 (note number 60).\n *\n * @param {Object} [options={}]\n *\n * @param {number} [options.duration=Infinity] The number of milliseconds before the note should be\n * explicitly stopped.\n *\n * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n * `attack` and `rawAttack` are specified, the latter has precedence.\n *\n * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n * `release` and `rawRelease` are specified, the latter has precedence.\n *\n * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n * `attack` and `rawAttack` are specified, the latter has precedence.\n *\n * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n * `release` and `rawRelease` are specified, the latter has precedence.\n *\n * @throws {Error} Invalid note identifier\n * @throws {RangeError} Invalid name value\n * @throws {RangeError} Invalid accidental value\n * @throws {RangeError} Invalid octave value\n * @throws {RangeError} Invalid duration value\n * @throws {RangeError} Invalid attack value\n * @throws {RangeError} Invalid release value\n *\n * @since 3.0.0\n */\nexport class Note {\n\n  constructor(value, options = {}) {\n\n    // Assign property defaults\n    this.duration = WebMidi.defaults.note.duration;\n    this.attack = WebMidi.defaults.note.attack;\n    this.release = WebMidi.defaults.note.release;\n\n    // Assign property values from options (validation occurs in setter)\n    if (options.duration != undefined) this.duration = options.duration;\n    if (options.attack != undefined) this.attack = options.attack;\n    if (options.rawAttack != undefined) this.attack = Utilities.toNormalized(options.rawAttack);\n    if (options.release != undefined) this.release = options.release;\n    if (options.rawRelease != undefined) this.release = Utilities.toNormalized(options.rawRelease);\n\n    // Assign note depending on the way it was specified (name or number)\n    if (Number.isInteger(value)) {\n      this.identifier = Utilities.toNoteIdentifier(value);\n    } else {\n      this.identifier = value;\n    }\n\n  }\n\n  /**\n   * The name, optional accidental and octave of the note, as a string.\n   * @type {string}\n   * @since 3.0.0\n   */\n  get identifier() {\n    return this._name + (this._accidental || \"\") + this._octave;\n  }\n  set identifier(value) {\n\n    const fragments = Utilities.getNoteDetails(value);\n\n    if (WebMidi.validation) {\n      if (!value) throw new Error(\"Invalid note identifier\");\n    }\n\n    this._name = fragments.name;\n    this._accidental = fragments.accidental;\n    this._octave = fragments.octave;\n\n  }\n\n  /**\n   * The name (letter) of the note\n   * @type {string}\n   * @since 3.0.0\n   */\n  get name() {\n    return this._name;\n  }\n  set name(value) {\n\n    if (WebMidi.validation) {\n      value = value.toUpperCase();\n      if (![\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"].includes(value)) {\n        throw new Error(\"Invalid name value\");\n      }\n    }\n\n    this._name = value;\n\n  }\n\n  /**\n   * The accidental (#, ##, b or bb) of the note\n   * @type {string}\n   * @since 3.0.0\n   */\n  get accidental() {\n    return this._accidental;\n  }\n  set accidental(value) {\n\n    if (WebMidi.validation) {\n      value = value.toLowerCase();\n      if (![\"#\", \"##\", \"b\", \"bb\"].includes(value)) throw new Error(\"Invalid accidental value\");\n    }\n\n    this._accidental = value;\n\n  }\n\n  /**\n   * The octave of the note\n   * @type {number}\n   * @since 3.0.0\n   */\n  get octave() {\n    return this._octave;\n  }\n  set octave(value) {\n\n    if (WebMidi.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new Error(\"Invalid octave value\");\n    }\n\n    this._octave = value;\n\n  }\n\n  /**\n   * The duration of the note as a positive decimal number representing the number of milliseconds\n   * that the note should play for.\n   *\n   * @type {number}\n   * @since 3.0.0\n   */\n  get duration() {\n    return this._duration;\n  }\n  set duration(value) {\n\n    if (WebMidi.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || value === null || value < 0) {\n        throw new RangeError(\"Invalid duration value.\");\n      }\n    }\n\n    this._duration = value;\n\n  }\n\n  /**\n   * The attack velocity of the note as an integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get attack() {\n    return this._attack;\n  }\n  set attack(value) {\n    if (WebMidi.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || !(value >= 0 && value <= 1)) {\n        throw new RangeError(\"Invalid attack value.\");\n      }\n    }\n\n    this._attack = value;\n\n  }\n\n  /**\n   * The release velocity of the note as an integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get release() {\n    return this._release;\n  }\n  set release(value) {\n\n    if (WebMidi.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || !(value >= 0 && value <= 1)) {\n        throw new RangeError(\"Invalid release value.\");\n      }\n    }\n\n    this._release = value;\n\n  }\n\n  /**\n   * The attack velocity of the note as a positive integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get rawAttack() {\n    return Utilities.to7Bit(this._attack);\n  }\n\n  /**\n   * The release velocity of the note as a positive integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get rawRelease() {\n    return Utilities.to7Bit(this._release);\n  }\n\n  /**\n   * The MIDI number of the note. This number is derived from the note identifier using C4 as a\n   * reference for middle C.\n   *\n   * @type {number}\n   * @since 3.0.0\n   */\n  get number() {\n    return Utilities.toNoteNumber(this.identifier);\n  }\n\n  /**\n   * Returns a MIDI note number offset by the integer specified in the parameter. If the calculated\n   * value is less than 0, 0 will be returned. If the calculated value is more than 127, 127 will be\n   * returned. If an invalid value is supplied, 0 will be used.\n   *\n   * @param offset\n   * @returns {number} An integer between 0 and 127\n   */\n  getOffsetNumber(octaveOffset = 0, semitoneOffset = 0) {\n\n    if (WebMidi.validation) {\n      octaveOffset = parseInt(octaveOffset) || 0;\n      semitoneOffset = parseInt(semitoneOffset) || 0;\n    }\n\n    return Math.min(Math.max(this.number + (octaveOffset * 12) + semitoneOffset, 0), 127);\n\n  }\n\n}\n","import {Note} from \"./Note.js\";\nimport {WebMidi} from \"./WebMidi.js\";\n\n/**\n * The `Utilities` class contains general-purpose utility functions. The class is a singleton with\n * static methode and is not meant to be instantiated.\n *\n * @since 3.0.0\n */\nclass Utilities {\n\n  /**\n   * Returns a MIDI note number matching the identifier passed in the form of a string. The\n   * identifier must include the octave number. The identifier also optionally include a sharp (#),\n   * a double sharp (##), a flat (b) or a double flat (bb) symbol. For example, these are all valid\n   * identifiers: C5, G4, D#-1, F0, Gb7, Eb-1, Abb4, B##6, etc.\n   *\n   * When converting note identifiers to numbers, C4 is considered to be middle C (MIDI note number\n   * 60) as per the scientific pitch notation standard.\n   *\n   * The resulting note number can be offset by using the `octaveOffset` parameter.\n   *\n   * @param identifier {string} The identifier in the form of a letter, followed by an optional \"#\",\n   * \"##\", \"b\" or \"bb\" followed by the octave number. For exemple: C5, G4, D#-1, F0, Gb7, Eb-1,\n   * Abb4, B##6, etc.\n   *\n   * @param {number} [octaveOffset=0] A integer to offset the octave by.\n   *\n   * @returns {number} The MIDI note number (an integer between 0 and 127).\n   *\n   * @throws RangeError Invalid 'octaveOffset' value\n   *\n   * @throws TypeError Invalid note identifier\n   *\n   * @since 3.0.0\n   */\n  toNoteNumber(identifier, octaveOffset = 0) {\n\n    // Validation\n    octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n    if (isNaN(octaveOffset)) throw new RangeError(\"Invalid 'octaveOffset' value\");\n    if (typeof identifier !== \"string\") identifier = \"\";\n\n    const fragments = this.getNoteDetails(identifier);\n    if (!fragments) throw new TypeError(\"Invalid note identifier\");\n\n    const notes = { C: 0, D: 2, E: 4, F: 5, G: 7, A: 9, B: 11 };\n    let result = (fragments.octave + 1 + octaveOffset) * 12;\n    result += notes[fragments.name];\n\n    if (fragments.accidental) {\n      if (fragments.accidental.startsWith(\"b\")) {\n        result -= fragments.accidental.length;\n      } else {\n        result += fragments.accidental.length;\n      }\n    }\n\n    if (result < 0 || result > 127) throw new RangeError(\"Invalid octaveOffset value\");\n\n    return result;\n\n  }\n\n  /**\n   * Given a proper note identifier (\"C#4\", \"Gb-1\", etc.) or a valid MIDI note number (9-127), this\n   * method returns an object containing broken down details about the specified note (uppercase\n   * letter, accidental and octave).\n   *\n   * When a number is specified, the translation to note is done using a value of 60 for middle C\n   * (C4 = middle C).\n   *\n   * @param value {string|number} A note identifier A  atring (\"C#4\", \"Gb-1\", etc.) or a MIDI note\n   * number (0-127).\n   *\n   * @returns {{octave: number, letter: string, accidental: string}}\n   *\n   * @throws TypeError Invalid note identifier\n   *\n   * @since 3.0.0\n   */\n  getNoteDetails(value) {\n\n    if (Number.isInteger(value)) value = this.toNoteIdentifier(value);\n\n    const matches = value.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\\d+)$/i);\n    if (!matches) throw new TypeError(\"Invalid note identifier\");\n\n    const name = matches[1].toUpperCase();\n    const octave = parseInt(matches[3]);\n    let accidental = matches[2].toLowerCase();\n    accidental = accidental === \"\" ? undefined : accidental;\n\n    const fragments = {\n      name: name,\n      accidental: accidental,\n      octave: octave,\n      identifier: name + (accidental || \"\") + octave\n    };\n\n    return fragments;\n\n  }\n\n  /**\n   * Returns a sanitized array of valid MIDI channel numbers (1-16). The parameter should be a\n   * single integer or an array of integers.\n   *\n   * For backwards-compatibility, passing `undefined` as a parameter to this method results in all\n   * channels being returned (1-16). Otherwise, parameters that cannot successfully be parsed to\n   * integers between 1 and 16 are silently ignored.\n   *\n   * @param [channel] {number|number[]} An integer or an array of integers to parse as channel\n   * numbers.\n   *\n   * @returns {Array} An array of 0 or more valid MIDI channel numbers.\n   *\n   * @since 3.0.0\n   */\n  sanitizeChannels(channel) {\n\n    let channels;\n\n    if (this.validation) {\n\n      if (channel === \"all\") { // backwards-compatibility\n        channels = [\"all\"];\n      } else if (channel === \"none\") { // backwards-compatibility\n        return [];\n      }\n\n    }\n\n    if (!Array.isArray(channel)) {\n      channels = [channel];\n    } else {\n      channels = channel;\n    }\n\n    // In order to preserve backwards-compatibility, we let this assignment as it is.\n    if (channels.indexOf(\"all\") > -1) {\n      channels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    }\n\n    return channels\n      .map(function(ch) {\n        return parseInt(ch);\n      })\n      .filter(function(ch) {\n        return (ch >= 1 && ch <= 16);\n      });\n\n  }\n\n  /**\n   * Returns a valid timestamp, relative to the navigation start of the document, derived from the\n   * `time` parameter. If the parameter is a string starting with the \"+\" sign and followed by a\n   * number, the resulting timestamp will be the sum of the current timestamp plus that number. If\n   * the parameter is a positive number, it will be returned as is. Otherwise, false will be\n   * returned.\n   *\n   * @param [time] {number|string} The time string (e.g. `\"+2000\"`) or number to parse\n   * @return {number|false} A positive number or `false` (if the time cannot be converted)\n   *\n   * @since 3.0.0\n   */\n  toTimestamp(time) {\n\n    let value = false;\n\n    const parsed = parseFloat(time);\n    if (isNaN(parsed)) return false;\n\n    if (typeof time === \"string\" && time.substring(0, 1) === \"+\") {\n      if (parsed >= 0) value = WebMidi.time + parsed;\n    } else {\n      if (parsed >= 0) value = parsed;\n    }\n\n    return value;\n\n  }\n\n  /**\n   * Returns a valid MIDI note number (0-127) given the specified input. The input usually is a\n   * string containing a note identifier (`\"C3\"`, `\"F#4\"`, `\"D-2\"`, `\"G8\"`, etc.). If an integer\n   * between 0 and 127 is passed, it will simply be returned as is (for convenience). Other strings\n   * will be parsed for integer value, if possible.\n   *\n   * If the input is an identifier, the resulting note number is offset by the `octaveOffset`\n   * parameter. For example, if you pass in \"C4\" (note number 60) and the `octaveOffset` value is\n   * -2, the resulting MIDI note number will be 36.\n   *\n   * @param input {string|number} A string or number to extract the MIDI note number from.\n   *\n   * @returns {number|false} A valid MIDI note number (0-127) or `false` if the input could not\n   * successfully be parsed to a note number.\n   *\n   * @since 3.0.0\n   */\n  guessNoteNumber(input, octaveOffset) {\n\n    // Validate and, if necessary, assign default\n    octaveOffset = parseInt(octaveOffset) || 0;\n\n    let output = false;\n\n    // Check input type\n    if (Number.isInteger(input) && input >= 0 && input <= 127) {        // uint\n      output = parseInt(input);\n    } else if (parseInt(input) >= 0 && parseInt(input) <= 127) {        // float or uint as string\n      output = parseInt(input);\n    } else if (typeof input === \"string\" || input instanceof String) {  // string\n      try {\n        output = this.toNoteNumber(input.trim(), octaveOffset);\n      } catch (e) {\n        return false;\n      }\n    }\n\n    return output;\n\n  }\n\n  /**\n   * Returns an identifier string representing a note name (with optional accidental) followed by an\n   * octave number. The octave can be offset by using the `octaveOffset` parameter.\n   *\n   * @param {number} The MIDI note number to convert to a note identifier\n   * @param {octaveOffset} An offset to apply to the resulting octave\n   *\n   * @returns {string}\n   *\n   * @throws RangeError Invalid note number\n   * @throws RangeError Invalid octaveOffset value\n   *\n   * @since 3.0.0\n   */\n  toNoteIdentifier(number, octaveOffset) {\n\n    number = parseInt(number);\n    if (isNaN(number) || number < 0 || number > 127) throw new RangeError(\"Invalid note number\");\n\n    octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n    if (isNaN(octaveOffset)) throw new RangeError(\"Invalid octaveOffset value\");\n\n    const octave = Math.floor(number / 12 - 1) + octaveOffset;\n    return WebMidi.NOTES[number % 12] + octave.toString();\n\n  }\n\n  /**\n   * Converts the `input` parameter to a valid {@link Note} object. The input usually is an unsigned\n   * integer (0-127) or a note identifier (`\"C4\"`, `\"G#5\"`, etc.). If the input is a {@link Note}\n   * object, it will be returned as is.\n   *\n   * If the input is a note number or identifier, it is possible to specify options by providing the\n   * `options` parameter.\n   *\n   * @param [input] {number|string|Note}\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n   * be explicitly stopped.\n   *\n   * @param {number} [options.attack=64] The note's attack velocity as an integer between 0 and 127.\n   *\n   * @param {number} [options.release=64] The note's release velocity as an integer between 0 and\n   * 127.\n   *\n   * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n   * used when the input value is a note identifier.**\n   *\n   * @returns {Note}\n   *\n   * @throws TypeError The input could not be parsed to a note\n   *\n   * @since version 3.0.0\n   */\n  buildNote(input, options= {}) {\n\n    options.octaveOffset = parseInt(options.octaveOffset) || 0;\n\n    // If it's already a Note, we're done\n    if (input instanceof Note) return input;\n\n    let number = this.guessNoteNumber(input, options.octaveOffset);\n\n    if (number === false) { // We use a comparison b/c the note can be 0 (which equates to false)\n      throw new TypeError(`The input could not be parsed as a note (${input})`);\n    }\n\n    // If we got here, we have a proper note number. Before creating the new note, we strip out\n    // 'octaveOffset' because it has already been factored in when calling guessNoteNumber().\n    options.octaveOffset = undefined;\n    return new Note(number, options);\n\n  }\n\n  /**\n   * Converts an input value, which can be an unsigned integer (0-127), a note identifier, a\n   * {@link Note} object or an array of the previous types, to an array of {@link Note} objects.\n   *\n   * {@link Note} objects are returned as is. For note numbers and identifiers, a {@link Note}\n   * object is created with the options specified. An error will be thrown when encountering invalid\n   * input.\n   *\n   * @param [notes] {number|string|Note|number[]|string[]|Note[]}\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n   * be explicitly stopped.\n   *\n   * @param {number} [options.attack=0.5] The note's attack velocity as a decimal number between 0\n   * and 1.\n   *\n   * @param {number} [options.release=0.5] The note's release velocity as a decimal number between 0\n   * and 1.\n   *\n   * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n   * 127.\n   *\n   * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n   * 127.\n   *\n   * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n   * used when the input value is a note identifier.**\n   *\n   * @returns {Note[]}\n   *\n   * @throws TypeError An element could not be parsed as a note.\n   *\n   * @since 3.0.0\n   */\n  buildNoteArray(notes, options = {}) {\n\n    let result = [];\n    if (!Array.isArray(notes)) notes = [notes];\n\n    notes.forEach(note => {\n      result.push(this.buildNote(note, options));\n    });\n\n    return result;\n\n  }\n\n  /**\n   * Returns a number between 0 and 1 representing the ratio of the input value divided by 127 (7\n   * bit). The returned value is restricted between 0 and 1 even if the input is greater than 127 or\n   * smaller than 0.\n   *\n   * Passing `Infinity` will return `1` and passing `-Infinity` will return `0`. Otherwise, when the\n   * input value cannot be converted to an integer, the method returns 0.\n   *\n   * @param value A positive integer between 0 and 127 (inclusive)\n   * @returns {number} A number between 0 and 1 (inclusive)\n   */\n  toNormalized(value) {\n    if (value === Infinity) value = 127;\n    value = parseInt(value) || 0;\n    return Math.min(Math.max(value / 127, 0), 1);\n  }\n\n  /**\n   * Returns a number between 0 and 127 which is the result of multiplying the input value by 127.\n   * The input value should be number between 0 and 1 (inclusively). The returned value is\n   * restricted between 0 and 127 even if the input is greater than 1 or smaller than 0.\n   *\n   * Passing `Infinity` will return `127` and passing `-Infinity` will return `0`. Otherwise, when\n   * the input value cannot be converted to a number, the method returns 0.\n   *\n   * @param value A positive integer between 0 and 127 (inclusive)\n   * @returns {number} A number between 0 and 1 (inclusive)\n   */\n  to7Bit(value) {\n    if (value === Infinity) value = 1;\n    value = parseFloat(value) || 0;\n    return Math.min(Math.max(Math.round(value * 127), 0), 127);\n  }\n\n  /**\n   * Returns the supplied MIDI note number offset by the requested octave and semitone values. If\n   * the calculated value is less than 0, 0 will be returned. If the calculated value is more than\n   * 127, 127 will be returned. If an invalid offset value is supplied, 0 will be used.\n   *\n   * @param offset\n   * @returns {number} An integer between 0 and 127\n   *\n   * @throws {Error} Invalid note number\n   */\n  offsetNumber(number, octaveOffset = 0, semitoneOffset = 0) {\n\n    if (WebMidi.validation) {\n      number = parseInt(number);\n      if (isNaN(number)) throw new Error(\"Invalid note number\");\n      octaveOffset = parseInt(octaveOffset) || 0;\n      semitoneOffset = parseInt(semitoneOffset) || 0;\n    }\n\n    return Math.min(Math.max(number + (octaveOffset * 12) + semitoneOffset, 0), 127);\n\n  }\n\n  /**\n   * Returns the name of the first property of the supplied object whose value is equal to the one\n   * supplied.\n   *\n   * @param object {Object}\n   * @param value {*}\n   * @returns {string} The name of the matching property\n   */\n  getPropertyByValue(object, value) {\n    return Object.keys(object).find(key => object[key] === value);\n  }\n\n}\n\n// Export singleton instance of Utilities class. The 'constructor' is nulled so that it cannot be\n// used to instantiate a new Utilities object or extend it. However, it is not freezed so it remains\n// extensible (properties can be added at will).\nconst utils = new Utilities();\nutils.constructor = null;\nexport {utils as Utilities};\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\nimport {Note} from \"./Note.js\";\n\n/**\n * The `InputChannel` class represents a MIDI input channel (1-16) from a single input device. This\n * object is derived from the host's MIDI subsystem and cannot be instantiated directly.\n *\n * All 16 `InputChannel` objects can be found inside the input's [channels]{@link Input#channels}\n * property.\n *\n * The `InputChannel` class extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [addListener()](https://djipco.github.io/djipevents/EventEmitter.html#addListener),\n * [removeListener()](https://djipco.github.io/djipevents/EventEmitter.html#removeListener),\n * [hasListener()](https://djipco.github.io/djipevents/EventEmitter.html#hasListener) and several\n * others. Check out the\n * [documentation for EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) for more\n * details.\n *\n * @param {Input} input The `Input` object this channel belongs to\n * @param {number} number The MIDI channel's number (1-16)\n *\n * @fires InputChannel#midimessage\n *\n * @fires InputChannel#noteoff\n * @fires InputChannel#noteon\n * @fires InputChannel#keyaftertouch\n * @fires InputChannel#controlchange\n * @fires InputChannel#programchange\n * @fires InputChannel#channelaftertouch\n * @fires InputChannel#pitchbend\n *\n * @fires InputChannel#allnotesoff\n * @fires InputChannel#allsoundoff\n * @fires InputChannel#localcontrol\n * @fires InputChannel#monomode\n * @fires InputChannel#omnimode\n * @fires InputChannel#resetallcontrollers\n *\n * @fires InputChannel#nrpndataentrycoarse\n * @fires InputChannel#nrpndataentryfine\n * @fires InputChannel#nrpndatabuttonincrement\n * @fires InputChannel#nrpndatabuttondecrement\n *\n * @fires InputChannel#rpndataentrycoarse\n * @fires InputChannel#rpndataentryfine\n * @fires InputChannel#rpndatabuttonincrement\n * @fires InputChannel#rpndatabuttondecrement\n *\n * @since 3.0.0\n */\nexport class InputChannel extends EventEmitter {\n\n  constructor(input, number) {\n\n    super();\n\n    /**\n     * @type {Input}\n     * @private\n     */\n    this._input = input;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._number = number;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * An array of messages that form the current NRPN sequence\n     * @private\n     * @type {Message[]}\n     */\n    this._nrpnBuffer = [];\n\n    /**\n     * An array of messages that form the current RPN sequence\n     * @private\n     * @type {Message[]}\n     */\n    this._rpnBuffer = [];\n\n    /**\n     * Indicates whether events for **Non-Registered Parameter Number** should be dispatched. NRPNs\n     * are composed of a sequence of specific **control change** messages. When a valid sequence of\n     * such control change messages is received, an `nrpn` event will fire.\n     *\n     * If an invalid or\n     * out-of-order control change message is received, it will fall through the collector logic and\n     * all buffered control change messages will be discarded as incomplete.\n     *\n     * @type {boolean}\n     */\n    this.parameterNumberEventsEnabled = true;\n\n  }\n\n  /**\n   * Destroys the `Input` by removing all listeners and severing the link with the MIDI subsystem's\n   * input.\n   */\n  destroy() {\n    this._input = null;\n    this._number = null;\n    this._octaveOffset = 0;\n    this._nrpnBuffer = [];\n    this.parameterNumberEventsEnabled = false;\n    this.removeListener();\n  }\n\n  /**\n   * @param e MIDIMessageEvent\n   * @private\n   */\n  _processMidiMessageEvent(e) {\n\n    // Create and emit a new 'midimessage' event based on the incoming one\n    const event = Object.assign({}, e);\n    event.target = this;\n    event.type = \"midimessage\";\n\n    /**\n     * Event emitted when a MIDI message of any kind is received by an `InputChannel`\n     *\n     * @event InputChannel#midimessage\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `InputChannel` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"midimessage\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     * @property {number} event.statusByte The message's status byte  (deprecated, use the `message`\n     * object instead).\n     * @property {?number[]} event.dataBytes The message's data bytes as an array of 0, 1 or 2\n     * integers. This will be null for `sysex` messages (deprecated, use the `message` object\n     * instead).\n     */\n    this.emit(event.type, event);\n\n    // Parse the inbound event for regular MIDI messages\n    this._parseEventForStandardMessages(event);\n\n  }\n\n  /**\n   * Parses incoming channel events and emit standard MIDI message events (noteon, noteoff, etc.)\n   * @param e Event\n   * @private\n   */\n  _parseEventForStandardMessages(e) {\n\n    const event = Object.assign({}, e);\n    event.type = event.message.type || \"unknownmidimessage\";\n\n    const data1 = e.message.dataBytes[0];\n    const data2 = e.message.dataBytes[1];\n\n    if ( event.type === \"noteoff\" || (event.type === \"noteon\" && data2 === 0) ) {\n\n      /**\n       * Event emitted when a **note off** MIDI message has been received on the channel.\n       *\n       * @event InputChannel#noteoff\n       *\n       * @type {Object}\n       * @property {string} type `\"noteoff\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {Object} note A {@link Note} object containing information such as note name,\n       * octave and release velocity.\n       * @property {number} value The release velocity amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The release velocity amount expressed as an integer (between 0\n       * and 127).\n       */\n\n      // The object created when a noteoff event arrives is a Note with an attack velocity of 0.\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + WebMidi.octaveOffset\n        ),\n        {\n          rawAttack: 0,\n          rawRelease: data2,\n        }\n      );\n\n      event.value = Utilities.toNormalized(data2);\n      event.rawValue = data2;\n\n      // Those are kept for backwards-compatibility but are gone from the documentation. They will\n      // be removed in future versions (@deprecated).\n      event.velocity = event.note.release;\n      event.rawVelocity = event.note.rawRelease;\n\n    } else if (event.type === \"noteon\") {\n\n      /**\n       * Event emitted when a **note on** MIDI message has been received.\n       *\n       * @event InputChannel#noteon\n       *\n       * @type {Object}\n       * @property {string} type `\"noteon\"`\n       *\n       * @property {InputChannel} channel The `InputChannel` object that triggered the event.\n       * @property {Array} event.data The MIDI message as an array of 8 bit values.\n       * @property {InputChannel} input The `Input` object where through which the message was\n       * received.\n       * @property {Uint8Array} event.rawData The raw MIDI message as a `Uint8Array`.\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {Object} note A {@link Note} object containing information such as note name,\n       * octave and attack velocity.\n       *\n       * @property {number} value The attack velocity amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The attack velocity amount expressed as an integer (between 0\n       * and 127).\n       */\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + WebMidi.octaveOffset\n        ),\n        { rawAttack: data2 }\n      );\n\n      event.value = Utilities.toNormalized(data2);\n      event.rawValue = data2;\n\n      // Those are kept for backwards-compatibility but are gone from the documentation. They will\n      // be removed in future versions (@deprecated).\n      event.velocity = event.note.attack;\n      event.rawVelocity = event.note.rawAttack;\n\n    } else if (event.type === \"keyaftertouch\") {\n\n      /**\n       * Event emitted when a **key-specific aftertouch** MIDI message has been received.\n       *\n       * @event InputChannel#keyaftertouch\n       *\n       * @type {Object}\n       * @property {string} type `\"keyaftertouch\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {string} identifier The note identifier of the key to apply the aftertouch to.\n       * This includes any octave offset applied at the channel, input or global level.\n       * @property {number} key The MIDI note number of the key to apply the aftertouch to. This\n       * includes any octave offset applied at the channel, input or global level.\n       * @property {number} rawKey The MIDI note number of the key to apply the aftertouch to. This\n       * excludes any octave offset defined at the channel, input or global level.\n       * @property {number} value The aftertouch amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The aftertouch amount expressed as an integer (between 0 and\n       * 127).\n       */\n      event.identifier = Utilities.toNoteIdentifier(\n        data1, WebMidi.octaveOffset + this.input.octaveOffset + this.octaveOffset\n      );\n\n      event.key = Utilities.toNoteNumber(event.identifier);\n      event.rawKey = data1;\n\n      event.value = Utilities.toNormalized(data2);\n      event.rawValue = data2;\n\n      // This is kept for backwards-compatibility but is gone from the documentation. It will be\n      // removed from future versions (@deprecated).\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + WebMidi.octaveOffset\n        )\n      );\n\n    } else if (event.type === \"controlchange\") {\n\n      /**\n       * Event emitted when a **control change** MIDI message has been received.\n       *\n       * @event InputChannel#controlchange\n       *\n       * @type {Object}\n       * @property {string} type `\"controlchange\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {Object} controller\n       * @property {Object} controller.number The number of the controller.\n       * @property {Object} controller.name The usual name or function of the controller.\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      event.controller = {\n        number: data1,\n        name: this.getCcNameByNumber(data1)\n      };\n\n      event.value = Utilities.toNormalized(data2);\n      event.rawValue = data2;\n\n      // Trigger channel mode message events (if appropriate)\n      if (event.message.dataBytes[0] >= 120) this._parseChannelModeMessage(event);\n\n      // Parse the inbound event to see if its part of an RPN/NRPN sequence\n      if (\n        this.parameterNumberEventsEnabled &&\n        this.isRpnOrNrpnController(event.message.dataBytes[0])\n      ) {\n        this._parseEventForParameterNumber(event);\n      }\n\n    } else if (event.type === \"programchange\") {\n\n      /**\n       * Event emitted when a **program change** MIDI message has been received.\n       *\n       * @event InputChannel#programchange\n       *\n       * @type {Object}\n       * @property {string} type `\"programchange\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as an integer between 1 and 128.\n       * @property {number} rawValue The value expressed as an integer between 0 and 127..\n       */\n      event.value = data1 + 1;\n      event.rawValue = data1;\n\n    } else if (event.type === \"channelaftertouch\") {\n\n      /**\n       * Event emitted when a control change MIDI message has been received.\n       *\n       * @event InputChannel#channelaftertouch\n       *\n       * @type {Object}\n       * @property {string} type `\"channelaftertouch\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      event.value = Utilities.toNormalized(data1);\n      event.rawValue = data1;\n\n    } else if (event.type === \"pitchbend\") {\n\n      /**\n       * Event emitted when a pitch bend MIDI message has been received.\n       *\n       * @event InputChannel#pitchbend\n       *\n       * @type {Object}\n       * @property {string} type `\"pitchbend\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 16383).\n       */\n      event.value = ((data2 << 7) + data1 - 8192) / 8192;\n      event.rawValue = (data2 << 7) + data1;\n\n    } else {\n      event.type = \"unknownmessage\";\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  _parseChannelModeMessage(e) {\n\n    // Make a shallow copy of the incoming event so we can use it as the new event.\n    const event = Object.assign({}, e);\n    event.type = event.controller.name;\n\n    /**\n     * Event emitted when an \"all sound off\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#allsoundoff\n     *\n     * @type {Object}\n     * @property {string} type `\"allsoundoff\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when a \"reset all controllers\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#resetallcontrollers\n     *\n     * @type {Object}\n     * @property {string} type `\"resetallcontrollers\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when a \"local control\" channel-mode MIDI message has been received. The value\n     * property of the event is set to either `true` (local control on) of `false` (local control\n     * off).\n     *\n     * @event InputChannel#localcontrol\n     *\n     * @type {Object}\n     * @property {string} type `\"localcontrol\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value For local control on, the value is `true`. For local control off,\n     * the value is `false`.\n     */\n    if (event.type === \"localcontrol\") {\n      event.value = event.message.data[2] === 127 ? true : false;\n    }\n\n    /**\n     * Event emitted when an \"all notes off\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#allnotesoff\n     *\n     * @type {Object}\n     * @property {string} type `\"allnotesoff\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when an \"omni mode\" channel-mode MIDI message has been received. The value\n     * property of the event is set to either `true` (omni mode on) of `false` (omni mode off).\n     *\n     * @event InputChannel#omnimode\n     *\n     * @type {Object}\n     * @property {string} type `\"omnimode\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n     */\n    if (event.type === \"omnimodeon\") {\n      event.type = \"omnimode\";\n      event.value = true;\n    } else if (event.type === \"omnimodeoff\") {\n      event.type = \"omnimode\";\n      event.value = false;\n    }\n\n    /**\n     * Event emitted when a \"mono/poly mode\" MIDI message has been received. The value property of\n     * the event is set to either `true` (mono mode on / poly mode off) or `false` (mono mode off /\n     * poly mode on).\n     *\n     * @event InputChannel#monomode\n     *\n     * @type {Object}\n     * @property {string} type `\"monomode\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n     */\n    if (event.type === \"monomodeon\") {\n      event.type = \"monomode\";\n      event.value = true;\n    } else if (event.type === \"polymodeon\") {\n      event.type = \"monomode\";\n      event.value = false;\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Parses inbound events to identify NRPN sequences.\n   *\n   * and constructs NRPN message parts in valid sequences.\n   * Keeps a separate NRPN buffer for each channel.\n   * Emits an event after it receives the final CC parts msb 127 lsb 127.\n   * If a message is incomplete and other messages are received before\n   * the final 127 bytes, the incomplete message is cleared.\n   * @param e Event\n   * @private\n   */\n  _parseEventForParameterNumber(event) {\n\n    // To make it more legible\n    const controller = event.message.dataBytes[0];\n    const value = event.message.dataBytes[1];\n    const list = WebMidi.MIDI_CONTROL_CHANGE_MESSAGES;\n\n    // A. Check if the message is the start of an RPN (101) or NRPN (99) parameter declaration.\n    if (\n      controller === list.nonregisteredparameterfine ||         // 99\n      controller === list.registeredparameterfine               // 101\n    ) {\n\n      this._nrpnBuffer = [];\n      this._rpnBuffer = [];\n\n      if (controller === list.nonregisteredparameterfine) {     // 99\n        this._nrpnBuffer = [event.message];\n      } else {                                                  // 101\n        // 127 is a reset so we ignore it\n        if (value !== 127) this._rpnBuffer = [event.message];\n      }\n\n    // B. Check if the message is the end of an RPN (100) or NRPN (98) parameter declaration.\n    } else if (\n      controller === list.nonregisteredparametercoarse ||       // 98\n      controller === list.registeredparametercoarse             // 100\n    ) {\n\n      if (controller === list.nonregisteredparametercoarse) {   // 98\n\n        // Flush the other buffer (they are mutually exclusive)\n        this._rpnBuffer = [];\n\n        // Check if we are in sequence\n        if (this._nrpnBuffer.length === 1) {\n          this._nrpnBuffer.push(event.message);\n        } else {\n          this._nrpnBuffer = []; // out of sequence\n        }\n\n      } else {                                                  // 100\n\n        // Flush the other buffer (they are mutually exclusive)\n        this._nrpnBuffer = [];\n\n        // 127 is a reset so we ignore it\n        if (this._rpnBuffer.length === 1 && value !== 127) {\n          this._rpnBuffer.push(event.message);\n        } else {\n          this._rpnBuffer = []; // out of sequence or reset\n        }\n\n      }\n\n    // C. Check if the message is for data entry (6, 38, 96 or 97). Those messages trigger events.\n    } else if (\n      controller === list.dataentrycoarse ||                    // 6\n      controller === list.dataentryfine ||                      // 38\n      controller === list.databuttonincrement ||                // 96\n      controller === list.databuttondecrement                   // 97\n    ) {\n\n      if (this._rpnBuffer.length === 2) {\n        this._dispatchParameterNumberEvent(\n          \"rpn\",\n          this._rpnBuffer[0].dataBytes[1],\n          this._rpnBuffer[1].dataBytes[1],\n          event\n        );\n      } else if (this._nrpnBuffer.length === 2) {\n        this._dispatchParameterNumberEvent(\n          \"nrpn\",\n          this._nrpnBuffer[0].dataBytes[1],\n          this._nrpnBuffer[1].dataBytes[1],\n          event\n        );\n      } else {\n        this._nrpnBuffer = [];\n        this._rpnBuffer = [];\n      }\n\n    }\n\n  }\n\n  isRpnOrNrpnController(controller) {\n\n    return controller === WebMidi.MIDI_CONTROL_CHANGE_MESSAGES.dataentrycoarse ||           //   6\n      controller === WebMidi.MIDI_CONTROL_CHANGE_MESSAGES.dataentryfine ||                  //  38\n      controller === WebMidi.MIDI_CONTROL_CHANGE_MESSAGES.databuttonincrement ||            //  96\n      controller === WebMidi.MIDI_CONTROL_CHANGE_MESSAGES.databuttondecrement ||            //  97\n      controller === WebMidi.MIDI_CONTROL_CHANGE_MESSAGES.nonregisteredparametercoarse ||   //  98\n      controller === WebMidi.MIDI_CONTROL_CHANGE_MESSAGES.nonregisteredparameterfine ||     //  99\n      controller === WebMidi.MIDI_CONTROL_CHANGE_MESSAGES.registeredparametercoarse ||      // 100\n      controller === WebMidi.MIDI_CONTROL_CHANGE_MESSAGES.registeredparameterfine;          // 101\n\n  }\n\n  _dispatchParameterNumberEvent(type, paramMsb, paramLsb, e) {\n\n    /**\n     * Event emitted when a 'dataentrycoarse' NRPN message has been received on the input.\n     *\n     * @event InputChannel#nrpndataentrycoarse\n     *\n     * @type {Object}\n     *\n     * @property {string} type `\"nrpndataentrycoarse\"`\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {number} parameter The non-registered parameter number (0-16383)\n     * @property {number} parameterMsb The MSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} parameterLsb: The LSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when a 'dataentryfine' NRPN message has been received on the input.\n     *\n     * @event InputChannel#nrpndataentryfine\n     *\n     * @type {Object}\n     *\n     * @property {string} type `\"nrpndataentryfine\"`\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {number} parameter The non-registered parameter number (0-16383)\n     * @property {number} parameterMsb The MSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} parameterLsb: The LSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when a 'databuttonincrement' NRPN message has been received on the input.\n     *\n     * @event InputChannel#nrpndatabuttonincrement\n     *\n     * @type {Object}\n     *\n     * @property {string} type `\"nrpndatabuttonincrement\"`\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {number} parameter The non-registered parameter number (0-16383)\n     * @property {number} parameterMsb The MSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} parameterLsb: The LSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when a 'databuttondecrement' NRPN message has been received on the input.\n     *\n     * @event InputChannel#nrpndatabuttondecrement\n     *\n     * @type {Object}\n     *\n     * @property {string} type `\"nrpndatabuttondecrement\"`\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {number} parameter The non-registered parameter number (0-16383)\n     * @property {number} parameterMsb The MSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} parameterLsb: The LSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n\n    /**\n     * Event emitted when a 'dataentrycoarse' RPN message has been received on the input.\n     *\n     * @event InputChannel#rpndataentrycoarse\n     *\n     * @type {Object}\n     *\n     * @property {string} type `\"rpndataentrycoarse\"`\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when a 'dataentryfine' RPN message has been received on the input.\n     *\n     * @event InputChannel#rpndataentryfine\n     *\n     * @type {Object}\n     *\n     * @property {string} type `\"rpndataentryfine\"`\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when a 'databuttonincrement' RPN message has been received on the input.\n     *\n     * @event InputChannel#rpndatabuttonincrement\n     *\n     * @type {Object}\n     *\n     * @property {string} type `\"rpndatabuttonincrement\"`\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when a 'databuttondecrement' RPN message has been received on the input.\n     *\n     * @event InputChannel#rpndatabuttondecrement\n     *\n     * @type {Object}\n     *\n     * @property {string} type `\"rpndatabuttondecrement\"`\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    const event = {\n      target: e.target,\n      timestamp: e.timestamp,\n      parameterMsb: paramMsb,\n      parameterLsb: paramLsb,\n      value: Utilities.toNormalized(e.message.dataBytes[1]),\n      rawValue: e.message.dataBytes[1],\n      type: type === \"rpn\" ? \"rpn\" : \"nrpn\"\n    };\n\n    // Retrieve controller type and append to event type\n    event.type += Utilities.getPropertyByValue(\n      WebMidi.MIDI_CONTROL_CHANGE_MESSAGES,\n      e.message.dataBytes[0]\n    );\n\n    // Identify the parameter (by name for RPN and by number for NRPN)\n    if (type === \"rpn\") {\n\n      event.parameter = Object.keys(WebMidi.MIDI_REGISTERED_PARAMETERS).find(key => {\n        return WebMidi.MIDI_REGISTERED_PARAMETERS[key][0] === paramMsb &&\n          WebMidi.MIDI_REGISTERED_PARAMETERS[key][1] === paramLsb;\n      });\n\n    } else {\n      event.parameter = (paramMsb << 7) + paramLsb;\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Returns the channel mode name matching the specified number. If no match is found, the function\n   * returns `false`.\n   *\n   * @param {number} number An integer representing the channel mode message.\n   * @returns {string|false} The name of the matching channel mode or `false` if not match could be\n   * found.\n   *\n   * @since 2.0.0\n   */\n  getChannelModeByNumber(number) {\n\n    if (WebMidi.validation) {\n      number = Math.floor(number);\n    }\n\n    if ( !(number >= 120 && number <= 127) ) return false;\n\n    for (let cm in WebMidi.MIDI_CHANNEL_MODE_MESSAGES) {\n\n      if (\n        WebMidi.MIDI_CHANNEL_MODE_MESSAGES.hasOwnProperty(cm) &&\n        number === WebMidi.MIDI_CHANNEL_MODE_MESSAGES[cm]\n      ) {\n        return cm;\n      }\n\n    }\n\n    return false;\n\n  }\n\n  /**\n   * Returns the name of a control change message matching the specified number. Some valid control\n   * change numbers do not have a specific name or purpose assigned in the MIDI\n   * [spec](https://midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2).\n   * In this case, the method returns `false`.\n   *\n   * @param {number} number An integer representing the control change message\n   * @returns {string|undefined} The matching control change name or `undefined` if not match was\n   * found.\n   *\n   * @throws {RangeError} Invalid control change number.\n   *\n   * @since 2.0.0\n   */\n  getCcNameByNumber(number) {\n\n    if (WebMidi.validation) {\n      number = parseInt(number);\n      if ( !(number >= 0 && number <= 127) ) throw new RangeError(\"Invalid control change number.\");\n    }\n\n    return Utilities.getPropertyByValue(WebMidi.MIDI_CONTROL_CHANGE_MESSAGES, number);\n\n  }\n\n  /**\n   * An integer to offset the reported octave of incoming note-specific messages (`noteon`,\n   * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n   * octave (C4).\n   *\n   * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n   * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n   *\n   * Note that this value is combined with the global offset value defined on the `WebMidi` object\n   * and with the value defined on the parent `Input` object.\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * The {@link Input} this channel belongs to\n   * @type {Input}\n   * @since 3.0\n   */\n  get input() {\n    return this._input;\n  }\n\n  /**\n   * This channel's MIDI number (1-16)\n   * @type {number}\n   * @since 3.0\n   */\n  get number() {\n    return this._number;\n  }\n\n  /**\n   * Whether RPN/NRPN events are parsed and dispatched.\n   * @type {boolean}\n   * @since 3.0\n   * @deprecated Use parameterNumberEventsEnabled instead.\n   * @private\n   */\n  get nrpnEventsEnabled() {\n    return this.parameterNumberEventsEnabled;\n  }\n  set nrpnEventsEnabled(value) {\n\n    if (this.validation) {\n      value = !!value;\n    }\n\n    this.parameterNumberEventsEnabled = value;\n\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {Message, WebMidi} from \"./WebMidi.js\";\nimport {InputChannel} from \"./InputChannel.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/**\n * The `Input` class represents a single MIDI input port. This object is derived from the host's\n * MIDI subsystem and cannot be instantiated directly.\n *\n * You can find a list of all currently available `Input` objects in the {@link WebMidi#inputs}\n * array.\n *\n * The `Input` class extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [getListeners()](https://djipco.github.io/djipevents/EventEmitter.html#getListeners),\n * [emit()](https://djipco.github.io/djipevents/EventEmitter.html#emit),\n * [suspendEvent()](https://djipco.github.io/djipevents/EventEmitter.html#suspendEvent) and several\n * others.\n *\n * @param {MIDIInput} midiInput `MIDIInput` object as provided by the MIDI subsystem (Web MIDI API).\n *\n * @fires Input#opened\n * @fires Input#disconnected\n * @fires Input#closed\n * @fires Input#midimessage\n * @fires Input#sysex\n * @fires Input#timecode\n * @fires Input#songposition\n * @fires Input#songselect\n * @fires Input#tunerequest\n * @fires Input#clock\n * @fires Input#start\n * @fires Input#continue\n * @fires Input#stop\n * @fires Input#activesensing\n * @fires Input#reset\n * @fires Input#midimessage\n * @fires Input#unknownmidimessage\n */\nexport class Input extends EventEmitter {\n\n  constructor(midiInput) {\n\n    super();\n\n    /**\n     * Reference to the actual MIDIInput object\n     * @private\n     */\n    this._midiInput = midiInput;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * Array containing the 16 {@link InputChannel} objects available for this `Input`. The\n     * channels are numbered 1 through 16.\n     *\n     * @type {InputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new InputChannel(this, i);\n\n    // Setup listeners\n    this._midiInput.onstatechange = this._onStateChange.bind(this);\n    this._midiInput.onmidimessage = this._onMidiMessage.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Input` by remove all listeners, emptying the `channels` array and unlinking the\n   * MIDI subsystem.\n   *\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    this._midiInput.onstatechange = null;\n    this._midiInput.onmidimessage = null;\n    await this.close();\n    this._midiInput = null;\n  }\n\n  /**\n   * Executed when a `\"statechange\"` event occurs.\n   *\n   * @param e\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: WebMidi.time,\n      target: this\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the {@link Input} has been opened by calling the {@link Input#open}\n       * method.\n       *\n       * @event Input#opened\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"opened\"`\n       * @property {Input} target The object that triggered the event\n       */\n      event.type = \"opened\";\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the {@link Input} has been closed by calling the {@link Input#close}\n       * method.\n       *\n       * @event Input#closed\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"closed\"`\n       * @property {Input} target The object that triggered the event\n       */\n      event.type = \"closed\";\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the {@link Input} becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Input#disconnected\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"disconnected\"`\n       * @property {Object} target Object with properties describing the {@link Input} that\n       * triggered the event. This is not the actual `Input` as it is no longer available.\n       * @property {string} target.connection `\"closed\"`\n       * @property {string} target.id ID of the input\n       * @property {string} target.manufacturer Manufacturer of the device that provided the input\n       * @property {string} target.name Name of the device that provided the input\n       * @property {string} target.state `\"disconnected\"`\n       * @property {string} target.type `\"input\"`\n       */\n      event.type = \"disconnected\";\n      event.target = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") {\n      // I don't see the need to forward that...\n    } else {\n      console.warn(\"This statechange event was not caught: \", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Executed when a `\"midimessage\"` event is received\n   * @param e\n   * @private\n   */\n  _onMidiMessage(e) {\n\n    // Create Message object from MIDI data\n    const message = new Message(e.data);\n\n    /**\n     * Event emitted when any MIDI message is received on an `Input`\n     *\n     * @event Input#midimessage\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"midimessage\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array (deprecated, use\n     * the `message` object instead).\n     * @property {number} event.statusByte The message's status byte  (deprecated, use the `message`\n     * object instead).\n     * @property {?number[]} event.dataBytes The message's data bytes as an array of 0, 1 or 2\n     * integers. This will be null for `sysex` messages (deprecated, use the `message` object\n     * instead).\n     *\n     * @since 2.1\n     */\n    const event = {\n      target: this,\n      message: message,\n      timestamp: e.timeStamp,\n      type: \"midimessage\",\n\n      data: message.data,           // @deprecated (will be removed in v4)\n      rawData: message.data,        // @deprecated (will be removed in v4)\n      statusByte: message.data[0],  // @deprecated (will be removed in v4)\n      dataBytes: message.dataBytes  // @deprecated (will be removed in v4)\n    };\n\n    this.emit(\"midimessage\", event);\n\n    // Messages are forwarded to InputChannel if they are channel messages or parsed locally for\n    // system messages.\n    if (message.isSystemMessage) {                                         // system messages\n      this._parseEvent(event);\n    } else if (message.isChannelMessage) {   // channel messages\n      this.channels[message.channel]._processMidiMessageEvent(event);\n    }\n\n  }\n\n  /**\n   * @private\n   */\n  _parseEvent(e) {\n\n    // Make a shallow copy of the incoming event so we can use it as the new event.\n    const event = Object.assign({}, e);\n    event.type = event.message.type || \"unknownmidimessage\";\n\n    // Add custom property for 'songselect'\n    if (event.type === \"songselect\") {\n      event.song = e.data[1] + 1;\n    }\n\n    // Emit event\n    this.emit(event.type, event);\n\n    /**\n     * Input-wide (system) event emitted when a **system exclusive** message has been received.\n     * You should note that, to receive `sysex` events, you must call the `WebMidi.enable()`\n     * method with the `sysex` option set to `true`:\n     *\n     * ```js\n     * WebMidi.enable({sysex: true})\n     *  .then(() => console.log(\"WebMidi has been enabled with sysex support.\"))\n     *  .catch(err => console.log(\"WebMidi could not be enabled.\"))\n     * ```\n     *\n     * @event Input#sysex\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"sysex\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values.\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array.\n     */\n\n    /**\n     * Input-wide (system) event emitted when a **time code quarter frame** message has been\n     * received.\n     *\n     * @event Input#timecode\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"timecode\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when a **song position** message has been received.\n     *\n     * @event Input#songposition\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"songposition\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when a **song select** message has been received.\n     *\n     * @event Input#songselect\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"songselect\"`\n     * @property {string} song Song (or sequence) number to select (1-128)\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when a **tune request** message has been received.\n     *\n     * @event Input#tunerequest\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"tunerequest\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when a **timing clock** message has been received.\n     *\n     * @event Input#clock\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"clock\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when a **start** message has been received.\n     *\n     * @event Input#start\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"start\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when a **continue** message has been received.\n     *\n     * @event Input#continue\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"continue\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when a **stop** message has been received.\n     *\n     * @event Input#stop\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"stop\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when an **active sensing** message has been received.\n     *\n     * @event Input#activesensing\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"activesensing\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when a **reset** message has been received.\n     *\n     * @event Input#reset\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"reset\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when an unknown MIDI message has been received. It could\n     * be, for example, one of the undefined/reserved messages.\n     *\n     * @event Input#unknownmidimessage\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"unknownmidimessage\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n  }\n\n  /**\n   * Opens the input for usage. This is usually unnecessary as the port is open automatically when\n   * WebMidi is enabled.\n   *\n   * @returns {Promise<Input>} The promise is fulfilled with the `Input` object\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when assigning a listener to the\n    // `onmidimessage` property of the `MIDIInput`. We do it explicitly so that 'connected' events\n    // are dispatched immediately and that we are ready to listen.\n    try {\n      await this._midiInput.open();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * Closes the input. When an input is closed, it cannot be used to listen to MIDI messages until\n   * the input is opened again by calling [Input.open()]{@link Input#open}.\n   *\n   * @returns {Promise<Input>} The promise is fulfilled with the `Input` object\n   */\n  async close() {\n\n    // We close the port. This triggers a statechange event which, in turn, will emit the 'closed'\n    // event.\n    if (!this._midiInput) return Promise.resolve(this);\n\n    try {\n      await this._midiInput.close();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since v3.0.0 (moved to 'InputChannel' class)\n   */\n  getChannelModeByNumber() {\n    if (WebMidi.validation) {\n      console.warn(\n        \"The 'getChannelModeByNumber()' method has been moved to the 'InputChannel' class.\"\n      );\n    }\n  }\n\n  /**\n   * Adds an event listener that will trigger a function callback when the specified event happens.\n   * The event can be **channel-bound** or **input-wide**. Channel-bound events are dispatched by\n   * {@link InputChannel} objects and are tied to a specific MIDI channel while input-wide events\n   * are dispatched by the {@link Input} object itself and are not tied to a specific channel.\n   *\n   * When listening for an input-wide event, you must specify the event to listen for and the\n   * callback function to trigger when the event happens:\n   *\n   * ```\n   * WebMidi.inputs[0].addListener(\"midimessage\", someFunction);\n   * ```\n   *\n   * To listen for a channel-bound event, you must also specify the event to listen for and the\n   * function to trigger but you have to add the channels you wish to listen on in the `options`\n   * parameter:\n   *\n   * ```\n   * WebMidi.inputs[0].addListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n   * ```\n   *\n   * The code above will add a listener for the `\"noteon\"` event and call `someFunction` when the\n   * event is triggered on MIDI channels `1`, `2` or `3`.\n   *\n   * Note that, when adding events to channels, it is the {@link InputChannel} instance that\n   * actually gets a listener added and not the `{@link Input} instance.\n   *\n   * Note: if you want to add a listener to a single MIDI channel you should probably do so directly\n   * on the {@link InputChannel} object itself.\n   *\n   * There are 6 families of events you can listen to:\n   *\n   * 1. **MIDI System Common** Events (input-wide)\n   *\n   *    * [songposition]{@link Input#event:songposition}\n   *    * [songselect]{@link Input#event:songselect}\n   *    * [sysex]{@link Input#event:sysex}\n   *    * [timecode]{@link Input#event:timecode}\n   *    * [tunerequest]{@link Input#event:tunerequest}\n   *\n   * 2. **MIDI System Real-Time** Events (input-wide)\n   *\n   *    * [clock]{@link Input#event:clock}\n   *    * [start]{@link Input#event:start}\n   *    * [continue]{@link Input#event:continue}\n   *    * [stop]{@link Input#event:stop}\n   *    * [activesensing]{@link Input#event:activesensing}\n   *    * [reset]{@link Input#event:reset}\n   *\n   * 3. **State Change** Events (input-wide)\n   *\n   *    * [opened]{@link Input#event:opened}\n   *    * [closed]{@link Input#event:closed}\n   *    * [disconnected]{@link Input#event:disconnected}\n   *\n   * 4. **Catch-All** Events (input-wide)\n   *\n   *    * [midimessage]{@link Input#event:midimessage}\n   *    * [unknownmidimessage]{@link Input#event:unknownmidimessage}\n   *\n   * 5. **Channel Voice** Events (channel-specific)\n   *\n   *    * [channelaftertouch]{@link InputChannel#event:channelaftertouch}\n   *    * [controlchange]{@link InputChannel#event:controlchange}\n   *    * [keyaftertouch]{@link InputChannel#event:keyaftertouch}\n   *    * [noteoff]{@link InputChannel#event:noteoff}\n   *    * [noteon]{@link InputChannel#event:noteon}\n   *    * [nrpn]{@link InputChannel#event:nrpn}\n   *    * [pitchbend]{@link InputChannel#event:pitchbend}\n   *    * [programchange]{@link InputChannel#event:programchange}\n   *\n   * 6. **Channel Mode** Events (channel-specific)\n   *\n   *    * allnotesoff\n   *    * allsoundoff\n   *    * localcontrol\n   *    * monomode\n   *    * omnimode\n   *    * resetallcontrollers\n   *\n   * 7. **NRPN** Events (channel-specific)\n   *\n   *    * nrpndataentrycoarse\n   *    * nrpndataentryfine\n   *    * nrpndatabuttonincrement\n   *    * nrpndatabuttondecrement\n   *\n   * 8. **RPN** Events (channel-specific)\n   *\n   *    * rpndataentrycoarse\n   *    * rpndataentryfine\n   *    * rpndatabuttonincrement\n   *    * rpndatabuttondecrement\n   *\n   * @param event {string} The type of the event.\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object's properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the `arguments` property of the `Listener` object\n   * and can be retrieved or modified as desired.\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to listen on. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {Object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array.\n   *\n   * @param {boolean} [options.remaining=Infinity] The number of times after which the callback\n   * should automatically be removed.\n   *\n   * @throws {Error} For channel-specific events, 'options.channels' must be defined.\n   *\n   * @returns {Listener[]} An array of all `Listener` objects that were created.\n   */\n  addListener(event, listener, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = (listener != undefined) ? [].concat(listener) : undefined; // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n      // Validation\n      if (\n        WebMidi.CHANNEL_EVENTS.includes(event) &&\n        options.channels === undefined\n      ) {\n        throw new Error(\"For channel-specific events, 'options.channels' must be defined.\");\n      }\n\n    }\n\n    let listeners = [];\n\n    // Check if the event is channel-specific or input-wide\n    if (!WebMidi.CHANNEL_EVENTS.includes(event)) {\n      listeners.push(super.addListener(event, listener, options));\n    } else {\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        listeners.push(this.channels[ch].addListener(event, listener, options));\n      });\n    }\n\n    return listeners;\n\n  }\n\n  /**\n   * Adds a one-time event listener that will trigger a function callback when the specified event\n   * happens. The event can be **channel-bound** or **input-wide**. Channel-bound events are\n   * dispatched by {@link InputChannel} objects and are tied to a specific MIDI channel while\n   * input-wide events are dispatched by the {@link Input} object itself and are not tied to a\n   * specific channel.\n   *\n   * When listening for an input-wide event, you must specify the event to listen for and the\n   * callback function to trigger when the event happens:\n   *\n   * ```\n   * WebMidi.inputs[0].addListener(\"midimessage\", someFunction);\n   * ```\n   *\n   * To listen for a channel-bound event, you must also specify the event to listen for and the\n   * function to trigger but you have to add the channels you wish to listen on in the `options`\n   * parameter:\n   *\n   * ```\n   * WebMidi.inputs[0].addListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n   * ```\n   *\n   * The code above will add a listener for the `\"noteon\"` event and call `someFunction` when the\n   * event is triggered on MIDI channels `1`, `2` or `3`.\n   *\n   * Note that, when adding events to channels, it is the {@link InputChannel} instance that\n   * actually gets a listener added and not the `{@link Input} instance.\n   *\n   * Note: if you want to add a listener to a single MIDI channel you should probably do so directly\n   * on the {@link InputChannel} object itself.\n   *\n   * There are 6 families of events you can listen to:\n   *\n   * 1. **MIDI System Common** Events (input-wide)\n   *\n   *    * [songposition]{@link Input#event:songposition}\n   *    * [songselect]{@link Input#event:songselect}\n   *    * [sysex]{@link Input#event:sysex}\n   *    * [timecode]{@link Input#event:timecode}\n   *    * [tunerequest]{@link Input#event:tunerequest}\n   *\n   * 2. **MIDI System Real-Time** Events (input-wide)\n   *\n   *    * [clock]{@link Input#event:clock}\n   *    * [start]{@link Input#event:start}\n   *    * [continue]{@link Input#event:continue}\n   *    * [stop]{@link Input#event:stop}\n   *    * [activesensing]{@link Input#event:activesensing}\n   *    * [reset]{@link Input#event:reset}\n   *\n   * 3. **State Change** Events (input-wide)\n   *\n   *    * [opened]{@link Input#event:opened}\n   *    * [closed]{@link Input#event:closed}\n   *    * [disconnected]{@link Input#event:disconnected}\n   *\n   * 4. **Catch-All** Events (input-wide)\n   *\n   *    * [midimessage]{@link Input#event:midimessage}\n   *    * [unknownmidimessage]{@link Input#event:unknownmidimessage}\n   *\n   * 5. **Channel Voice** Events (channel-specific)\n   *\n   *    * [channelaftertouch]{@link InputChannel#event:channelaftertouch}\n   *    * [controlchange]{@link InputChannel#event:controlchange}\n   *    * [keyaftertouch]{@link InputChannel#event:keyaftertouch}\n   *    * [noteoff]{@link InputChannel#event:noteoff}\n   *    * [noteon]{@link InputChannel#event:noteon}\n   *    * [nrpn]{@link InputChannel#event:nrpn}\n   *    * [pitchbend]{@link InputChannel#event:pitchbend}\n   *    * [programchange]{@link InputChannel#event:programchange}\n   *\n   * 6. **Channel Mode** Events (channel-specific)\n   *\n   *    * allnotesoff\n   *    * allsoundoff\n   *    * localcontrol\n   *    * monomode\n   *    * omnimode\n   *    * resetallcontrollers\n   *\n   * @param event {string} The type of the event.\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object's properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the `arguments` property of the `Listener` object\n   * and can be retrieved or modified as desired.\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to listen on. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {Object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array.\n   *\n   * @throws {Error} For channel-specific events, 'options.channels' must be defined.\n   *\n   * @returns {Listener[]} An array of all `Listener` objects that were created.\n   */\n  addOneTimeListener(event, listener, options = {}) {\n    options.remaining = 1;\n    return this.addListener(event, listener, options);\n  }\n\n  /**\n   * This is an alias to the [Input.addListener()]{@link Input#addListener} method.\n   * @since 2.0.0\n   * @deprecated since v3.0\n   * @private\n   */\n  on(event, channel, listener, options) {\n    return this.addListener(event, channel, listener, options);\n  }\n\n  /**\n   * Checks if the specified event type is already defined to trigger the listener function. For\n   * channel-specific events, the function will return `true` only if all channels have the listener\n   * defined.\n   *\n   * @param event {string} The type of the event.\n   *\n   * @param listener {function} The callback function to check for.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to check. This parameter is ignored for\n   * input-wide events.\n   *\n   * @returns {Boolean} Boolean value indicating whether or not the channel(s) already have this\n   * listener defined.\n   *\n   * @throws Error For channel-specific events, 'options.channels' must be defined.\n   */\n  hasListener(event, listener, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = [].concat(listener); // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n      // Validation\n      if (\n        WebMidi.CHANNEL_EVENTS.includes(event) &&\n        options.channels === undefined\n      ) {\n        throw new Error(\"For channel-specific events, 'options.channels' must be defined.\");\n      }\n\n    }\n\n    if (WebMidi.CHANNEL_EVENTS.includes(event)) {\n\n      return Utilities.sanitizeChannels(options.channels).every(ch => {\n        return this.channels[ch].hasListener(event, listener);\n      });\n\n    } else {\n      return super.hasListener(event, listener);\n    }\n\n  }\n\n  /**\n   * Removes the specified listener for the specified event. If no listener is specified, all\n   * listeners for the specified event will be removed. If no event is specified, all listeners for\n   * the `Input` as well as all listeners for all `InputChannels` will be removed.\n   *\n   * By default, channel-specific listeners will be removed from all channels unless the\n   * `options.channel` narrows it down.\n   *\n   * @param [type] {String} The type of the event.\n   *\n   * @param [listener] {Function} The callback function to check for.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to match. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {*} [options.context] Only remove the listeners that have this exact context.\n   *\n   * @param {number} [options.remaining] Only remove the listener if it has exactly that many\n   * remaining times to be executed.\n   */\n  removeListener(event, listener, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = [].concat(listener); // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n    }\n\n    if (options.channels === undefined) {\n      options.channels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    }\n\n    // If the event is not specified, remove everything (channel-specific and input-wide)!\n    if (event == undefined) {\n      Utilities.sanitizeChannels(\n        options.channels).forEach(ch => this.channels[ch].removeListener()\n      );\n      return super.removeListener();\n    }\n\n    // If the event is specified, check if it's channel-specific or input-wide.\n    if (WebMidi.CHANNEL_EVENTS.includes(event)) {\n\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].removeListener(event, listener, options);\n      });\n\n    } else {\n\n      super.removeListener(event, listener, options);\n\n    }\n\n  }\n\n  /**\n   * Name of the MIDI input\n   *\n   * @type {string}\n   * @readonly\n   */\n  get name() {\n    return this._midiInput.name;\n  }\n\n  /**\n   * ID string of the MIDI port. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiInput.id;\n  }\n\n  /**\n   * Input port's connection state: `\"pending\"`, `\"open\"` or `\"closed\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiInput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this input port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiInput.manufacturer;\n  }\n\n  /**\n   * An integer to offset the reported octave of incoming notes. By default, middle C (MIDI note\n   * number 60) is placed on the 4th octave (C4).\n   *\n   * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n   * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n   *\n   * Note that this value is combined with the global offset value defined on the `WebMidi` object\n   * (if any).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * State of the input port: `\"connected\"` or `\"disconnected\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiInput.state;\n  }\n\n  /**\n   * Port type. In the case of `Input`, this is always: `\"input\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiInput.type;\n  }\n\n  /**\n   * @type {boolean}\n   * @private\n   * @deprecated since v3.0.0 (moved to 'InputChannel' class)\n   */\n  get nrpnEventsEnabled() {\n    if (WebMidi.validation) {\n      console.warn(\"The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class.\");\n    }\n    return false;\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/**\n * The `OutputChannel` class represents a single output channel (1-16) from an output device. This\n * object is derived from the host's MIDI subsystem and cannot be instantiated directly.\n *\n * All 16 `OutputChannel` objects can be found inside the parent output's\n * [channels]{@link Output#channels} property.\n *\n * The `OutputChannel` class extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [addListener()](https://djipco.github.io/djipevents/EventEmitter.html#addListener),\n * [removeListener()](https://djipco.github.io/djipevents/EventEmitter.html#removeListener),\n * [hasListener()](https://djipco.github.io/djipevents/EventEmitter.html#hasListener) and several\n * others.\n *\n * @param {Output} output The output this channel belongs to\n * @param {number} number The channel number (1-16)\n *\n * @since 3.0.0\n */\nexport class OutputChannel extends EventEmitter {\n\n  constructor(output, number) {\n\n    super();\n\n    /**\n     * @type {Output}\n     * @private\n     */\n    this._output = output;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._number = number;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n  }\n\n  /**\n   * Unlinks the MIDI subsystem, removes all listeners attached to the channel and nulls the channel\n   * number. This method is mostly for internal use. It has not been prefixed with an underscore\n   * since it is called by other objects such as the `Output` object.\n   *\n   * @private\n   */\n  destroy() {\n    this._output = null;\n    this._number = null;\n    this._octaveOffset = 0;\n    this.removeListener();\n  }\n\n  /**\n   * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\n   * sent immediately. The message should be an array of 8 bit unsigned integers (0-225), a\n   * [Uint8Array]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n   * object or a `Message` object.\n   *\n   * It is usually not necessary to use this method directly as you can use one of the simpler\n   * helper methods such as `playNote()`, `stopNote()`, `sendControlChange()`, etc.\n   *\n   * Details on the format of MIDI messages are available in the summary of\n   * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}\n   * from the MIDI Manufacturers Association.\n   *\n   * @param message {number[]|Uint8Array|Message} An array of 8bit unsigned integers, a `Uint8Array`\n   * object (not available in Node.js) containing the message bytes or a `Message` object.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a positive\n   * number\n   * ([DOMHighResTimeStamp]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that point time. If `time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.\n   *\n   * @throws {RangeError} Data bytes must be integers between 0 and 255.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  send(message, options = {time: 0}) {\n    this.output.send(message, options);\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **key aftertouch** message at the scheduled time. This is a key-specific\n   * aftertouch. For a channel-wide aftertouch message, use\n   * [setChannelAftertouch()]{@link Output#setChannelAftertouch}.\n   *\n   * The key can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier such as `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`, etc.\n   *\n   * @param target {number|string|number[]|string[]} The key(s) for which you are sending an\n   * aftertouch value. The notes can be specified by using a MIDI note number (0-127), a note\n   * identifier (e.g. C3, G#4, F-1, Db7), or an array of the previous types.\n   *\n   * When using a note identifier, the octave value will be offset by the combined value of\n   * `InputChannel.octaveOffset`, `Input.octaveOffset` and `WebMidi.octaveOffset` (if those values\n   * are not `0`). When using a key number, octaveOffset values are ignored.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure is defined by using an integer between 0 and 127.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.useRawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @return {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @throws RangeError Invalid key aftertouch value.\n   */\n  setKeyAftertouch(target, pressure, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy support\n      if (options.useRawValue) options.rawValue = options.useRawValue;\n\n      if (isNaN(parseFloat(pressure))) {\n        throw new RangeError(\"Invalid key aftertouch value.\");\n      }\n      if (options.rawValue) {\n        if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) {\n          throw new RangeError(\"Key aftertouch raw value must be an integer between 0 and 127.\");\n        }\n      } else {\n        if (!(pressure >= 0 && pressure <= 1)) {\n          throw new RangeError(\"Key aftertouch value must be a float between 0 and 1.\");\n        }\n      }\n\n    }\n\n    // Normalize pressure to integer\n    if (!options.rawValue) pressure = Utilities.to7Bit(pressure);\n\n    // Retrieve key number. If identifier specified, offset by total offset value\n    const offset = WebMidi.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n    if (!Array.isArray(target)) target = [target];\n    target = target.map(item => Utilities.guessNoteNumber(item));\n\n    target.forEach(n => {\n      this.send(\n        [\n          (WebMidi.MIDI_CHANNEL_MESSAGES.keyaftertouch << 4) + (this.number - 1),\n          Utilities.offsetNumber(n, offset),\n          pressure\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n\n\n\n\n    //\n    // Utilities.buildNoteArray(note, {rawAttack: nVelocity}).forEach(n => {\n    //   this.send(\n    //     [\n    //       (WebMidi.MIDI_CHANNEL_MESSAGES.noteon << 4) + (this.number - 1),\n    //       n.getOffsetNumber(offset),\n    //       n.rawAttack\n    //     ],\n    //     {time: Utilities.toTimestamp(options.time)}\n    //   );\n    // });\n\n\n  }\n\n  /**\n   * Sends a MIDI **control change** message to the channel at the scheduled time. The control\n   * change message to send can be specified numerically (0 to 127) or by using one of the following\n   * common names:\n   *\n   *  * `bankselectcoarse` (#0)\n   *  * `modulationwheelcoarse` (#1)\n   *  * `breathcontrollercoarse` (#2)\n   *  * `footcontrollercoarse` (#4)\n   *  * `portamentotimecoarse` (#5)\n   *  * `dataentrycoarse` (#6)\n   *  * `volumecoarse` (#7)\n   *  * `balancecoarse` (#8)\n   *  * `pancoarse` (#10)\n   *  * `expressioncoarse` (#11)\n   *  * `effectcontrol1coarse` (#12)\n   *  * `effectcontrol2coarse` (#13)\n   *  * `generalpurposeslider1` (#16)\n   *  * `generalpurposeslider2` (#17)\n   *  * `generalpurposeslider3` (#18)\n   *  * `generalpurposeslider4` (#19)\n   *  * `bankselectfine` (#32)\n   *  * `modulationwheelfine` (#33)\n   *  * `breathcontrollerfine` (#34)\n   *  * `footcontrollerfine` (#36)\n   *  * `portamentotimefine` (#37)\n   *  * `dataentryfine` (#38)\n   *  * `volumefine` (#39)\n   *  * `balancefine` (#40)\n   *  * `panfine` (#42)\n   *  * `expressionfine` (#43)\n   *  * `effectcontrol1fine` (#44)\n   *  * `effectcontrol2fine` (#45)\n   *  * `holdpedal` (#64)\n   *  * `portamento` (#65)\n   *  * `sustenutopedal` (#66)\n   *  * `softpedal` (#67)\n   *  * `legatopedal` (#68)\n   *  * `hold2pedal` (#69)\n   *  * `soundvariation` (#70)\n   *  * `resonance` (#71)\n   *  * `soundreleasetime` (#72)\n   *  * `soundattacktime` (#73)\n   *  * `brightness` (#74)\n   *  * `soundcontrol6` (#75)\n   *  * `soundcontrol7` (#76)\n   *  * `soundcontrol8` (#77)\n   *  * `soundcontrol9` (#78)\n   *  * `soundcontrol10` (#79)\n   *  * `generalpurposebutton1` (#80)\n   *  * `generalpurposebutton2` (#81)\n   *  * `generalpurposebutton3` (#82)\n   *  * `generalpurposebutton4` (#83)\n   *  * `reverblevel` (#91)\n   *  * `tremololevel` (#92)\n   *  * `choruslevel` (#93)\n   *  * `celestelevel` (#94)\n   *  * `phaserlevel` (#95)\n   *  * `databuttonincrement` (#96)\n   *  * `databuttondecrement` (#97)\n   *  * `nonregisteredparametercoarse` (#98)\n   *  * `nonregisteredparameterfine` (#99)\n   *  * `registeredparametercoarse` (#100)\n   *  * `registeredparameterfine` (#101)\n   *\n   *  * `allsoundoff` (#120)\n   *  * `resetallcontrollers` (#121)\n   *  * `localcontrol` (#122)\n   *  * `allnotesoff` (#123)\n   *  * `omnimodeoff` (#124)\n   *  * `omnimodeon` (#125)\n   *  * `monomodeon` (#126)\n   *  * `polymodeon` (#127)\n   *\n   * Note: as you can see above, not all control change message have a matching common name. This\n   * does not mean you cannot use the others. It simply means you will need to use their number\n   * (0-127) instead of their name. While you can still use them, numbers 120 to 127 are usually\n   * reserved for *channel mode* messages. See\n   * [sendChannelMode()]{@link OutputChannel#sendChannelMode} method for more info.\n   *\n   * To view a detailed list of all available **control change** messages, please consult \"Table 3 -\n   * Control Change Messages\" from the [MIDI Messages](\n   * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)\n   * specification.\n   *\n   * @param {number|string} controller The MIDI controller name or number (0-127).\n   *\n   * @param {number} value The value to send (0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 127.\n   * @throws {RangeError} Invalid controller name.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendControlChange(controller, value, options = {}) {\n\n    if (typeof controller === \"string\") {\n      controller = WebMidi.MIDI_CONTROL_CHANGE_MESSAGES[controller];\n    }\n\n    if (WebMidi.validation) {\n      if (controller === undefined) {\n        throw new TypeError(\n          \"Control change must be identified with a valid name or an integer between 0 and 127.\"\n        );\n      }\n\n      if (!Number.isInteger(controller) || !(controller >= 0 && controller <= 127)) {\n        throw new TypeError(\"Control change number must be an integer between 0 and 127.\");\n      }\n\n      if (!Number.isInteger(value) || !(value >= 0 && value <= 127)) {\n        throw new TypeError(\"Control change value must be an integer between 0 and 127\");\n      }\n    }\n\n    this.send(\n      [\n        (WebMidi.MIDI_CHANNEL_MESSAGES.controlchange << 4) + (this.number - 1),\n        controller,\n        value\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Selects a MIDI non-registered parameter so it is affected by upcoming data entry, data\n   * increment and data decrement messages.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes that identify\n   * the registered parameter. The NRPN MSB (99 or 0x63) is a position 0. The NRPN LSB (98 or 0x62)\n   * is at position 1.\n   *\n   * @private\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _selectNonRegisteredParameter(parameter, options = {}) {\n\n    // parameter[0] = Math.floor(parameter[0]);\n    // if (!(parameter[0] >= 0 && parameter[0] <= 127)) {\n    //   throw new RangeError(\"The control63 value must be between 0 and 127.\");\n    // }\n    //\n    // parameter[1] = Math.floor(parameter[1]);\n    // if (!(parameter[1] >= 0 && parameter[1] <= 127)) {\n    //   throw new RangeError(\"The control62 value must be between 0 and 127.\");\n    // }\n\n    this.sendControlChange(0x63, parameter[0], options);\n    this.sendControlChange(0x62, parameter[1], options);\n\n    return this;\n\n  }\n\n  /**\n   * Deselects the currently active MIDI registered parameter so it is no longer affected by data\n   * entry, data increment and data decrement messages.\n   *\n   * Current best practice recommends doing that after each call to\n   * [_setCurrentParameter()]{@link OutputChannel#_setCurrentParameter}.\n   *\n   * @private\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _deselectRegisteredParameter(options = {}) {\n    this.sendControlChange(0x65, 0x7F, options);\n    this.sendControlChange(0x64, 0x7F, options);\n    return this;\n  }\n\n  /**\n   * Deselects the currently active MIDI non-registered parameter so it is no longer affected by\n   * data entry, data increment and data decrement messages.\n   *\n   * @private\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _deselectNonRegisteredParameter(options = {}) {\n    this.sendControlChange(0x65, 0x7F, options);\n    this.sendControlChange(0x64, 0x7F, options);\n    return this;\n  }\n\n  /**\n   * Selects a MIDI registered parameter so it is affected by upcoming data entry, data increment\n   * and data decrement messages.\n   *\n   * @private\n   *\n   * @param parameter {number[]} A two-position array of integers specifying the two control bytes\n   * (0x65, 0x64) that identify the registered parameter. The integers must be between 0 and 127.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _selectRegisteredParameter(parameter, options = {}) {\n    this.sendControlChange(0x65, parameter[0], options);\n    this.sendControlChange(0x64, parameter[1], options);\n    return this;\n  }\n\n  /**\n   * Sets the value of the currently selected MIDI registered parameter.\n   *\n   * @private\n   *\n   * @param data {number|number[]}\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _setCurrentParameter(data, options = {}) {\n\n    data = [].concat(data);\n\n    // MSB\n    // data[0] = parseInt(data[0]);\n    // if (!isNaN(data[0]) && data[0] >= 0 && data[0] <= 127) {\n    this.sendControlChange(0x06, data[0], options);\n    // } else {\n    //   throw new RangeError(\"The msb value must be between 0 and 127.\");\n    // }\n\n    if (data.length < 2) return this;\n\n    // LSB\n    // data[1] = parseInt(data[1]);\n\n    // if (!isNaN(data[1]) && data[1] >= 0 && data[1] <= 127) {\n    this.sendControlChange(0x26, data[1], options);\n    // } else {\n    //   throw new RangeError(\"The lsb value must be between 0 and 127.\");\n    // }\n\n    return this;\n\n  }\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified registered parameter is invalid.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  decrementRegisteredParameter(parameter, options = {}) {\n\n    if (!Array.isArray(parameter)) parameter = WebMidi.MIDI_REGISTERED_PARAMETERS[parameter];\n\n    if (WebMidi.validation) {\n      if (parameter === undefined) {\n        throw new TypeError(\"The specified registered parameter is invalid.\");\n      }\n\n      let valid = false;\n\n      Object.getOwnPropertyNames(WebMidi.MIDI_REGISTERED_PARAMETERS).forEach(p => {\n        if (\n          WebMidi.MIDI_REGISTERED_PARAMETERS[p][0] === parameter[0] &&\n          WebMidi.MIDI_REGISTERED_PARAMETERS[p][1] === parameter[1]\n        ) {\n          valid = true;\n        }\n      });\n\n      if (!valid) throw new TypeError(\"The specified registered parameter is invalid.\");\n    }\n\n    this._selectRegisteredParameter(parameter, options);\n    this.sendControlChange(0x61, 0, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified registered parameter is invalid.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  incrementRegisteredParameter(parameter, options = {}) {\n\n    if (!Array.isArray(parameter)) parameter = WebMidi.MIDI_REGISTERED_PARAMETERS[parameter];\n\n    if (WebMidi.validation) {\n      if (parameter === undefined) {\n        throw new TypeError(\"The specified registered parameter is invalid.\");\n      }\n\n      let valid = false;\n\n      Object.getOwnPropertyNames(WebMidi.MIDI_REGISTERED_PARAMETERS).forEach(p => {\n        if (\n          WebMidi.MIDI_REGISTERED_PARAMETERS[p][0] === parameter[0] &&\n          WebMidi.MIDI_REGISTERED_PARAMETERS[p][1] === parameter[1]\n        ) {\n          valid = true;\n        }\n      });\n\n      if (!valid) throw new TypeError(\"The specified registered parameter is invalid.\");\n    }\n\n    this._selectRegisteredParameter(parameter, options);\n    this.sendControlChange(0x60, 0, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Plays a note or an array of notes on the channel. The first parameter is the note to play. It\n   * can be a single value or an array of the following valid values:\n   *\n   *  - A {@link Note} object\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *\n   * The `playNote()` method sends a **note on** MIDI message for all specified notes on all\n   * specified channels. If a `duration` is set in the `options` parameter or in the {@link Note}\n   * object's [duration]{@link Note#duration} property, it will also schedule a **note off** message\n   * to end the note after said duration. If no `duration` is set, the note will simply play until\n   * a matching **note off** message is sent with [stopNote()]{@link OutputChannel#stopNote} or\n   * [sendNoteOff()]{@link OutputChannel#sendNoteOff}.\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the durations and velocities defined in the {@link Note}\n   * objects have precedence over the ones specified via the method's `options` parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number} [options.duration] A positive number larger than 0 representing the number of\n   * milliseconds to wait before sending a **note off** message. If invalid or left undefined, only\n   * a **note on** message will be sent.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity\n   * value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=0.5] The attack velocity at which to play the note (between\n   * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will\n   * silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`. This is only used with the\n   * **note off** event triggered when `options.duration` is set.\n   *\n   * @param {number} [options.rawRelease=0.5] The velocity at which to release the note (between `0`\n   * and `127`). This has priority over the `release` property. An invalid velocity value will\n   * silently trigger the default of `0.5`. This is only used with the **note off** event triggered\n   * when `options.duration` is set.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  playNote(note, options = {}) {\n\n    // Send note on and, optionally, note off message (if duration is a positive number)\n    this.sendNoteOn(note, options);\n\n    // https://stackoverflow.com/questions/600763#answer-601877\n    if (options.duration > 0 && isFinite(String(options.duration).trim() || NaN)) {\n\n      let noteOffOptions = {\n        time: (Utilities.toTimestamp(options.time) || WebMidi.time) + options.duration,\n        release: options.release,\n        rawRelease: options.rawRelease,\n      };\n\n      this.sendNoteOff(note, noteOffOptions);\n\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified notes on the channel. The first parameter is the\n   * note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   *  The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the release velocity defined in the {@link Note} objects has\n   * precedence over the one specified via the method's `options` parameter.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNoteOff(note, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (\n        options.rawRelease != undefined &&\n        !(options.rawRelease >= 0 && options.rawRelease <= 127)\n      ) {\n        throw new RangeError(\"The 'rawRelease' option must be an integer between 0 and 127\");\n      }\n\n      if (options.release != undefined && !(options.release >= 0 && options.release <= 1)) {\n        throw new RangeError(\"The 'release' option must be an number between 0 and 1\");\n      }\n\n      // Legacy compatibility warnings\n      if (options.rawVelocity) {\n        options.rawRelease = options.velocity;\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.\");\n      }\n      if (options.velocity) {\n        options.release = options.velocity;\n        console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n      }\n\n    }\n\n    let nVelocity = 64;\n\n    if (options.rawRelease != undefined) {\n      nVelocity = options.rawRelease;\n    } else {\n      if (!isNaN(options.release)) nVelocity = Math.round(options.release * 127);\n    }\n\n    // Plot total octave offset\n    const offset = WebMidi.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n\n    Utilities.buildNoteArray(note, {rawRelease: parseInt(nVelocity)}).forEach(n => {\n      this.send(\n        [\n          (WebMidi.MIDI_CHANNEL_MESSAGES.noteoff << 4) + (this.number - 1),\n          n.getOffsetNumber(offset),\n          n.rawRelease,\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * This is an alias to the [sendNoteOff()]{@link OutputChannel#sendNoteOff} method.\n   *\n   * @see {@link OutputChannel#sendNoteOff}\n   *\n   * @param note\n   * @param options\n   * @returns {Output}\n   */\n  stopNote(note, options = {}) {\n    return this.sendNoteOff(note, options);\n  }\n\n  /**\n   * Sends a **note on** message for the specified note(s) on the channel. The first parameter is\n   * the note. It can be a single value or an array of the following valid values:\n   *\n   *  - A {@link Note} object\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *\n   *  When passing a {@link Note} object or a note name, the `octaveOffset` will be applied. This is\n   *  not the case when using a note number number. In this case, we assume you know exactly which\n   *  MIDI note number should be sent out.\n   *\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the attack velocity defined in the {@link Note} objects has\n   * precedence over the one specified via the method's `options` parameter. Also, the `duration` is\n   * ignored. If you want to also send a **note off** message, use the\n   * [playNote()]{@link Output#playNote} method instead.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The velocity at which to release the note (between `0`\n   * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `64`.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNoteOn(note, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (options.rawAttack != undefined && !(options.rawAttack >= 0 && options.rawAttack <= 127)) {\n        throw new RangeError(\"The 'rawAttack' option must be an integer between 0 and 127\");\n      }\n\n      if (options.attack != undefined && !(options.attack >= 0 && options.attack <= 1)) {\n        throw new RangeError(\"The 'attack' option must be an number between 0 and 1\");\n      }\n\n      // Legacy compatibility warnings\n      if (options.rawVelocity) {\n        options.rawAttack = options.velocity;\n        options.rawRelease = options.release;\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.\");\n      }\n      if (options.velocity) {\n        options.attack = options.velocity;\n        console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n      }\n\n    }\n\n    let nVelocity = 64;\n\n    if (options.rawAttack != undefined) {\n      nVelocity = options.rawAttack;\n    } else {\n      if (!isNaN(options.attack)) nVelocity = Math.round(options.attack * 127);\n    }\n\n    // Plot total octave offset\n    const offset = WebMidi.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n\n    Utilities.buildNoteArray(note, {rawAttack: nVelocity}).forEach(n => {\n      this.send(\n        [\n          (WebMidi.MIDI_CHANNEL_MESSAGES.noteon << 4) + (this.number - 1),\n          n.getOffsetNumber(offset),\n          n.rawAttack\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel mode** message. The channel mode message to send can be specified\n   * numerically or by using one of the following common names:\n   *\n   *   * `\"allsoundoff\"` (#120)\n   *   * `\"resetallcontrollers\"` (#121)\n   *   * `\"localcontrol\"` (#122)\n   *   * `\"allnotesoff\"` (#123)\n   *   * `\"omnimodeoff\"` (#124)\n   *   * `\"omnimodeon\"` (#125)\n   *   * `\"monomodeon\"` (#126)\n   *   * `\"polymodeon\"` (#127)\n   *\n   * It should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may\n   * require a value that's not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * To make it easier, all channel mode messages have a matching helper method:\n   *\n   *   - [turnSoundOff()]{@link Output#turnSoundOff}\n   *   - [resetAllControllers()]{@link Output#resetAllControllers}\n   *   - [setLocalControl()]{@link Output#turnSoundOff}\n   *   - [turnNotesOff()]{@link Output#turnNotesOff}\n   *   - [setOmniMode()]{@link Output#setOmniMode}\n   *   - [setPolyphonicMode()]{@link Output#setPolyphonicMode}\n   *\n   * @param command {number|string} The numerical identifier of the channel mode message (integer\n   * between 120-127) or its name as a string.\n   *\n   * @param value {number} The value to send (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendChannelMode(command, value, options = {}) {\n\n    // Normalize command to integer\n    if (typeof command === \"string\") command = WebMidi.MIDI_CHANNEL_MODE_MESSAGES[command];\n\n    if (WebMidi.validation) {\n\n      if (command === undefined) {\n        throw new TypeError(\"Invalid channel mode message name or number.\");\n      }\n\n      if (isNaN(command) || !(command >= 120 && command <= 127)) {\n        throw new TypeError(\"Invalid channel mode message number.\");\n      }\n\n      if (isNaN(parseInt(value)) || value < 0 || value > 127) {\n        throw new RangeError(\"Value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    this.send(\n      [\n        (WebMidi.MIDI_CHANNEL_MESSAGES.controlchange << 4) + (this.number - 1),\n        command,\n        value\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets OMNI mode to `\"on\"` or `\"off\"`. MIDI's OMNI mode causes the instrument to respond to\n   * messages from all channels.\n   *\n   * It should be noted that support for OMNI mode is not as common as it used to be.\n   *\n   * @param [state=true] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setOmniMode(state, options = {}) {\n\n    if (state === undefined || state) {\n      this.sendChannelMode(\"omnimodeon\", 0, options);\n    } else {\n      this.sendChannelMode(\"omnimodeoff\", 0, options);\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel aftertouch** message. For key-specific aftertouch, you should instead\n   * use [setKeyAftertouch()]{@link Output#setKeyAftertouch}.\n   *\n   * @param [pressure] {number} The pressure level (between 0 and 1). If the `rawValue` option is\n   * set to `true`, the pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @throws RangeError Invalid channel aftertouch value.\n   */\n  setChannelAftertouch(pressure, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (isNaN(parseFloat(pressure))) {\n        throw new RangeError(\"Invalid channel aftertouch value.\");\n      }\n\n      if (options.rawValue) {\n        if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) {\n          throw new RangeError(\n            \"Channel aftertouch raw value must be an integer between 0 and 127.\")\n          ;\n        }\n      } else {\n        if (!(pressure >= 0 && pressure <= 1)) {\n          throw new RangeError(\"Channel aftertouch value must be a float between 0 and 1.\");\n        }\n      }\n\n    }\n\n    this.send(\n      [\n        (WebMidi.MIDI_CHANNEL_MESSAGES.channelaftertouch << 4) + (this.number - 1),\n        Math.round(pressure * 127)\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **master tuning** message. The value is decimal and must be larger than -65 semitones\n   * and smaller than 64 semitones.\n   *\n   * Because of the way the MIDI specification works, the decimal portion of the value will be\n   * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n   * a **Master Fine Tuning** RPN messages.\n   *\n   * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setMasterTuning(value, options = {}) {\n\n    value = parseFloat(value) || 0.0;\n\n    if (WebMidi.validation) {\n\n      if (!(value > -65 && value < 64)) {\n        throw new RangeError(\n          \"The value must be a decimal number larger than -65 and smaller than 64.\"\n        );\n      }\n\n    }\n\n    let coarse = Math.floor(value) + 64;\n    let fine = value - Math.floor(value);\n\n    // Calculate MSB and LSB for fine adjustment (14bit resolution)\n    fine = Math.round((fine + 1) / 2 * 16383);\n    let msb = (fine >> 7) & 0x7F;\n    let lsb = fine & 0x7F;\n\n    this.setRegisteredParameter(\"channelcoarsetuning\", coarse, options);\n    this.setRegisteredParameter(\"channelfinetuning\", [msb, lsb], options);\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **modulation depth range** message to adjust the depth of the modulation wheel's range.\n   * The range can be specified with the `semitones` parameter, the `cents` parameter or by\n   * specifying both parameters at the same time.\n   *\n   * @param {number} semitones The desired adjustment value in semitones (integer between 0 and\n   * 127).\n   *\n   * @param {number} [cents=0] The desired adjustment value in cents (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setModulationRange(semitones, cents, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) {\n        throw new RangeError(\"The semitones value must be an integer between 0 and 127.\");\n      }\n\n      if (!(cents == undefined) && (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127))) {\n        throw new RangeError(\"If specified, the cents value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    // Default value for cents\n    if (!(cents >= 0 && cents <= 127)) cents = 0;\n\n    this.setRegisteredParameter(\"modulationrange\", [semitones, cents], options);\n\n    return this;\n\n  }\n\n  /**\n   * Sets a non-registered parameter (NRPN) to the specified value. The NRPN is selected by passing\n   * in a two-position array specifying the values of the two control bytes. The value is specified\n   * by passing in a single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you\n   * would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].channels[0].setNonRegisteredParameter([1, 8], 123);\n   * ```\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was 10, you could use:\n   *\n   * ```js\n   * WebMidi.outputs[0].channels[0].setNonRegisteredParameter([2, 63], [0, 10]);\n   * ```\n   *\n   * For further implementation details, refer to the manufacturer's documentation.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes (0x63,\n   * 0x62) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The control value must be between 0 and 127.\n   * @throws {RangeError} The msb value must be between 0 and 127\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setNonRegisteredParameter(nrpn, data, options = {}) {\n\n    data = [].concat(data);\n\n    if (WebMidi.validation) {\n\n      if (!Array.isArray(nrpn) || !Number.isInteger(nrpn[0]) || !Number.isInteger(nrpn[1])) {\n        throw new TypeError(\"The specified NRPN is invalid.\");\n      }\n\n      if (!(nrpn[0] >= 0 && nrpn[0] <= 127)) {\n        throw new RangeError(\"The first byte of the NRPN must be between 0 and 127.\");\n      }\n\n      if (!(nrpn[1] >= 0 && nrpn[1] <= 127)) {\n        throw new RangeError(\"The second byte of the NRPN must be between 0 and 127.\");\n      }\n\n      data.forEach(value => {\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The data bytes of the NRPN must be between 0 and 127.\");\n        }\n      });\n\n    }\n\n    this._selectNonRegisteredParameter(nrpn, options);\n    this._setCurrentParameter(data, options);\n    this._deselectNonRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **pitch bend** message at the scheduled time.\n   *\n   * @param {number|number[]} [value] The intensity of the bend (between -1.0 and 1.0). A value of\n   * zero means no bend. The resulting bend is relative to the pitch bend range that has been\n   * defined. The range can be set with [setPitchBendRange()]{@link OutputChannel#setPitchBendRange}\n   * . So, for example, if the pitch bend range has been set to 12 semitones, using a bend value of\n   * -1 will bend the note 1 octave below its nominal value.\n   *\n   * If the `rawValue` option is set to `true`, the intensity of the bend can be defined by either\n   * using a single integer between 0 and 127 (MSB) or an array of two integers between 0 and 127\n   * representing, respectively, the MSB (most significant byte) and the LSB (least significant\n   * byte). The MSB is expressed in semitones with `64` meaning no bend. A value lower than `64`\n   * bends downwards while a value higher than `64` bends upwards. The LSB is expressed in cents\n   * (1/100 of a semitone). An LSB of `64` also means no bend.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered as a float between -1.0 and 1.0 (default) or as raw integer between 0 and 127 (or\n   * an array of 2 integers if using both MSB and LSB).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setPitchBend(value, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (options.rawValue && Array.isArray(value)) {\n\n        if (!(value[0] >= 0 && value[0] <= 127)) {\n          throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n        }\n        if (!(value[1] >= 0 && value[1] <= 127)) {\n          throw new RangeError(\"The pitch bend LSB must be an integer between 0 and 127.\");\n        }\n\n      } else if (options.rawValue && !Array.isArray(value)) {\n\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n        }\n\n      } else {\n\n        if (isNaN(value) || value === null) {\n          throw new RangeError(\"Invalid pitch bend value.\");\n        }\n\n        if (!(value >= -1 && value <= 1)) {\n          throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n        }\n\n      }\n\n    }\n\n    let msb = 0;\n    let lsb = 0;\n\n    // Calculate MSB and LSB for both scenarios\n    if (options.rawValue && Array.isArray(value)) {\n      msb = value[0];\n      lsb = value[1];\n    } else if (options.rawValue && !Array.isArray(value)) {\n      msb = value;\n    } else {\n      let nLevel = Math.round((value + 1) / 2 * 16383);\n      msb = (nLevel >> 7) & 0x7F;\n      lsb = nLevel & 0x7F;\n    }\n\n    this.send(\n      [\n        (WebMidi.MIDI_CHANNEL_MESSAGES.pitchbend << 4) + (this.number - 1),\n        lsb,\n        msb\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a pitch bend range message to the specified channel(s) at the scheduled time so that they\n   * adjust the range used by their pitch bend lever. The range is specified by using the\n   * `semitones` and `cents` parameters. For example, setting the `semitones` parameter to `12`\n   * means that the pitch bend range will be 12 semitones above and below the nominal pitch.\n   *\n   * @param semitones {number} The desired adjustment value in semitones (between 0 and 127). While\n   * nothing imposes that in the specification, it is very common for manufacturers to limit the\n   * range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127.\n   * @throws {RangeError} The lsb value must be between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setPitchBendRange(semitones, cents, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) {\n        throw new RangeError(\"The semitones value must be an integer between 0 and 127.\");\n      }\n\n      if (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127)) {\n        throw new RangeError(\"The cents value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    this.setRegisteredParameter(\"pitchbendrange\", [semitones, cents], options);\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **program change** message at the scheduled time.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param [program=1] {number} The MIDI patch (program) number (1-128)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n   * than 0xFF.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   */\n  setProgram(program, options = {}) {\n\n    program = parseInt(program) || 1;\n\n    if (WebMidi.validation) {\n\n      if (!(program >= 1 && program <= 128)) {\n        throw new RangeError(\"The program number must be between 1 and 128.\");\n      }\n\n    }\n\n    this.send(\n      [\n        (WebMidi.MIDI_CHANNEL_MESSAGES.programchange << 4) + (this.number - 1),\n        program - 1\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data (msb, lsb) that each can go from 0 to 127.\n   *\n   * MIDI\n   * [registered parameters]\n   * (https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n   * limited number of them. Here are the original registered parameters with the identifier that\n   * can be used as the first parameter of this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *\n   * Note that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * Another set of extra parameters have been later added for 3D sound controllers. They are:\n   *\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {string|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n   * registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An single integer or an array of integers with a maximum\n   * length of 2 specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setRegisteredParameter(rpn, data, options = {}) {\n\n    if (!Array.isArray(rpn)) rpn = WebMidi.MIDI_REGISTERED_PARAMETERS[rpn];\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(rpn[0]) || !Number.isInteger(rpn[1])) {\n        throw new TypeError(\"The specified NRPN is invalid.\");\n      }\n\n      if (!(rpn[0] >= 0 && rpn[0] <= 127)) {\n        throw new RangeError(\"The first byte of the RPN must be between 0 and 127.\");\n      }\n\n      if (!(rpn[1] >= 0 && rpn[1] <= 127)) {\n        throw new RangeError(\"The second byte of the RPN must be between 0 and 127.\");\n      }\n\n      [].concat(data).forEach(value => {\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The data bytes of the RPN must be between 0 and 127.\");\n        }\n      });\n\n    }\n\n    this._selectRegisteredParameter(rpn, options);\n    this._setCurrentParameter(data, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the bank number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning bank (1-128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 1 and 128.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setTuningBank(value, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(value) || !(value >= 1 && value <= 128)) {\n        throw new RangeError(\"The tuning bank number must be between 1 and 128.\");\n      }\n\n    }\n\n    this.setRegisteredParameter(\"tuningbank\", value - 1, options);\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning program (1-128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 1 and 128.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setTuningProgram(value, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(value) || !(value >= 1 && value <= 128)) {\n        throw new RangeError(\"The tuning program number must be between 1 and 128.\");\n      }\n\n    }\n\n    this.setRegisteredParameter(\"tuningprogram\", value - 1, options);\n    return this;\n\n  }\n\n  /**\n   * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n   * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n   * its out port.\n   *\n   * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n   * (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setLocalControl(state, options = {}) {\n    if (state) {\n      return this.sendChannelMode(\"localcontrol\", 127, options);\n    } else {\n      return this.sendChannelMode(\"localcontrol\", 0, options);\n    }\n  }\n\n  /**\n   * Sends an **all notes off** channel mode message. This will make all currently playing notes\n   * fade out just as if their key had been released. This is different from the\n   * [turnSoundOff()]{@link OutputChannel#turnSoundOff} method which mutes all sounds immediately.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  turnNotesOff(options = {}) {\n    return this.sendChannelMode(\"allnotesoff\", 0, options);\n  }\n\n  /**\n   * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n   * channel but will not prevent new sounds from being triggered.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  turnSoundOff(options = {}) {\n    return this.sendChannelMode(\"allsoundoff\", 0, options);\n  }\n\n  /**\n   * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n   * the pitch bend, to their default value.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  resetAllControllers(options = {}) {\n    return this.sendChannelMode(\"resetallcontrollers\", 0, options);\n  }\n\n  /**\n   * Sets the polyphonic mode. In `\"poly\"` mode (usually the default), multiple notes can be played\n   * and heard at the same time. In `\"mono\"` mode, only one note will be heard at once even if\n   * multiple notes are being played.\n   *\n   * @param {string} [mode=poly] The mode to use: `\"mono\"` or `\"poly\"`.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setPolyphonicMode(mode, options = {}) {\n    if (mode === \"mono\") {\n      return this.sendChannelMode(\"monomodeon\", 0, options);\n    } else {\n      return this.sendChannelMode(\"polymodeon\", 0, options);\n    }\n  }\n\n  /**\n   * An integer to offset the reported octave of outgoing note-specific messages (`noteon`,\n   * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n   * octave (C4).\n   *\n   * Note that this value is combined with the global offset value defined on the `WebMidi` object\n   * and with the value defined on the parent `Output` object.\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * The parent {@link Output} this channel belongs to\n   * @type {Output}\n   * @since 3.0\n   */\n  get output() {\n    return this._output;\n  }\n\n  /**\n   * This channel's MIDI number (1-16)\n   * @type {number}\n   * @since 3.0\n   */\n  get number() {\n    return this._number;\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {OutputChannel} from \"./OutputChannel.js\";\nimport {Message, WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/**\n * The `Output` class represents a MIDI output port. This object is derived from the host's MIDI\n * subsystem and cannot be instantiated directly.\n *\n * You can find a list of all available `Output` objects in the\n * [WebMidi.outputs]{@link WebMidi#outputs} array.\n *\n * The `Output` class extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [addListener()](https://djipco.github.io/djipevents/EventEmitter.html#addListener),\n * [removeListener()](https://djipco.github.io/djipevents/EventEmitter.html#removeListener),\n * [hasListener()](https://djipco.github.io/djipevents/EventEmitter.html#hasListener) and several\n * others.\n *\n * @param {MIDIOutput} midiOutput `MIDIOutput` object as provided by the MIDI subsystem\n *\n * @fires Output#opened\n * @fires Output#disconnected\n * @fires Output#closed\n */\nexport class Output extends EventEmitter {\n\n  constructor(midiOutput) {\n\n    super();\n\n    /**\n     * A reference to the `MIDIOutput` object\n     * @type {MIDIOutput}\n     * @private\n     */\n    this._midiOutput = midiOutput;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * Array containing the 16 {@link OutputChannel} objects available for this `Output`. The\n     * channels are numbered 1 through 16.\n     *\n     * @type {OutputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new OutputChannel(this, i);\n\n    this._midiOutput.onstatechange = this._onStateChange.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Output`. All listeners are removed, all channels are destroyed and the MIDI\n   * subsystem is unlinked.\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    this._midiOutput.onstatechange = null;\n    await this.close();\n    this._midiOutput = null;\n  }\n\n  /**\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: WebMidi.time\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the {@link Output} has been opened by calling the\n       * [open()]{@link Output#open} method.\n       *\n       * @event Output#opened\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"opened\"`\n       * @property {Output} target The object that triggered the event\n       */\n      event.type = \"opened\";\n      event.target = this;\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the {@link Output} has been closed by calling the\n       * [close()]{@link Output#close} method.\n       *\n       * @event Output#closed\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"closed\"`\n       * @property {Output} target The object that triggered the event\n       */\n      event.type = \"closed\";\n      event.target = this;\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the {@link Output} becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Output#disconnected\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp0 when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"disconnected\"`\n       * @property {Object} target Object with properties describing the {@link Output} that\n       * triggered the event. This is not the actual `Output` as it is no longer available.\n       * @property {string} target.connection `\"closed\"`\n       * @property {string} target.id ID of the input\n       * @property {string} target.manufacturer Manufacturer of the device that provided the input\n       * @property {string} target.name Name of the device that provided the input\n       * @property {string} target.state `\"disconnected\"`\n       * @property {string} target.type `\"output\"`\n       */\n      event.type = \"disconnected\";\n      event.target = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") {\n      // I don't see the need to forward that...\n    } else {\n      console.warn(\"This statechange event was not caught:\", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Opens the output for usage.\n   *\n   * @returns {Promise<Output>} The promise is fulfilled with the `Output`\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when calling `send()` on the `MIDIOutput`.\n    // We do it explicitly so that 'connected' events are dispatched immediately and we are ready to\n    // send.\n    try {\n      await this._midiOutput.open();\n      return Promise.resolve(this);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n  }\n\n  /**\n   * Closes the output connection. When an output is closed, it cannot be used to send MIDI messages\n   * until the output is opened again by calling [Output.open()]{@link Output#open}. You can check\n   * the connection status by looking at the [connection]{@link Output#connection} property.\n   *\n   * @returns {Promise<void>}\n   */\n  async close() {\n\n    // We close the port. This triggers a 'statechange' event which we listen to to re-trigger the\n    // 'closed' event.\n    if (this._midiOutput) {\n      await this._midiOutput.close();\n    } else {\n      await Promise.resolve();\n    }\n\n  }\n\n  /**\n   * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\n   * sent immediately. The message should be an array of 8 bit unsigned integers (0-225), a\n   * [Uint8Array]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n   * object or a `Message` object.\n   *\n   * It is usually not necessary to use this method directly as you can use one of the simpler\n   * helper methods such as [playNote()`, `stopNote()`, `sendControlChange()`, etc.\n   *\n   * Details on the format of MIDI messages are available in the summary of\n   * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}\n   * from the MIDI Manufacturers Association.\n   *\n   * @param message {number[]|Uint8Array|Message} An array of 8bit unsigned integers, a `Uint8Array`\n   * object (not available in Node.js) containing the message bytes or a `Message` object.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a positive\n   * number\n   * ([DOMHighResTimeStamp]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that point time. If `time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.\n   *\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  send(message, options = {time: 0}, legacy = undefined) {\n\n    // If a Message object is passed in we extract the message data (the jzz plugin used on Node.js\n    // does not support using Uint8Array).\n    if (message instanceof Message) {\n      message = WebMidi.isNode ? message.data : message.rawData;\n    }\n\n    // If the data is a Uint8Array and we are on Node, we must convert it to array so it works with\n    // the jzz module.\n    if (message instanceof Uint8Array && WebMidi.isNode) {\n      message = Array.from(message);\n    }\n\n    // Validation\n    if (WebMidi.validation) {\n\n      // If message is neither an array nor a Uint8Array, then we are in legacy mode\n      if (!Array.isArray(message) && !(message instanceof Uint8Array)) {\n        message = [message];\n        if (Array.isArray(options)) message = message.concat(options);\n        options = legacy ? {time: legacy} : {time: 0};\n      }\n\n      if (!(parseInt(message[0]) >= 128 && parseInt(message[0]) <= 255)) {\n        throw new RangeError(\"The first byte (status) must be an integer between 128 and 255.\");\n      }\n\n      message.slice(1).forEach(value => {\n        value = parseInt(value);\n        if (!(value >= 0 && value <= 255)) {\n          throw new RangeError(\"Data bytes must be integers between 0 and 255.\");\n        }\n      });\n\n      if (!options) options = {time: 0};\n\n    }\n\n    // Send message and return `Output` for chaining\n    this._midiOutput.send(message, Utilities.toTimestamp(options.time));\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI [system exclusive]{@link\n    * https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages}\n   * (*sysex*) message. The `data` parameter should only contain the data of the message. When\n   * sending out the actual MIDI message, WebMidi.js will automatically prepend the data with the\n   * *sysex byte* (`0xF0`) and the manufacturer ID byte(s). It will also automatically terminate\n   * the message with the *sysex end byte* (`0xF7`).\n   *\n   * The data can be an array of unsigned integers (0-127) or a `Uint8Array` object.\n   *\n   * To use the `sendSysex()` method, system exclusive message support must have been enabled. To\n   * do so, you must set the `sysex` option to `true` when calling `WebMidi.enable()`:\n   *\n   * ```js\n   * WebMidi.enable({sysex: true})\n   *   .then(() => console.log(\"System exclusive messages are enabled\");\n   * ```\n   *\n   * Note that, depending on browser, version and platform, it is generally necessary to serve the\n   * page over HTTPS to enable sysex support.\n   *\n   * ##### Examples\n   *\n   * If you want to send a sysex message to a Korg device connected to the first output, you would\n   * use the following code:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(0x42, [0x1, 0x2, 0x3, 0x4, 0x5]);\n   * ```\n   *\n   * The parameters can be specified using any number notation (decimal, hex, binary, etc.).\n   * Therefore, the code below is equivalent to the code above:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(66, [1, 2, 3, 4, 5]);\n   * ```\n   *\n   * The above code sends the byte values 1, 2, 3, 4 and 5 to Korg devices (hex 42 is the same as\n   * decimal 66).\n   *\n   * Some manufacturers are identified using 3 bytes. In this case, you would use a 3-position array\n   * as the first parameter. For example, to send the same sysex message to a\n   * *Native Instruments* device:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex([0x00, 0x21, 0x09], [0x1, 0x2, 0x3, 0x4, 0x5]);\n   * ```\n   * There is no limit for the length of the data array. However, it is generally suggested to keep\n   * system exclusive messages to 64Kb or less.\n   *\n   * @param manufacturer {number|number[]} An unsigned integer or an array of three unsigned\n   * integers between 0 and 127 that identify the targeted manufacturer. The *MIDI Manufacturers\n   * Association* maintains a full list of\n   * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers)\n   * .\n   *\n   * @param {number[]|Uint8Array} [data=[]] A Uint8Array or an array of unsigned integers between 0\n   * and 127. This is the data you wish to transfer.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {DOMException} Failed to execute 'send' on 'MIDIOutput': System exclusive message is\n   * not allowed.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index x is greater\n   * than 0xFF.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendSysex(manufacturer, data= [], options = {}) {\n\n    manufacturer = [].concat(manufacturer);\n\n    // Check if data is Uint8Array\n    if (data instanceof Uint8Array) {\n      const merged = new Uint8Array(1 + manufacturer.length + data.length + 1);\n      merged[0] = WebMidi.MIDI_SYSTEM_MESSAGES.sysex;\n      merged.set(Uint8Array.from(manufacturer), 1);\n      merged.set(data, 1 + manufacturer.length);\n      merged[merged.length - 1] = WebMidi.MIDI_SYSTEM_MESSAGES.sysexend;\n      this.send(merged, {time: options.time});\n    } else {\n      const merged = manufacturer.concat(data, WebMidi.MIDI_SYSTEM_MESSAGES.sysexend);\n      this.send([WebMidi.MIDI_SYSTEM_MESSAGES.sysex].concat(merged), {time: options.time});\n    }\n\n    return this;\n\n  };\n\n  /**\n   * Clears all messages that have been queued but not yet delivered.\n   *\n   * Warning: this method has been defined in the specification but has not been implemented yet. As\n   * soon as browsers implement it, it will work.\n   *\n   * You can check out the current status of this feature for Chromium (Chrome) here:\n   * https://bugs.chromium.org/p/chromium/issues/detail?id=471798\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  clear() {\n\n    if (this._midiOutput.clear) {\n\n      this._midiOutput.clear();\n\n    } else {\n\n      if (WebMidi.validation) {\n        console.warn(\n          \"The 'clear()' method has not yet been implemented in your environment.\"\n        );\n      }\n\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **timecode quarter frame** message. Please note that no processing is being done\n   * on the data. It is up to the developer to format the data according to the\n   * [MIDI Timecode](https://en.wikipedia.org/wiki/MIDI_timecode) format.\n   *\n   * @param value {number} The quarter frame message content (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendTimecodeQuarterFrame(value, options = {}) {\n\n    if (WebMidi.validation) {\n      value = parseInt(value);\n      if (isNaN(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The value must be an integer between 0 and 127.\");\n      }\n    }\n\n    this.send(\n      [\n        WebMidi.MIDI_SYSTEM_MESSAGES.timecode,\n        value\n      ],\n      {time: options.time}\n    );\n\n    return this;\n\n  };\n\n  /**\n   * Sends a **ong position** MIDI message. The value is expressed in MIDI beats (between 0 and\n   * 16383) which are 16th note. Position 0 is always the start of the song.\n   *\n   * @param [value=0] {number} The MIDI beat to cue to (integer between 0 and 16383).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setSongPosition(value, options = {}) {\n\n    value = Math.floor(value) || 0;\n\n    var msb = (value >> 7) & 0x7F;\n    var lsb = value & 0x7F;\n\n    this.send(\n      [\n        WebMidi.MIDI_SYSTEM_MESSAGES.songposition,\n        msb,\n        lsb\n      ],\n      {time: options.time}\n    );\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendSongPosition(value, options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendSongPosition() method has been deprecated. Use setSongPosition() instead.\"\n      );\n    }\n\n    return this.setSongPosition(value, options);\n\n  }\n\n  /**\n   * Sends a **song select** MIDI message.\n   *\n   * **Note**: since version 3.0, the song number is an integer between 1 and 128. In versions 1.0\n   * and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices that\n   * use a numbering scheme starting at 1.\n   *\n   * @param value {number} The number of the song to select (integer between 1 and 128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws The song number must be between 1 and 128.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setSong(value, options = {}) {\n\n    if (WebMidi.validation) {\n\n      value = parseInt(value);\n\n      if (isNaN(value) || !(value >= 1 && value <= 128)) {\n        throw new RangeError(\"The program value must be between 1 and 128\");\n      }\n\n    }\n\n    this.send(\n      [\n        WebMidi.MIDI_SYSTEM_MESSAGES.songselect,\n        value\n      ],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendSongSelect(value, options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendSongSelect() method has been deprecated. Use setSong() instead.\"\n      );\n    }\n\n    return this.setSong(value, options);\n\n  }\n\n  /**\n   * Sends a MIDI **tune request** real-time message.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendTuneRequest(options = {}) {\n\n    this.send(\n      [WebMidi.MIDI_SYSTEM_MESSAGES.tunerequest],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **clock* real-time message. According to the standard, there are 24 MIDI Clocks\n   * for every quarter note.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendClock(options = {}) {\n\n    this.send(\n      [WebMidi.MIDI_SYSTEM_MESSAGES.clock],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **start** real-time message. A MIDI Start message starts the playback of the current\n   * song at beat 0. To start playback elsewhere in the song, use the\n   * [sendContinue()]{@link Output#sendContinue} method.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendStart(options = {}) {\n\n    this.send(\n      [WebMidi.MIDI_SYSTEM_MESSAGES.start],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **continue** real-time message. This resumes song playback where it was previously\n   * stopped or where it was last cued with a song position message. To start playback from the\n   * start, use the [sendStart()]{@link Output#sendStart}` method.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendContinue(options = {}) {\n\n    this.send(\n      [WebMidi.MIDI_SYSTEM_MESSAGES.continue],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **stop** real-time message. This tells the device connected to this output to stop\n   * playback immediately (or at the scheduled time).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendStop(options = {}) {\n\n    this.send(\n      [WebMidi.MIDI_SYSTEM_MESSAGES.stop],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **active sensing** real-time message. This tells the device connected to this port\n   * that the connection is still good. Active sensing messages should be sent every 300 ms if there\n   * was no other activity on the MIDI port.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendActiveSensing(options = {}) {\n\n    this.send(\n      [WebMidi.MIDI_SYSTEM_MESSAGES.activesensing],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **reset** real-time message. This tells the device connected to this output that it\n   * should reset itself to a default state.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendReset(options = {}) {\n\n    this.send(\n      [WebMidi.MIDI_SYSTEM_MESSAGES.reset],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendTuningRequest(options = {}) {\n\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead.\"\n      );\n    }\n\n    return this.sendTuneRequest(options);\n\n  }\n\n  /**\n   * Sends a MIDI **key aftertouch** message to the specified channel(s) at the scheduled time. This\n   * is a key-specific aftertouch. For a channel-wide aftertouch message, use\n   * [setChannelAftertouch()]{@link Output#setChannelAftertouch}.\n   *\n   * @param note {number|string|Array}  The note for which you are sending an aftertouch value. The\n   * notes can be specified in one of two ways. The first way is by using the MIDI note number (an\n   * integer between 0 and 127). The second way is by using the note name followed by the octave\n   * (C3, G#4, F-1, Db7). The octave range should be between -1 and 9. The lowest note is C-1 (MIDI\n   * note number 0) and the highest note is G9 (MIDI note number 127). It is also possible to use\n   * an array of note names and/or numbers.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setKeyAftertouch(note, pressure, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(pressure) || Number.isInteger(pressure) || pressure === \"all\") {\n        let channels = pressure;\n        pressure = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setKeyAftertouch(note, pressure, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendKeyAftertouch(note, channel, pressure, options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendKeyAftertouch() method has been deprecated. Use setKeyAftertouch() instead.\"\n      );\n    }\n\n    options.channels = channel;\n    return this.setKeyAftertouch(note, pressure, options);\n\n  }\n\n  /**\n   * Sends a MIDI **control change** message to the specified channel(s) at the scheduled time. The\n   * control change message to send can be specified numerically (0-127) or by using one of the\n   * following common names:\n   *\n   *  * `bankselectcoarse` (#0)\n   *  * `modulationwheelcoarse` (#1)\n   *  * `breathcontrollercoarse` (#2)\n   *  * `footcontrollercoarse` (#4)\n   *  * `portamentotimecoarse` (#5)\n   *  * `dataentrycoarse` (#6)\n   *  * `volumecoarse` (#7)\n   *  * `balancecoarse` (#8)\n   *  * `pancoarse` (#10)\n   *  * `expressioncoarse` (#11)\n   *  * `effectcontrol1coarse` (#12)\n   *  * `effectcontrol2coarse` (#13)\n   *  * `generalpurposeslider1` (#16)\n   *  * `generalpurposeslider2` (#17)\n   *  * `generalpurposeslider3` (#18)\n   *  * `generalpurposeslider4` (#19)\n   *  * `bankselectfine` (#32)\n   *  * `modulationwheelfine` (#33)\n   *  * `breathcontrollerfine` (#34)\n   *  * `footcontrollerfine` (#36)\n   *  * `portamentotimefine` (#37)\n   *  * `dataentryfine` (#38)\n   *  * `volumefine` (#39)\n   *  * `balancefine` (#40)\n   *  * `panfine` (#42)\n   *  * `expressionfine` (#43)\n   *  * `effectcontrol1fine` (#44)\n   *  * `effectcontrol2fine` (#45)\n   *  * `holdpedal` (#64)\n   *  * `portamento` (#65)\n   *  * `sustenutopedal` (#66)\n   *  * `softpedal` (#67)\n   *  * `legatopedal` (#68)\n   *  * `hold2pedal` (#69)\n   *  * `soundvariation` (#70)\n   *  * `resonance` (#71)\n   *  * `soundreleasetime` (#72)\n   *  * `soundattacktime` (#73)\n   *  * `brightness` (#74)\n   *  * `soundcontrol6` (#75)\n   *  * `soundcontrol7` (#76)\n   *  * `soundcontrol8` (#77)\n   *  * `soundcontrol9` (#78)\n   *  * `soundcontrol10` (#79)\n   *  * `generalpurposebutton1` (#80)\n   *  * `generalpurposebutton2` (#81)\n   *  * `generalpurposebutton3` (#82)\n   *  * `generalpurposebutton4` (#83)\n   *  * `reverblevel` (#91)\n   *  * `tremololevel` (#92)\n   *  * `choruslevel` (#93)\n   *  * `celestelevel` (#94)\n   *  * `phaserlevel` (#95)\n   *  * `databuttonincrement` (#96)\n   *  * `databuttondecrement` (#97)\n   *  * `nonregisteredparametercoarse` (#98)\n   *  * `nonregisteredparameterfine` (#99)\n   *  * `registeredparametercoarse` (#100)\n   *  * `registeredparameterfine` (#101)\n   *\n   *  * `allsoundoff` (#120)\n   *  * `resetallcontrollers` (#121)\n   *  * `localcontrol` (#122)\n   *  * `allnotesoff` (#123)\n   *  * `omnimodeoff` (#124)\n   *  * `omnimodeon` (#125)\n   *  * `monomodeon` (#126)\n   *  * `polymodeon` (#127)\n   *\n   * Note: as you can see above, not all control change message have a matching common name. This\n   * does not mean you cannot use the others. It simply means you will need to use their number\n   * (0-127) instead of their name. While you can still use them, numbers 120 to 127 are usually\n   * reserved for *channel mode* messages. See [sendChannelMode()]{@link Output#sendChannelMode}\n   * method for more info.\n   *\n   * To view a list of all available `control change` messages, please consult \"Table 3 - Control\n   * Change Messages\" from the [MIDI Messages](\n   * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)\n   * specification.\n   *\n   * @param controller {number|string} The MIDI controller name or number (0-127).\n   *\n   * @param [value=0] {number} The value to send (0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 127.\n   * @throws {RangeError} Invalid controller name.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendControlChange(controller, value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendControlChange(controller, value, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a pitch bend range message to the specified channel(s) at the scheduled time so that they\n   * adjust the range used by their pitch bend lever. The range is specified by using the\n   * `semitones` and `cents` parameters. For example, setting the `semitones` parameter to `12`\n   * means that the pitch bend range will be 12 semitones above and below the nominal pitch.\n   *\n   * @param semitones {number} The desired adjustment value in semitones (between 0 and 127). While\n   * nothing imposes that in the specification, it is very common for manufacturers to limit the\n   * range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127.\n   * @throws {RangeError} The lsb value must be between 0 and 127.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setPitchBendRange(semitones, cents, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setPitchBendRange(semitones, cents, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data (msb, lsb) that each can go from 0 to 127.\n   *\n   * MIDI\n   * [registered parameters]\n   * (https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n   * limited number of them. Here are the original registered parameters with the identifier that\n   * can be used as the first parameter of this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *\n   * Note that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * Another set of extra parameters have been later added for 3D sound controllers. They are:\n   *\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {string|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n   * registered parameter.\n   *\n   * @param [data=[]] {number|number[]} A single integer or an array of integers with a maximum\n   * length of 2 specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  setRegisteredParameter(parameter, data, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setRegisteredParameter(parameter, data, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel aftertouch** message to the specified channel(s). For key-specific\n   * aftertouch, you should instead use [setKeyAftertouch()]{@link Output#setKeyAftertouch}.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   * @since 3.0.0\n   */\n  setChannelAftertouch(pressure, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setChannelAftertouch(pressure, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendChannelAftertouch(pressure, channel, options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendChannelAftertouch() method has been deprecated. Use setChannelAftertouch().\"\n      );\n    }\n\n    options.channels = channel;\n    return this.setChannelAftertouch(pressure, options);\n\n  }\n\n  /**\n   * Sends a MIDI **pitch bend** message to the specified channel(s) at the scheduled time.\n   *\n   * @param {number|number[]} value The intensity of the bend (between -1.0 and 1.0). A value of\n   * zero means no bend. The resulting bend is relative to the pitch bend range that has been\n   * defined. The range can be set with [setPitchBendRange()]{@link OutputChannel#setPitchBendRange}\n   * . So, for example, if the pitch bend range has been set to 12 semitones, using a bend value of\n   * -1 will bend the note 1 octave below its nominal value.\n   *\n   * If an invalid value is specified, the nearest valid value will be used instead.\n   *\n   * If the `rawValue` option is set to `true`, the intensity of the bend can be defined by either\n   * using a single integer between 0 and 127 (MSB) or an array of two integers between 0 and 127\n   * representing, respectively, the MSB (most significant byte) and the LSB (least significant\n   * byte). The MSB is expressed in semitones with `64` meaning no bend. A value lower than `64`\n   * bends downwards while a value higher than `64` bends upwards. The LSB is expressed in cents\n   * (1/100 of a semitone). An LSB of `64` also means no bend.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered as a float between -1.0 and 1.0 (default) or as raw integer between 0 and 127 (or\n   * an array of 2 integers if using both MSB and LSB).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setPitchBend(value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setPitchBend(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendPitchBend(bend, channel, options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendPitchBend() method has been deprecated. Use setPitchBend() instead.\"\n      );\n    }\n\n    options.channels = channel;\n    return this.setPitchBend(bend, options);\n\n  }\n\n  /**\n   * Sends a MIDI **program change** message to the specified channel(s) at the scheduled time.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param [program=1] {number} The MIDI patch (program) number (1-128)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n   * than 0xFF.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setProgram(program, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setProgram(program, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendProgramChange(program, channel, options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendProgramChange() method has been deprecated. Use setProgram() instead.\"\n      );\n    }\n\n    options.channels = channel;\n    return this.setProgram(program, options);\n\n  }\n\n  /**\n   * Sends a **modulation depth range** message to the specified channel(s) so that they adjust the\n   * depth of their modulation wheel's range. The range can be specified with the `semitones`\n   * parameter, the `cents` parameter or by specifying both parameters at the same time.\n   *\n   * @param [semitones=0] {number} The desired adjustment value in semitones (integer between\n   * 0 and 127).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127\n   * @throws {RangeError} The lsb value must be between 0 and 127\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setModulationRange(semitones, cents, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setModulationRange(semitones, cents, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a master tuning message to the specified channel(s). The value is decimal and must be\n   * larger than -65 semitones and smaller than 64 semitones.\n   *\n   * Because of the way the MIDI specification works, the decimal portion of the value will be\n   * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n   * a **Master Fine Tuning** RPN messages.\n   *\n   * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setMasterTuning(value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setMasterTuning(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning program (1-128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 1 and 128.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setTuningProgram(value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setTuningProgram(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the bank number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning bank (1-128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 1 and 128.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setTuningBank(value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setTuningBank(value, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a MIDI **channel mode** message to the specified channel(s). The channel mode message to\n   * send can be specified numerically or by using one of the following common names:\n   *\n   *   * `\"allsoundoff\"` (#120)\n   *   * `\"resetallcontrollers\"` (#121)\n   *   * `\"localcontrol\"` (#122)\n   *   * `\"allnotesoff\"` (#123)\n   *   * `\"omnimodeoff\"` (#124)\n   *   * `\"omnimodeon\"` (#125)\n   *   * `\"monomodeon\"` (#126)\n   *   * `\"polymodeon\"` (#127)\n   *\n   * It should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may\n   * require a value that's not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * To make it easier, all channel mode messages have a matching helper method:\n   *\n   *   - [turnSoundOff()]{@link OutputChannel#turnSoundOff}\n   *   - [resetAllControllers()]{@link OutputChannel#resetAllControllers}\n   *   - [setLocalControl()]{@link OutputChannel#turnSoundOff}\n   *   - [turnNotesOff()]{@link OutputChannel#turnNotesOff}\n   *   - [setOmniMode()]{@link OutputChannel#setOmniMode}\n   *   - [setPolyphonicMode()]{@link OutputChannel#setPolyphonicMode}\n   *\n   * @param command {number|string} The numerical identifier of the channel mode message (integer\n   * between 120-127) or its name as a string.\n   *\n   * @param [value] {number} The value to send (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   */\n  sendChannelMode(command, value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendChannelMode(command, value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n   * channel but will not prevent new sounds from being triggered.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   *\n   * @since 3.0.0\n   */\n  turnSoundOff(options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].turnSoundOff(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **all notes off** channel mode message. This will make all currently playing notes\n   * fade out just as if their key had been released. This is different from the\n   * [turnSoundOff()]{@link Output#turnSoundOff} method which mutes all sounds immediately.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   *\n   * @since 3.0.0\n   */\n  turnNotesOff(options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].turnNotesOff(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n   * the pitch bend, to their default value.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   */\n  resetAllControllers(options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].resetAllControllers(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the polyphonic mode. In `\"poly\"` mode (usually the default), multiple notes can be played\n   * and heard at the same time. In `\"mono\"` mode, only one note will be heard at once even if\n   * multiple notes are being played.\n   *\n   * @param mode {string} The mode to use: `\"mono\"` or `\"poly\"`.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setPolyphonicMode(mode, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setPolyphonicMode(mode, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n   * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n   * its out port.\n   *\n   * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n   * (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setLocalControl(state, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setLocalControl(state, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets OMNI mode to `\"on\"` or `\"off\"` for the specified channel(s). MIDI's OMNI mode causes the\n   * instrument to respond to messages from all channels.\n   *\n   * It should be noted that support for OMNI mode is not as common as it used to be.\n   *\n   * @param [state] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setOmniMode(state, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setOmniMode(state, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets a non-registered parameter to the specified value. The NRPN is selected by passing in a\n   * two-position array specifying the values of the two control bytes. The value is specified by\n   * passing in a single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you\n   * would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].setNonRegisteredParameter([1, 8], 123);\n   * ```\n   *\n   * Obviously, you should select a channel so the message is not sent to all channels. For\n   * instance, to send to channel 1 of the first output port, you would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].setNonRegisteredParameter([1, 8], 123, 1);\n   * ```\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was 10, you could use:\n   *\n   * ```js\n   * WebMidi.outputs[0].setNonRegisteredParameter([2, 63], [0, 10], [1]);\n   * ```\n   *\n   * For further implementation details, refer to the manufacturer\"s documentation.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes (0x63,\n   * 0x62) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The control value must be between 0 and 127.\n   * @throws {RangeError} The msb value must be between 0 and 127\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  setNonRegisteredParameter(parameter, data, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setNonRegisteredParameter(parameter, data, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this method:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  incrementRegisteredParameter(parameter, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].incrementRegisteredParameter(parameter, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this method:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter\"s name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified parameter is not available.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  decrementRegisteredParameter(parameter, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].decrementRegisteredParameter(parameter, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified notes on the specified channel(s). The first\n   * parameter is the note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   *  The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the release velocity defined in the {@link Note} objects has\n   * precedence over the one specified via the method's `options` parameter.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {boolean} [options.rawValue=false] Controls whether the release velocity is set using\n   * integers between `0` and `127` (`true`) or a decimal number between `0` and `1` (`false`,\n   * default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNoteOff(note, options= {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendNoteOff(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * This is an alias to the [sendNoteOff()]{@link Output#sendNoteOff} method.\n   *\n   * @see {@link Output#sendNoteOff}\n   *\n   * @param note\n   * @param options\n   * @returns {Output}\n   */\n  stopNote(note, options) {\n    return this.sendNoteOff(note, options);\n  }\n\n  /**\n   * Plays a note or an array of notes on one or more channels of this output. The first parameter\n   * is the note to play. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   * The `playNote()` method sends a **note on** MIDI message for all specified notes on all\n   * specified channels. If no channels are specified, it will send to all channels. If a `duration`\n   * is set in the `options` parameter or in the {@link Note} object's\n   * [duration]{@link Note#duration} property, it will also schedule a **note off** message to end\n   * the note after said duration. If no `duration` is set, the note will simply play until a\n   * matching **note off** message is sent with [stopNote()]{@link Output#stopNote} or\n   * [sendNoteOff()]{@link Output#sendNoteOff}.\n   *\n   * The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the durations and velocities defined in the {@link Note}\n   * objects have precedence over the ones specified via the method's `options` parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to play the note on. The special value `\"all\"` can\n   * also be used to use all channels (default).\n   *\n   * @param {number} [options.duration=undefined] The number of milliseconds (integer) after which a\n   * **note off** message will be scheduled. If left undefined, only a **note on** message is sent.\n   *\n   * @param {boolean} [options.rawValue=false] Controls whether the attack and release velocities\n   * are set using integers between `0` and `127` (`true`) or a decimal number between `0` and `1`\n   * (`false`, default).\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   * This is only used with the **note off** event triggered when `options.duration` is set.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The attack velocity to use when playing the note (between\n   * `0` and `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  playNote(note, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy-compatibility warnings\n      if (options.rawVelocity) {\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' instead.\");\n      }\n\n      if (options.velocity) {\n        console.warn(\"The 'velocity' option is deprecated. Use 'velocity' instead.\");\n      }\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].playNote(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note on** message for the specified notes on the specified channel(s). The first\n   * parameter is the note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the attack velocity defined in the {@link Note} objects has\n   * precedence over the one specified via the method's `options` parameter. Also, the `duration` is\n   * ignored. If you want to also send a **note off** message, use the\n   * [playNote()]{@link Output#playNote} method instead.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {boolean} [options.rawValue=false] Controls whether the attack velocity is set using\n   * integers between `0` and `127` (`true`) or a decimal number between `0` and `1` (`false`,\n   * default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNoteOn(note, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendNoteOn(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Name of the MIDI output\n   *\n   * @type {string}\n   * @readonly\n   */\n  get name() {\n    return this._midiOutput.name;\n  }\n\n  /**\n   * ID string of the MIDI output. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiOutput.id;\n  }\n\n  /**\n   * Output port's connection state: `\"pending\"`, `\"open\"` or `\"closed\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiOutput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this output port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiOutput.manufacturer;\n  }\n\n  /**\n   * State of the output port: `\"connected\"` or `\"disconnected\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiOutput.state;\n  }\n\n  /**\n   * Type of the output port (`\"output\"`)\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiOutput.type;\n  }\n\n  /**\n   * An integer to offset the octave of outgoing notes. By default, middle C (MIDI note number 60)\n   * is placed on the 4th octave (C4).\n   *\n   * Note that this value is combined with the global offset value defined on the `WebMidi` object\n   * (if any).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n}\n","import {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/**\n * The `Message` class represents a single MIDI message. It has several properties that make it\n * easy to make sense of the binaru data it contains.\n *\n * @param {Uint8Array} data The raw data of the MIDI message as a Uint8Array of integers between 0\n * and 255.\n *\n * @since 3.0.0\n */\nexport class Message {\n\n  constructor(data) {\n\n    /**\n     * A Uint8Array containing the bytes of the MIDI message. Each byte is an integer between 0 and\n     * 255.\n     *\n     * @type {Uint8Array}\n     * @readonly\n     */\n    this.rawData = data;\n\n    /**\n     * An array containing the bytes of the MIDI message. Each byte is an integer is between 0 and\n     * 255.\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.data = Array.from(this.rawData);\n\n    /**\n     * The MIDI status byte of the message as an integer between 0 and 255.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.statusByte = this.rawData[0];\n\n    /**\n     * A Uint8Array of the data byte(s) of the MIDI message. When the message is a system exclusive\n     * message (sysex), `rawDataBytes` explicitly excludes the manufacturer ID and the sysex end\n     * byte so only the actual data is included.\n     *\n     * @type {Uint8Array}\n     * @readonly\n     */\n    this.rawDataBytes = this.rawData.slice(1);\n\n    /**\n     * An array of the the data byte(s) of the MIDI message. When the message is a system exclusive\n     * message (sysex), `dataBytes` explicitly excludes the manufacturer ID and the sysex end\n     * byte so only the actual data is included.\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.dataBytes = this.data.slice(1);\n\n    /**\n     * A boolean indicating whether the MIDI message is a channel-specific message.\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    this.isChannelMessage = false;\n\n    /**\n     * A boolean indicating whether the MIDI message is a system message (not specific to a\n     * channel).\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    this.isSystemMessage = false;\n\n    /**\n     * An integer identifying the MIDI command. For channel-specific messages, the value will be\n     * between 8 and 14. For system messages, the value will be between 240 and 255.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.command = undefined;\n\n    /**\n     * The MIDI channel number (1-16) that the message is targeting. This is only for\n     * channel-specific messages. For system messages, this will be left undefined.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.channel = undefined;\n\n    /**\n     * When the message is a system exclusive message (sysex), this property contains an array with\n     * either 1 or 3 entries that identify the manufacturer targeted by the message.\n     *\n     * To know how to translate these entries into manufacturer names, check out the official list:\n     * https://www.midi.org/specifications-old/item/manufacturer-id-numbers\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.manufacturerId = undefined;\n\n    // Assign values to property that vary according to whether they are channel-specific or system\n    if (this.statusByte < 240) {\n      this.isChannelMessage = true;\n      this.command = this.statusByte >> 4;\n      this.channel = (this.statusByte & 0b00001111) + 1;\n    } else {\n      this.isSystemMessage = true;\n      this.command = this.statusByte;\n    }\n\n    // Assign type (depending in whether the message is channel-specific or system)\n    if (this.isChannelMessage) {\n      this.type = Utilities.getPropertyByValue(WebMidi.MIDI_CHANNEL_MESSAGES, this.command);\n    } else if (this.isSystemMessage) {\n      this.type = Utilities.getPropertyByValue(WebMidi.MIDI_SYSTEM_MESSAGES, this.command);\n    }\n\n    // When the message is a sysex message, we add a manufacturer property and strip out the id from\n    // dataBytes and rawDataBytes.\n    if (this.statusByte === WebMidi.MIDI_SYSTEM_MESSAGES.sysex) {\n\n      if (this.dataBytes[0] === 0) {\n        this.manufacturerId = this.dataBytes.slice(0, 3);\n        this.dataBytes = this.dataBytes.slice(3, this.rawDataBytes.length - 1);\n        this.rawDataBytes = this.rawDataBytes.slice(3, this.rawDataBytes.length - 1);\n      } else {\n        this.manufacturerId = [this.dataBytes[0]];\n        this.dataBytes = this.dataBytes.slice(1, this.dataBytes.length - 1);\n        this.rawDataBytes = this.rawDataBytes.slice(1, this.rawDataBytes.length - 1);\n      }\n\n    }\n\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {Input} from \"./Input.js\";\nimport {Output} from \"./Output.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/*START-NODE.JS*/\n// This block of code is only relevant on Node.js and causes issues with bundlers (such as Webpack)\n// and server-side rendering. This is why it is explicitly being stripped off for the IIFE and ESM\n// distributions.\nglobal[\"performance\"] = require(\"perf_hooks\").performance;\nglobal[\"navigator\"] = require(\"jzz\");\n/*END-NODE.JS*/\n\n/**\n * The `WebMidi` object makes it easier to work with the Web MIDI API. Basically, it simplifies\n * sending outgoing MIDI messages and reacting to incoming MIDI messages.\n *\n * When using the WebMidi.js library, the `WebMidi` class has already been instantiated for you.\n * If you use the **IIFE** version, you should simply use the global object called `WebMidi`. If you\n * use the **CJS** (CommonJS) or **ESM** (ES6 module) version, you get an already-instantiated\n * object. This means there is no need to instantiate a new `WebMidi` object directly.\n *\n * The `WebMidi` object extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [addListener()](https://djipco.github.io/djipevents/EventEmitter.html#addListener),\n * [removeListener()](https://djipco.github.io/djipevents/EventEmitter.html#removeListener),\n * [hasListener()](https://djipco.github.io/djipevents/EventEmitter.html#hasListener) and several\n * others.\n *\n * @fires WebMidi#connected\n * @fires WebMidi#disabled\n * @fires WebMidi#disconnected\n * @fires WebMidi#enabled\n * @fires WebMidi#midiaccessgranted\n *\n * @extends EventEmitter\n */\nclass WebMidi extends EventEmitter {\n\n  constructor() {\n\n    super();\n\n    /**\n     * Object containing system-wide default values that can be changed to customize how the library\n     * works.\n     *\n     * @type {Object}\n     *\n     * @property {object}  defaults.note - Default values relating to note\n     * @property {number}  defaults.note.attack - A number between 0 and 127 representing the\n     * default attack velocity of notes. Initial value is 64.\n     * @property {number}  defaults.note.release - A number between 0 and 127 representing the\n     * default release velocity of notes. Initial value is 64.\n     * @property {number}  defaults.note.duration - A number representing the default duration of\n     * notes (in seconds). Initial value is Infinity.\n     */\n    this.defaults = {\n      note: {\n        attack: Utilities.toNormalized(64),\n        release: Utilities.toNormalized(64),\n        duration: Infinity\n      }\n    };\n\n    /**\n     * The `MIDIAccess` instance used to talk to the Web MIDI API. This should not be used directly\n     * unless you know what you are doing.\n     *\n     * @type {?MIDIAccess}\n     * @readonly\n     */\n    this.interface = null;\n\n    /**\n     * Indicates whether argument validation and backwards-compatibility checks are performed\n     * throughout the WebMidi.js library for object methods and property setters.\n     *\n     * This is an advanced setting that should be used carefully. Setting `validation` to `false`\n     * improves performance but should only be done once the project has been thoroughly tested with\n     * validation turned on.\n     *\n     * @type {boolean}\n     */\n    this.validation = true;\n\n    /**\n     * Array of all {@link Input} objects\n     * @type {Input[]}\n     * @private\n     */\n    this._inputs = [];\n\n    /**\n     * Array of all {@link Output} objects\n     * @type {Output[]}\n     * @private\n     */\n    this._outputs = [];\n\n    /**\n     * Array of statechange events to process. These events must be parsed synchronously so they do\n     * not override each other.\n     *\n     * @type {string[]}\n     * @private\n     */\n    this._stateChangeQueue = [];\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n  }\n\n  /**\n   * Checks if the Web MIDI API is available in the current environment and then tries to connect to\n   * the host's MIDI subsystem. This is an asynchronous operation and it causes a security prompt to\n   * be displayed to the user.\n   *\n   * To enable the use of MIDI system exclusive messages, the `sysex` option should be set to\n   * `true`. However, under some environments (e.g. Jazz-Plugin), the `sysex` option is ignored\n   * and system exclusive messages are always enabled. You can check the\n   * [sysexEnabled]{@link WebMidi#sysexEnabled} property to confirm.\n   *\n   * To enable access to software synthesizers available on the host, you would set the `software`\n   * option to `true`. However, this option is only there to future-proof the library as support for\n   * software synths has not yet been implemented in any browser (as of September 2021).\n   *\n   * There are 3 ways to execute code after `WebMidi` has been enabled:\n   *\n   * - Pass a callback function in the `options`\n   * - Listen to the `enabled` event\n   * - Wait for the promise to resolve\n   *\n   * In order, this is what happens towards the end of the enabling process:\n   *\n   * 1. `midiaccessgranted` event is triggered\n   * 2. `connected` events are triggered (for each available input and output)\n   * 3. `enabled` event is triggered when WebMidi.js is ready\n   * 4. specified callback (if any) is executed\n   * 5. promise is resolved\n   *\n   * The promise is fulfilled with the WebMidi object.\n   *\n   * **Important note**: starting with Chrome v77, a page using Web MIDI API must be hosted on a\n   * secure origin (`https://`, `localhost` or `file:///`) and the user will always be prompted to\n   * authorize the operation (no matter if the `sysex` option is `true` or not).\n   *\n   * ##### Example\n   * ```js\n   * // Enabling WebMidi and using the promise\n   * WebMidi.enable().then(ports => {\n   *   console.log(\"WebMidi.js has been enabled!\");\n   *   console.log(\"Inputs: \", ports.inputs);\n   *   console.log(\"Outputs: \", ports.outputs);\n   * })\n   * ```\n   *\n   * @param [options] {Object}\n   *\n   * @param [options.callback] {function} A function to execute once the operation completes. This\n   * function will receive an `Error` object if enabling the Web MIDI API failed.\n   *\n   * @param [options.sysex=false] {boolean} Whether to enable MIDI system exclusive messages or not.\n   *\n   * @param [options.validation=true] {boolean} Whether to enable library-wide validation of method\n   * arguments and setter values. This is an advanced setting that should be used carefully. Setting\n   * `validation` to `false` improves performance but should only be done once the project has been\n   * thoroughly tested with validation turned on.\n   *\n   * @param [options.software=false] {boolean} Whether to request access to software synthesizers on\n   * the host system. This is part of the spec but has not yet been implemented by most browsers as\n   * of April 2020.\n   *\n   * @async\n   *\n   * @returns {Promise<Object>} The promise is fulfilled with the `WebMidi` object\n   *\n   * @throws Error The Web MIDI API is not supported in your environment.\n   * @throws Error Jazz-Plugin must be installed to use WebMIDIAPIShim.\n   */\n  async enable(options = {}, legacy = false) {\n\n    this.validation = (options.validation !== false);\n\n    if (this.validation) {\n      // Backwards-compatibility. Previous syntax was: enable(callback, sysex)\n      if (typeof options === \"function\") options = {callback: options, sysex: legacy};\n      if (legacy) options.sysex = true;\n    }\n\n    // If already enabled, trigger callback and resolve promise but to not dispatch events\n    if (this.enabled) {\n      if (typeof options.callback === \"function\") options.callback();\n      return Promise.resolve();\n    }\n\n    // The Jazz-Plugin takes a while to be available (even after the Window's 'load' event has been\n    // fired). Therefore, we wait a little while to give it time to finish loading (initiqted in\n    // constructor).\n    // if (!this.supported) {\n    //\n    //   await new Promise((resolve, reject) => {\n    //\n    //     const start = this.time;\n    //\n    //     const intervalID = setInterval(() => {\n    //\n    //       if (this.supported) {\n    //         clearInterval(intervalID);\n    //         resolve();\n    //       } else {\n    //         if (this.time > start + 1500) {\n    //           clearInterval(intervalID);\n    //           let error = new Error(\"The Web MIDI API is not available in your environment.\");\n    //           if (typeof options.callback === \"function\") options.callback(error);\n    //           reject(error);\n    //         }\n    //       }\n    //\n    //     }, 25);\n    //\n    //   });\n    //\n    // }\n\n    /**\n     * Event emitted when an error occurs trying to enable `WebMidi`\n     *\n     * @event WebMidi#error\n     * @type {Object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `error`\n     * @property {*} error Actual error that occurred\n     */\n    const errorEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"error\",\n      error: undefined\n    };\n\n    /**\n     * Event emitted once the MIDI interface has been successfully created.\n     *\n     * @event WebMidi#midiaccessgranted\n     * @type {Object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `midiaccessgranted`\n     */\n    const midiAccessGrantedEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"midiaccessgranted\"\n    };\n\n    /**\n     * Event emitted once `WebMidi` has been fully enabled\n     *\n     * @event WebMidi#enabled\n     * @type {Object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `enabled`\n     */\n    const enabledEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"enabled\"\n    };\n\n    // Request MIDI access\n    try {\n      this.interface = await navigator.requestMIDIAccess(\n        {sysex: options.sysex, software: options.software}\n      );\n    } catch(err) {\n      errorEvent.error = err;\n      this.emit(\"error\", errorEvent);\n      if (typeof options.callback === \"function\") options.callback(err);\n      return Promise.reject(err);\n    }\n\n    // Now that the Web MIDI API interface has been created, we trigger the 'midiaccessgranted' event.\n    // This allows the developer an occasion to assign listeners on 'connected' events.\n    this.emit(\"midiaccessgranted\", midiAccessGrantedEvent);\n\n    // We setup the statechange listener before creating the ports so that it properly catches the\n    // the ports' `connected` events\n    this.interface.onstatechange = this._onInterfaceStateChange.bind(this);\n\n    // Update inputs and outputs (this is where `Input` and `Output` objects are created).\n    try {\n      await this._updateInputsAndOutputs();\n    } catch (err) {\n      errorEvent.error = err;\n      this.emit(\"error\", errorEvent);\n      if (typeof options.callback === \"function\") options.callback(err);\n      return Promise.reject(err);\n    }\n\n    // If the ports are successfully created, we trigger the 'enabled' event\n    this.emit(\"enabled\", enabledEvent);\n\n    // Execute the callback (if any) and resolve the promise with an object containing inputs and\n    // outputs\n    if (typeof options.callback === \"function\") options.callback();\n\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * Completely disables `WebMidi.js` by unlinking the MIDI subsystem's interface and closing all\n   * {@link Input} and {@link Output} objects that may be available. This also means that listeners\n   * added to {@link Input} objects, {@link Output} objects or to `WebMidi` itself are also\n   * destroyed.\n   *\n   * @async\n   * @returns {Promise<void>}\n   *\n   * @throws Error The Web MIDI API is not supported by your environment.\n   *\n   * @since 2.0.0\n   */\n  async disable() {\n\n    return this._destroyInputsAndOutputs().then(() => {\n\n      if (typeof navigator.close === \"function\") navigator.close();\n\n      if (this.interface) this.interface.onstatechange = undefined;\n      this.interface = null; // also resets enabled, sysexEnabled\n\n      /**\n       * Event emitted once `WebMidi` has been successfully disabled.\n       *\n       * @event WebMidi#disabled\n       * @type {Object}\n       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {WebMidi} target The object that triggered the event\n       * @property {string} type `disabled`\n       */\n      let event = {\n        timestamp: this.time,\n        target: this,\n        type: \"disabled\"\n      };\n\n      // Finally, trigger the 'disabled' event and then remove all listeners.\n      this.emit(\"disabled\", event);\n      this.removeListener();\n\n    });\n\n  };\n\n  /**\n   * Returns the {@link Input} object that matches the specified ID string or `false` if no matching\n   * input is found. As per the Web MIDI API specification, IDs are strings (not integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the input. IDs can be viewed by looking at the\n   * [inputs]{@link WebMidi#inputs} array. Even though they sometimes look like integers, IDs are\n   * strings.\n   *\n   * @returns {Input|false} An {@link Input} object matching the specified ID string. If no matching\n   * input can be found, the method returns `false`.\n   *\n   * @throws Error WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputById(id) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!id) return false;\n    }\n\n    for (let i = 0; i < this.inputs.length; i++) {\n      if (this.inputs[i].id === id.toString()) return this.inputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the first {@link Input} object whose name **contains** the specified string. Note that\n   * the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [inputs]{@link WebMidi#inputs} array).\n   *\n   * @returns {Input|false} The {@link Input} that was found or `false` if no input contained the\n   * specified name.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputByName(name) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!name) return false;\n      name = name.toString();\n    }\n\n    for (let i = 0; i < this.inputs.length; i++) {\n      if (~this.inputs[i].name.indexOf(name)) return this.inputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the first {@link Output} object whose name **contains** the specified string. Note that\n   * the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [outputs]{@link WebMidi#outputs} array).\n   *\n   * @returns {Output|false} The {@link Output} that was found or `false` if no output matched the\n   * specified name.\n   *\n   * @throws Error WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputByName(name) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!name) return false;\n      name = name.toString();\n    }\n\n    for (let i = 0; i < this.outputs.length; i++) {\n      if (~this.outputs[i].name.indexOf(name)) return this.outputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the {@link Output} object that matches the specified ID string or `false` if no\n   * matching output is found. As per the Web MIDI API specification, IDs are strings (not\n   * integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the port. IDs can be viewed by looking at the\n   * [outputs]{@link WebMidi#outputs} array.\n   *\n   * @returns {Output|false} An {@link Output} object matching the specified ID string. If no\n   * matching output can be found, the method returns `false`.\n   *\n   * @throws Error WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputById(id) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!id) return false;\n    }\n\n    for (let i = 0; i < this.outputs.length; i++) {\n      if (this.outputs[i].id === id.toString()) return this.outputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.toNoteNumber() instead.\n   */\n  noteNameToNumber(name) {\n    if (this.validation) {\n      console.warn(\n        \"The noteNameToNumber() method is deprecated. Use \" +\n        \"Utilities.toNoteNumber() instead.\"\n      );\n    }\n    return Utilities.toNoteNumber(name, this.octaveOffset);\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0, use Utilities.getNoteDetails() instead.\n   */\n  getOctave(number) {\n\n    if (this.validation) {\n      console.warn(\"The getOctave()is deprecated. Use Utilities.getNoteDetails() instead\");\n      number = parseInt(number);\n    }\n\n    if (!isNaN(number) && number >= 0 && number <= 127) {\n      return Utilities.getNoteDetails(Utilities.offsetNumber(number, this.octaveOffset)).octave;\n    } else {\n      return false;\n    }\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0, use Utilities.sanitizeChannels() instead.\n   */\n  sanitizeChannels(channel) {\n\n    if (this.validation) {\n      console.warn(\"The sanitizeChannels() method has been moved to the utilities class.\");\n    }\n\n    return Utilities.sanitizeChannels(channel);\n\n    // let channels;\n    //\n    // if (this.validation) {\n    //\n    //   if (channel === \"all\") { // backwards-compatibility\n    //     channels = [\"all\"];\n    //   } else if (channel === \"none\") { // backwards-compatibility\n    //     return [];\n    //   }\n    //\n    // }\n    //\n    // if (!Array.isArray(channel)) {\n    //   channels = [channel];\n    // } else {\n    //   channels = channel;\n    // }\n    //\n    // // In order to preserve backwards-compatibility, we let this assignment as it is.\n    // if (channels.indexOf(\"all\") > -1) {\n    //   channels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    // }\n    //\n    // return channels\n    //   .map(function(ch) {\n    //     return parseInt(ch);\n    //   })\n    //   .filter(function(ch) {\n    //     return (ch >= 1 && ch <= 16);\n    //   });\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.sanitizeChannels() instead.\n   */\n  toMIDIChannels(channel) {\n\n    if (this.validation) {\n      console.warn(\n        \"The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead.\"\n      );\n    }\n\n    return Utilities.sanitizeChannels(channel);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.guessNoteNumber() instead.\n   */\n  guessNoteNumber(input) {\n\n    if (this.validation) {\n      console.warn(\n        \"The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead.\"\n      );\n    }\n\n    return Utilities.guessNoteNumber(input, this.octaveOffset);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.buildNoteArray() instead.\n   */\n  getValidNoteArray(notes, options = {}) {\n    if (this.validation) {\n      console.warn(\n        \"The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()\"\n      );\n    }\n    return Utilities.buildNoteArray(notes, options);\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.toTimestamp() instead.\n   */\n  convertToTimestamp(time) {\n\n    if (this.validation) {\n      console.warn(\n        \"The convertToTimestamp() method has been moved to Utilities.toTimestamp().\"\n      );\n    }\n\n    return Utilities.toTimestamp(time);\n\n  }\n\n  /**\n   * @return {Promise<void>}\n   * @private\n   */\n  async _destroyInputsAndOutputs() {\n\n    let promises = [];\n\n    this.inputs.forEach(input => promises.push(input.destroy()));\n    this.outputs.forEach(output => promises.push(output.destroy()));\n\n    return Promise.all(promises).then(() => {\n      this._inputs = [];\n      this._outputs = [];\n    });\n\n  }\n\n  /**\n   * @private\n   */\n  _onInterfaceStateChange(e) {\n\n    this._updateInputsAndOutputs();\n\n    /**\n     * Event emitted when an {@link Input} or {@link Output} becomes available. This event is\n     * typically fired whenever a MIDI device is plugged in. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#connected\n     * @type {Object}\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n     * (in milliseconds since the navigation start of the document).\n     * @property {string} type `connected`\n     * @property {Input|Output} target The {@link Input} or {@link Output} object that triggered the\n     * event.\n     */\n\n    /**\n     * Event emitted when an {@link Input} or {@link Output} becomes unavailable. This event is\n     * typically fired whenever a MIDI device is unplugged. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#disconnected\n     * @type {Object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {string} type `disconnected`\n     * @property {Object} target Object with properties describing the {@link Input} or {@Output}\n     * that triggered the event.\n     * @property {string} target.connection `\"closed\"`\n     * @property {string} target.id ID of the input\n     * @property {string} target.manufacturer Manufacturer of the device that provided the input\n     * @property {string} target.name Name of the device that provided the input\n     * @property {string} target.state `disconnected`\n     * @property {string} target.type `input` or `output`\n     */\n    let event = {\n      timestamp: e.timeStamp,\n      type: e.port.state\n    };\n\n    if (this.interface && e.port.state === \"connected\") {\n\n      if (e.port.type === \"output\") {\n        event.port = this.getOutputById(e.port.id); // legacy\n        event.target = event.port;\n      } else if (e.port.type === \"input\") {\n        event.port = this.getInputById(e.port.id); // legacy\n        event.target = event.port;\n      }\n\n    } else {\n\n      // It feels more logical to include a `target` property instead of a `port` property. This is\n      // the terminology used everywhere in the library.\n      event.port = {\n        connection: \"closed\",\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n\n      event.target = event.port;\n\n    }\n\n    this.emit(e.port.state, event);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputsAndOutputs() {\n\n    return Promise.all([\n      this._updateInputs(),\n      this._updateOutputs()\n    ]);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputs() {\n\n    // @todo: THIS DOES NOT WORK WHEN THE COMPUTER GOES TO SLEEP BECAUSE STATECHANGE EVENTS ARE\n    //  FIRED ONE AFER THE OTHER. ALSO NEEDS TO BE FIXED IN V2.5\n\n    let promises = [];\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = 0; i < this._inputs.length; i++) {\n\n      let remove = true;\n\n      let updated = this.interface.inputs.values();\n\n      for (let input = updated.next(); input && !input.done; input = updated.next()) {\n        if (this._inputs[i]._midiInput === input.value) {\n          remove = false;\n          break;\n        }\n      }\n\n      if (remove) this._inputs.splice(i, 1);\n\n    }\n\n    // Check for items to add in the existing inputs array because they just appeared in the MIDI\n    // back-end inputs list. We must check for the existence of this.interface because it might\n    // have been closed via WebMidi.disable().\n    this.interface && this.interface.inputs.forEach(nInput => {\n\n      let add = true;\n\n      for (let j = 0; j < this._inputs.length; j++) {\n        if (this._inputs[j]._midiInput === nInput) {\n          add = false;\n        }\n      }\n\n      if (add) {\n        let input = new Input(nInput);\n        this._inputs.push(input);\n        promises.push(input.open());\n      }\n\n    });\n\n    return Promise.all(promises);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateOutputs() {\n\n    let promises = [];\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = 0; i < this._outputs.length; i++) {\n\n      let remove = true;\n\n      let updated = this.interface.outputs.values();\n\n      for (let output = updated.next(); output && !output.done; output = updated.next()) {\n        if (this._outputs[i]._midiOutput === output.value) {\n          remove = false;\n          break;\n        }\n      }\n\n      if (remove) {\n        this._outputs[i].close();\n        this._outputs.splice(i, 1);\n      }\n\n    }\n\n    // Check for items to add in the existing inputs array because they just appeared in the MIDI\n    // back-end outputs list. We must check for the existence of this.interface because it might\n    // have been closed via WebMidi.disable().\n    this.interface && this.interface.outputs.forEach(nOutput => {\n\n      let add = true;\n\n      for (let j = 0; j < this._outputs.length; j++) {\n        if (this._outputs[j]._midiOutput === nOutput) {\n          add = false;\n        }\n      }\n\n      if (add) {\n        let output = new Output(nOutput);\n        this._outputs.push(output);\n        promises.push(output.open());\n      }\n\n    });\n\n    return Promise.all(promises);\n\n  };\n\n  // injectPluginMarkup(parent) {\n  //\n  //   // Silently ignore on Node.js\n  //   if (this.isNode) return;\n  //\n  //   // Default to <body> if no parent is specified\n  //   if (!(parent instanceof Element) && !(parent instanceof HTMLDocument)) {\n  //     parent = document.body;\n  //   }\n  //\n  //   // IE10 needs this:\n  //   // <meta http-equiv=\"X-UA-Compatible\" content=\"requiresActiveX=true\"/>\n  //\n  //   // Create markup and add to parent\n  //   const obj = document.createElement(\"object\");\n  //   obj.classid = \"CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90\"; // IE\n  //   if (!obj.isJazz) obj.type = \"audio/x-jazz\";                 // Standards-compliant\n  //   obj.style.visibility = \"hidden\";\n  //   obj.style.width = obj.style.height = \"0px\";\n  //   parent.appendChild(obj);\n  //\n  // }\n\n  /**\n   * Indicates whether access to the host's MIDI subsystem is active or not.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get enabled() {\n    return this.interface !== null;\n  }\n\n  /**\n   * An array of all currently available MIDI inputs.\n   *\n   * @readonly\n   * @type {Array}\n   */\n  get inputs() {\n    return this._inputs;\n  }\n\n  /**\n   * Indicates whether the current environment is Node.js or not. If you need to check if we are in\n   * browser, use isBrowser. In certain environments (such as Electron and NW.js) isNode and\n   * isBrowser can both be true at the same time.\n   * @type {boolean}\n   */\n  get isNode() {\n\n    return (Object.prototype.toString.call(\n      typeof process !== \"undefined\" ? process : 0\n    ) === \"[object process]\");\n\n    // Alternative way to try\n    // return typeof process !== \"undefined\" &&\n    //   process.versions != null &&\n    //   process.versions.node != null;\n\n  }\n\n  /**\n   * Indicates whether the current environment is a browser environment or not. If you need to check\n   * if we are in Node.js, use isNode. In certain environments (such as Electron and NW.js) isNode\n   * and isBrowser can both be true at the same time.\n   * @type {boolean}\n   */\n  get isBrowser() {\n    return typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n  }\n\n  /**\n   * An integer to offset the octave of notes received from external devices or sent to external\n   * devices.\n   *\n   * When a MIDI message comes in on an input channel the reported note name will be offset. For\n   * example, if the `octaveOffset` is set to `-1` and a **note on** message with MIDI number 60\n   * comes in, the note will be reported as C3 (instead of C4).\n   *\n   * By the same token, when `OutputChannel.playNote()` is called, the MIDI note number being sent\n   * will be offset. If `octaveOffset` is set to `-1`, the MIDI note number sent will be 72 (instead\n   * of 60).\n   *\n   * @type {number}\n   *\n   * @since 2.1\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * An array of all currently available MIDI outputs.\n   *\n   * @readonly\n   * @type {Array}\n   */\n  get outputs() {\n    return this._outputs;\n  }\n\n  /**\n   * Indicates whether the environment provides support for the Web MIDI API or not.\n   *\n   * **Note**: in environments that do not offer built-in MIDI support, this will report `true` if\n   * the `navigator.requestMIDIAccess` function is available. For example, if you have installed\n   * WebMIDIAPIShim.js but no plugin, this property will be `true` even though actual support might\n   * not be there.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get supported() {\n    return (typeof navigator !== \"undefined\" && navigator.requestMIDIAccess);\n  }\n\n  /**\n   * Indicates whether MIDI system exclusive messages have been activated when WebMidi.js was\n   * enabled via the `enable()` method.\n   *\n   * @readonly\n   * @type Boolean\n   */\n  get sysexEnabled() {\n    return !!(this.interface && this.interface.sysexEnabled);\n  }\n\n  /**\n   * The elapsed time, in milliseconds, since the time\n   * [origin](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp#The_time_origin).\n   * Said simply, it is the number of milliseconds that passed since the page was loaded. Being a\n   * floating-point number, it has sub-millisecond accuracy. According to the\n   * [documentation](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp), the\n   * time should be accurate to 5 µs (microseconds). However, due to various constraints, the\n   * browser might only be accurate to one millisecond.\n   *\n   * @type {DOMHighResTimeStamp}\n   * @readonly\n   */\n  get time() {\n    return performance.now();\n  }\n\n  /**\n   * An array of channel-specific event names that can be listened to.\n   * @type {string[]}\n   */\n  get CHANNEL_EVENTS() {\n    return [\n      \"noteoff\",\n      \"controlchange\",\n      \"noteon\",\n      \"keyaftertouch\",\n      \"programchange\",\n      \"channelaftertouch\",\n      \"pitchbend\",\n\n      \"nrpndataentrycoarse\",\n      \"nrpndataentryfine\",\n      \"nrpndatabuttonincrement\",\n      \"nrpndatabuttondecrement\",\n\n      \"rpndataentrycoarse\",\n      \"rpndataentryfine\",\n      \"rpndatabuttonincrement\",\n      \"rpndatabuttondecrement\",\n\n      \"allnotesoff\",\n      \"allsoundoff\",\n      \"localcontrol\",\n      \"monomode\",\n      \"omnimode\",\n      \"resetallcontrollers\"\n    ];\n  }\n\n  /**\n   * Enum of all MIDI channel messages and their associated numerical value:\n   *\n   * - `noteoff`: 0x8 (8)\n   * - `noteon`: 0x9 (9)\n   * - `keyaftertouch`: 0xA (10)\n   * - `controlchange`: 0xB (11)\n   * - `nrpn`: 0xB (11)\n   * - `programchange`: 0xC (12)\n   * - `channelaftertouch`: 0xD (13)\n   * - `pitchbend`: 0xE (14)\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 3.0.0\n   */\n  get MIDI_CHANNEL_MESSAGES() {\n\n    return {\n      noteoff: 0x8,           // 8\n      noteon: 0x9,            // 9\n      keyaftertouch: 0xA,     // 10\n      controlchange: 0xB,     // 11\n      programchange: 0xC,     // 12\n      channelaftertouch: 0xD, // 13\n      pitchbend: 0xE          // 14\n    };\n\n  }\n\n  /**\n   * Enum of all valid MIDI system messages and matching numerical values. WebMidi.js also uses\n   * two custom messages.\n   *\n   * **System common messages**\n   * - `sysex`: 0xF0 (240)\n   * - `timecode`: 0xF1 (241)\n   * - `songposition`: 0xF2 (242)\n   * - `songselect`: 0xF3 (243)\n   * - `tunerequest`: 0xF6 (246)\n   * - `sysexend`: 0xF7 (247)\n   *\n   * The `sysexend` message is never actually received. It simply ends a sysex stream.\n   *\n   * **System real-time messages**\n   *\n   * - `clock`: 0xF8 (248)\n   * - `start`: 0xFA (250)\n   * - `continue`: 0xFB (251)\n   * - `stop`: 0xFC (252)\n   * - `activesensing`: 0xFE (254)\n   * - `reset`: 0xFF (255)\n   *\n   * Values 249 and 253 are actually relayed by the Web MIDI API but they do not serve a specific\n   * purpose. The\n   * [MIDI 1.0 spec](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n   * simply states that they are undefined/reserved.\n   *\n   * **Custom WebMidi.js messages**\n   *\n   * - `midimessage`: 0\n   * - `unknownsystemmessage`: -1\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 2.0.0\n   */\n  get MIDI_SYSTEM_MESSAGES() {\n\n    return {\n\n      // System common messages\n      sysex: 0xF0,            // 240\n      timecode: 0xF1,         // 241\n      songposition: 0xF2,     // 242\n      songselect: 0xF3,       // 243\n      tunerequest: 0xF6,      // 246\n      tuningrequest: 0xF6,    // for backwards-compatibility (deprecated in version 3.0)\n      sysexend: 0xF7,         // 247 (never actually received - simply ends a sysex)\n\n      // System real-time messages\n      clock: 0xF8,            // 248\n      start: 0xFA,            // 250\n      continue: 0xFB,         // 251\n      stop: 0xFC,             // 252\n      activesensing: 0xFE,    // 254\n      reset: 0xFF,            // 255\n\n      // Custom WebMidi.js messages\n      midimessage: 0,\n      unknownsystemmessage: -1\n\n    };\n\n  }\n\n  /**\n   * Enum of all channel mode messages and their associated numerical value:\n   *\n   * - `allsoundoff`: 120\n   * - `resetallcontrollers`: 121\n   * - `localcontrol`: 122\n   * - `allnotesoff`: 123\n   * - `omnimodeoff`: 124\n   * - `omnimodeon`: 125\n   * - `monomodeon`: 126\n   * - `polymodeon`: 127\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 2.0.0\n   */\n  get MIDI_CHANNEL_MODE_MESSAGES() {\n\n    return {\n      allsoundoff: 120,\n      resetallcontrollers: 121,\n      localcontrol: 122,\n      allnotesoff: 123,\n      omnimodeoff: 124,\n      omnimodeon: 125,\n      monomodeon: 126,\n      polymodeon: 127\n    };\n\n  }\n\n  /**\n   * Enum of most control change messages and their associated numerical value. Note that some\n   * control change numbers do not have a predefined purpose.\n   *\n   * - `bankselectcoarse`: 0\n   * - `modulationwheelcoarse`: 1\n   * - `breathcontrollercoarse`: 2\n   * - `footcontrollercoarse`: 4\n   * - `portamentotimecoarse`: 5\n   * - `dataentrycoarse`: 6\n   * - `volumecoarse`: 7\n   * - `balancecoarse`: 8\n   * - `pancoarse`: 10\n   * - `expressioncoarse`: 11\n   * - `effectcontrol1coarse`: 12\n   * - `effectcontrol2coarse`: 13\n   * - `generalpurposeslider1`: 16\n   * - `generalpurposeslider2`: 17\n   * - `generalpurposeslider3`: 18\n   * - `generalpurposeslider4`: 19\n   * - `bankselectfine`: 32\n   * - `modulationwheelfine`: 33\n   * - `breathcontrollerfine`: 34\n   * - `footcontrollerfine`: 36\n   * - `portamentotimefine`: 37\n   * - `dataentryfine`: 38\n   * - `volumefine`: 39\n   * - `balancefine`: 40\n   * - `panfine`: 42\n   * - `expressionfine`: 43\n   * - `effectcontrol1fine`: 44\n   * - `effectcontrol2fine`: 45\n   * - `holdpedal`: 64\n   * - `portamento`: 65\n   * - `sustenutopedal`: 66\n   * - `softpedal`: 67\n   * - `legatopedal`: 68\n   * - `hold2pedal`: 69\n   * - `soundvariation`: 70\n   * - `resonance`: 71\n   * - `soundreleasetime`: 72\n   * - `soundattacktime`: 73\n   * - `brightness`: 74\n   * - `soundcontrol6`: 75\n   * - `soundcontrol7`: 76\n   * - `soundcontrol8`:`77\n   * - `soundcontrol9`: 78\n   * - `soundcontrol10`: 79\n   * - `generalpurposebutton1`: 80\n   * - `generalpurposebutton2`: 81\n   * - `generalpurposebutton3`: 82\n   * - `generalpurposebutton4`: 83\n   * - `reverblevel`: 91\n   * - `tremololevel`: 92\n   * - `choruslevel`: 93\n   * - `celestelevel`: 94\n   * - `phaserlevel`: 95\n   * - `databuttonincrement`: 96\n   * - `databuttondecrement`: 97\n   * - `nonregisteredparametercoarse`: 98\n   * - `nonregisteredparameterfine`: 99\n   * - `registeredparametercoarse`: 100\n   * - `registeredparameterfine`: 101\n   *\n   * - `allsoundoff`: 120\n   * - `resetallcontrollers`: 121\n   * - `localcontrol`: 122\n   * - `allnotesoff`: 123\n   * - `omnimodeoff`: 124\n   * - `omnimodeon`: 125\n   * - `monomodeon`: 126\n   * - `polymodeon`: 127\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 2.0.0\n   */\n  get MIDI_CONTROL_CHANGE_MESSAGES() {\n\n    return {\n      bankselectcoarse: 0,\n      modulationwheelcoarse: 1,\n      breathcontrollercoarse: 2,\n      footcontrollercoarse: 4,\n      portamentotimecoarse: 5,\n      dataentrycoarse: 6,\n      volumecoarse: 7,\n      balancecoarse: 8,\n      pancoarse: 10,\n      expressioncoarse: 11,\n      effectcontrol1coarse: 12,\n      effectcontrol2coarse: 13,\n      generalpurposeslider1: 16,\n      generalpurposeslider2: 17,\n      generalpurposeslider3: 18,\n      generalpurposeslider4: 19,\n      bankselectfine: 32,\n      modulationwheelfine: 33,\n      breathcontrollerfine: 34,\n      footcontrollerfine: 36,\n      portamentotimefine: 37,\n      dataentryfine: 38,\n      volumefine: 39,\n      balancefine: 40,\n      panfine: 42,\n      expressionfine: 43,\n      effectcontrol1fine: 44,\n      effectcontrol2fine: 45,\n      holdpedal: 64,\n      portamento: 65,\n      sustenutopedal: 66,\n      softpedal: 67,\n      legatopedal: 68,\n      hold2pedal: 69,\n      soundvariation: 70,\n      resonance: 71,\n      soundreleasetime: 72,\n      soundattacktime: 73,\n      brightness: 74,\n      soundcontrol6: 75,\n      soundcontrol7: 76,\n      soundcontrol8: 77,\n      soundcontrol9: 78,\n      soundcontrol10: 79,\n      generalpurposebutton1: 80,\n      generalpurposebutton2: 81,\n      generalpurposebutton3: 82,\n      generalpurposebutton4: 83,\n      reverblevel: 91,\n      tremololevel: 92,\n      choruslevel: 93,\n      celestelevel: 94,\n      phaserlevel: 95,\n      databuttonincrement: 96,\n      databuttondecrement: 97,\n      nonregisteredparametercoarse: 98,\n      nonregisteredparameterfine: 99,\n      registeredparametercoarse: 100,\n      registeredparameterfine: 101,\n\n      allsoundoff: 120,\n      resetallcontrollers: 121,\n      localcontrol: 122,\n      allnotesoff: 123,\n      omnimodeoff: 124,\n      omnimodeon: 125,\n      monomodeon: 126,\n      polymodeon: 127\n    };\n\n  }\n\n  /**\n   * Array of valid events triggered at the interface level.\n   *\n   * @type {string[]}\n   * @readonly\n   */\n  get MIDI_INTERFACE_EVENTS() {\n    return [\"connected\", \"disconnected\"];\n  }\n\n  /**\n   * Enum of all registered parameters and their associated pair of numerical values. MIDI\n   * registered parameters extend the original list of control change messages. Currently, there are\n   * only a limited number of them:\n   *\n   * - `pitchbendrange`: [0x00, 0x00]\n   * - `channelfinetuning`: [0x00, 0x01]\n   * - `channelcoarsetuning`: [0x00, 0x02]\n   * - `tuningprogram`: [0x00, 0x03]\n   * - `tuningbank`: [0x00, 0x04]\n   * - `modulationrange`: [0x00, 0x05]\n   * - `azimuthangle`: [0x3D, 0x00]\n   * - `elevationangle`: [0x3D, 0x01]\n   * - `gain`: [0x3D, 0x02]\n   * - `distanceratio`: [0x3D, 0x03]\n   * - `maximumdistance`: [0x3D, 0x04]\n   * - `maximumdistancegain`: [0x3D, 0x05]\n   * - `referencedistanceratio`: [0x3D, 0x06]\n   * - `panspreadangle`: [0x3D, 0x07]\n   * - `rollangle`: [0x3D, 0x08]\n   *\n   * @enum {Object.<string, number[]>}\n   * @readonly\n   *\n   * @since 3.0.0\n   */\n  get MIDI_REGISTERED_PARAMETERS() {\n\n    return {\n      pitchbendrange: [0x00, 0x00],\n      channelfinetuning: [0x00, 0x01],\n      channelcoarsetuning: [0x00, 0x02],\n      tuningprogram: [0x00, 0x03],\n      tuningbank: [0x00, 0x04],\n\n      modulationrange: [0x00, 0x05],\n      azimuthangle: [0x3D, 0x00],\n      elevationangle: [0x3D, 0x01],\n      gain: [0x3D, 0x02],\n      distanceratio: [0x3D, 0x03],\n      maximumdistance: [0x3D, 0x04],\n      maximumdistancegain: [0x3D, 0x05],\n      referencedistanceratio: [0x3D, 0x06],\n      panspreadangle: [0x3D, 0x07],\n      rollangle: [0x3D, 0x08]\n    };\n\n  }\n\n  /**\n   * @deprecated since 3.0.0. Use WebMidi.MIDI_REGISTERED_PARAMETERS instead.\n   * @private\n   */\n  get MIDI_REGISTERED_PARAMETER() {\n    return this.MIDI_REGISTERED_PARAMETERS;\n  }\n\n  /**\n   * Array of standard note names\n   *\n   * @type {string[]}\n   * @readonly\n   */\n  get NOTES() {\n    return [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n  }\n\n}\n\n// Export singleton instance of WebMidi class. The 'constructor' is nulled so that it cannot be used\n// to instantiate a new WebMidi object or extend it. However, it is not freezed so it remains\n// extensible (properties can be added at will).\nconst wm = new WebMidi();\nwm.constructor = null;\nexport {wm as WebMidi};\n\nexport {Note} from \"./Note.js\";\nexport {Utilities} from \"./Utilities.js\";\nexport {Message} from \"./Message.js\";\n"],"names":["Note","constructor","value","options","duration","WebMidi","defaults","note","attack","release","undefined","this","rawAttack","Utilities","toNormalized","rawRelease","Number","isInteger","identifier","toNoteIdentifier","_name","_accidental","_octave","fragments","getNoteDetails","validation","Error","name","accidental","octave","toUpperCase","includes","toLowerCase","parseInt","isNaN","_duration","parseFloat","RangeError","_attack","_release","to7Bit","toNoteNumber","getOffsetNumber","octaveOffset","semitoneOffset","Math","min","max","number","utils","TypeError","result","C","D","E","F","G","A","B","startsWith","length","matches","match","sanitizeChannels","channel","channels","Array","isArray","indexOf","map","ch","filter","toTimestamp","time","parsed","substring","guessNoteNumber","input","output","String","trim","e","floor","NOTES","toString","buildNote","buildNoteArray","notes","forEach","push","Infinity","round","offsetNumber","getPropertyByValue","object","Object","keys","find","key","InputChannel","EventEmitter","_input","_number","_octaveOffset","_nrpnBuffer","_rpnBuffer","parameterNumberEventsEnabled","destroy","removeListener","_processMidiMessageEvent","event","assign","target","type","emit","_parseEventForStandardMessages","message","data1","dataBytes","data2","rawValue","velocity","rawVelocity","rawKey","controller","getCcNameByNumber","_parseChannelModeMessage","isRpnOrNrpnController","_parseEventForParameterNumber","data","list","MIDI_CONTROL_CHANGE_MESSAGES","nonregisteredparameterfine","registeredparameterfine","nonregisteredparametercoarse","registeredparametercoarse","dataentrycoarse","dataentryfine","databuttonincrement","databuttondecrement","_dispatchParameterNumberEvent","paramMsb","paramLsb","timestamp","parameterMsb","parameterLsb","parameter","MIDI_REGISTERED_PARAMETERS","getChannelModeByNumber","cm","MIDI_CHANNEL_MODE_MESSAGES","hasOwnProperty","Input","midiInput","_midiInput","i","onstatechange","_onStateChange","bind","onmidimessage","_onMidiMessage","close","port","connection","state","id","manufacturer","console","warn","Message","timeStamp","rawData","statusByte","isSystemMessage","_parseEvent","isChannelMessage","song","open","err","Promise","reject","resolve","addListener","listener","concat","CHANNEL_EVENTS","listeners","super","addOneTimeListener","remaining","on","hasListener","every","OutputChannel","_output","send","setKeyAftertouch","pressure","useRawValue","offset","item","n","MIDI_CHANNEL_MESSAGES","keyaftertouch","sendControlChange","controlchange","_selectNonRegisteredParameter","_deselectRegisteredParameter","_deselectNonRegisteredParameter","_selectRegisteredParameter","_setCurrentParameter","decrementRegisteredParameter","valid","getOwnPropertyNames","p","incrementRegisteredParameter","playNote","sendNoteOn","isFinite","NaN","noteOffOptions","sendNoteOff","nVelocity","noteoff","stopNote","noteon","sendChannelMode","command","setOmniMode","setChannelAftertouch","channelaftertouch","setMasterTuning","coarse","fine","msb","lsb","setRegisteredParameter","setModulationRange","semitones","cents","setNonRegisteredParameter","nrpn","setPitchBend","nLevel","pitchbend","setPitchBendRange","setProgram","program","programchange","rpn","setTuningBank","setTuningProgram","setLocalControl","turnNotesOff","turnSoundOff","resetAllControllers","setPolyphonicMode","mode","Output","midiOutput","_midiOutput","legacy","isNode","Uint8Array","from","slice","sendSysex","merged","MIDI_SYSTEM_MESSAGES","sysex","set","sysexend","clear","sendTimecodeQuarterFrame","timecode","setSongPosition","songposition","sendSongPosition","setSong","songselect","sendSongSelect","sendTuneRequest","tunerequest","sendClock","clock","sendStart","start","sendContinue","continue","sendStop","stop","sendActiveSensing","activesensing","sendReset","reset","sendTuningRequest","sendKeyAftertouch","sendChannelAftertouch","sendPitchBend","bend","sendProgramChange","rawDataBytes","manufacturerId","wm","interface","_inputs","_outputs","_stateChangeQueue","callback","enabled","errorEvent","error","midiAccessGrantedEvent","enabledEvent","navigator","requestMIDIAccess","software","_onInterfaceStateChange","_updateInputsAndOutputs","_destroyInputsAndOutputs","then","getInputById","inputs","getInputByName","getOutputByName","outputs","getOutputById","noteNameToNumber","getOctave","toMIDIChannels","getValidNoteArray","convertToTimestamp","promises","all","_updateInputs","_updateOutputs","remove","updated","values","next","done","splice","nInput","add","j","nOutput","prototype","call","process","window","document","sysexEnabled","performance","now","tuningrequest","midimessage","unknownsystemmessage","allsoundoff","resetallcontrollers","localcontrol","allnotesoff","omnimodeoff","omnimodeon","monomodeon","polymodeon","bankselectcoarse","modulationwheelcoarse","breathcontrollercoarse","footcontrollercoarse","portamentotimecoarse","volumecoarse","balancecoarse","pancoarse","expressioncoarse","effectcontrol1coarse","effectcontrol2coarse","generalpurposeslider1","generalpurposeslider2","generalpurposeslider3","generalpurposeslider4","bankselectfine","modulationwheelfine","breathcontrollerfine","footcontrollerfine","portamentotimefine","volumefine","balancefine","panfine","expressionfine","effectcontrol1fine","effectcontrol2fine","holdpedal","portamento","sustenutopedal","softpedal","legatopedal","hold2pedal","soundvariation","resonance","soundreleasetime","soundattacktime","brightness","soundcontrol6","soundcontrol7","soundcontrol8","soundcontrol9","soundcontrol10","generalpurposebutton1","generalpurposebutton2","generalpurposebutton3","generalpurposebutton4","reverblevel","tremololevel","choruslevel","celestelevel","phaserlevel","pitchbendrange","channelfinetuning","channelcoarsetuning","tuningprogram","tuningbank","modulationrange","azimuthangle","elevationangle","gain","distanceratio","maximumdistance","maximumdistancegain","referencedistanceratio","panspreadangle","rollangle"],"mappings":"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"}