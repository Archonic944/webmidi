{"version":3,"file":"webmidi.esm.min.js","sources":["../node_modules/djipevents/dist/djipevents.esm.min.js","../src/Note.js","../src/Enumerations.js","../src/Utilities.js","../src/InputChannel.js","../src/OutputChannel.js","../src/Output.js","../src/Forwarder.js","../src/Input.js","../src/Message.js","../src/WebMidi.js"],"sourcesContent":["class e{constructor(e=!1){this.eventMap={},this.eventsSuspended=1==e}addListener(n,r,i={}){if(\"string\"==typeof n&&n.length<1||n instanceof String&&n.length<1||\"string\"!=typeof n&&!(n instanceof String)&&n!==e.ANY_EVENT)throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");if(\"function\"!=typeof r)throw new TypeError(\"The callback must be a function.\");const s=new t(n,this,r,i);return this.eventMap[n]||(this.eventMap[n]=[]),i.prepend?this.eventMap[n].unshift(s):this.eventMap[n].push(s),s}addOneTimeListener(e,t,n={}){n.remaining=1,this.addListener(e,t,n)}static get ANY_EVENT(){return Symbol.for(\"Any event\")}hasListener(n,r){if(void 0===n)return!!(this.eventMap[e.ANY_EVENT]&&this.eventMap[e.ANY_EVENT].length>0)||Object.entries(this.eventMap).some(([,e])=>e.length>0);if(this.eventMap[n]&&this.eventMap[n].length>0){if(r instanceof t){return this.eventMap[n].filter(e=>e===r).length>0}if(\"function\"==typeof r){return this.eventMap[n].filter(e=>e.callback===r).length>0}return null==r}return!1}get eventNames(){return Object.keys(this.eventMap)}getListeners(e){return this.eventMap[e]||[]}suspendEvent(e){this.getListeners(e).forEach(e=>{e.suspended=!0})}unsuspendEvent(e){this.getListeners(e).forEach(e=>{e.suspended=!1})}getListenerCount(e){return this.getListeners(e).length}emit(t,...n){if(\"string\"!=typeof t&&!(t instanceof String))throw new TypeError(\"The 'event' parameter must be a string.\");if(this.eventsSuspended)return;let r=[],i=this.eventMap[e.ANY_EVENT]||[];return this.eventMap[t]&&(i=i.concat(this.eventMap[t])),i.forEach(e=>{if(e.suspended)return;let t=[...n];Array.isArray(e.arguments)&&(t=t.concat(e.arguments)),e.remaining>0&&(r.push(e.callback.apply(e.context,t)),e.count++),--e.remaining<1&&e.remove()}),r}removeListener(e,t,n={}){if(void 0===e)return void(this.eventMap={});if(!this.eventMap[e])return;let r=this.eventMap[e].filter(e=>t&&e.callback!==t||n.remaining&&n.remaining!==e.remaining||n.context&&n.context!==e.context);r.length?this.eventMap[e]=r:delete this.eventMap[e]}async waitFor(e,t={}){return t.duration=parseInt(t.duration),(isNaN(t.duration)||t.duration<=0)&&(t.duration=1/0),new Promise((n,r)=>{let i,s=this.addListener(e,()=>{clearTimeout(i),n()},{remaining:1});t.duration!==1/0&&(i=setTimeout(()=>{s.remove(),r(\"The duration expired before the event was emitted.\")},t.duration))})}get eventCount(){return Object.keys(this.eventMap).length}}class t{constructor(t,n,r,i={}){if(\"string\"!=typeof t&&!(t instanceof String)&&t!==e.ANY_EVENT)throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");if(!n)throw new ReferenceError(\"The 'target' parameter is mandatory.\");if(\"function\"!=typeof r)throw new TypeError(\"The 'callback' must be a function.\");void 0===i.arguments||Array.isArray(i.arguments)||(i.arguments=[i.arguments]),(i=Object.assign({context:n,remaining:1/0,arguments:void 0,duration:1/0},i)).duration!==1/0&&setTimeout(()=>this.remove(),i.duration),this.event=t,this.target=n,this.callback=r,this.context=i.context,this.remaining=parseInt(i.remaining)>=1?parseInt(i.remaining):1/0,this.count=0,this.arguments=i.arguments,this.suspended=!1}remove(){this.target.removeListener(this.event,this.callback,{context:this.context,remaining:this.remaining})}}export{e as EventEmitter,t as Listener};\n//# sourceMappingURL=djipevents.esm.min.js.map\n","import {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/**\n * The `Note` class represents a single musical note such as `\"D3\"`, `\"G#4\"`, `\"F-1\"`, `\"Gb7\"`, etc.\n *\n * `Note` objects can be played back on a single channel by calling\n * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same\n * output, by calling [`Output.playNote()`]{@link Output#playNote}.\n *\n * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.\n * These can be changed by passing in the appropriate option. It is also possible to set a\n * system-wide default for attack and release velocities by using the\n * [`WebMidi.defaults`](WebMidi#defaults) property.\n *\n * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and\n * [`rawRelease`](#rawRelease) to both get and set the values.\n *\n * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped\n * when the duration has elapsed by sending a `\"noteoff\"` event. By default, the duration is set to\n * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a\n * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},\n * [`Output.stopNote()`]{@link Output#stopNote} or similar.\n *\n * @param value {string|number} The value used to create the note. If an identifier string is used,\n * it must start with the note letter, optionally followed by an accidental and followed by the\n * octave number (`\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`, etc.). If a number is used, it must be an\n * integer between 0 and 127. In this case, middle C is considered to be C4 (note number 60).\n *\n * @param {object} [options={}]\n *\n * @param {number} [options.duration=Infinity] The number of milliseconds before the note should be\n * explicitly stopped.\n *\n * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n * `attack` and `rawAttack` are specified, the latter has precedence.\n *\n * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n * `release` and `rawRelease` are specified, the latter has precedence.\n *\n * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n * `attack` and `rawAttack` are specified, the latter has precedence.\n *\n * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n * `release` and `rawRelease` are specified, the latter has precedence.\n *\n * @throws {Error} Invalid note identifier\n * @throws {RangeError} Invalid name value\n * @throws {RangeError} Invalid accidental value\n * @throws {RangeError} Invalid octave value\n * @throws {RangeError} Invalid duration value\n * @throws {RangeError} Invalid attack value\n * @throws {RangeError} Invalid release value\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Note {\n\n  constructor(value, options = {}) {\n\n    // Assign property defaults\n    this.duration = WebMidi.defaults.note.duration;\n    this.attack = WebMidi.defaults.note.attack;\n    this.release = WebMidi.defaults.note.release;\n\n    // Assign property values from options (validation occurs in setter)\n    if (options.duration != undefined) this.duration = options.duration;\n    if (options.attack != undefined) this.attack = options.attack;\n    if (options.rawAttack != undefined) this.attack = Utilities.from7bitToFloat(options.rawAttack);\n    if (options.release != undefined) this.release = options.release;\n    if (options.rawRelease != undefined) {\n      this.release = Utilities.from7bitToFloat(options.rawRelease);\n    }\n\n    // Assign note depending on the way it was specified (name or number)\n    if (Number.isInteger(value)) {\n      this.identifier = Utilities.toNoteIdentifier(value);\n    } else {\n      this.identifier = value;\n    }\n\n  }\n\n  /**\n   * The name, optional accidental and octave of the note, as a string.\n   * @type {string}\n   * @since 3.0.0\n   */\n  get identifier() {\n    return this._name + (this._accidental || \"\") + this._octave;\n  }\n  set identifier(value) {\n\n    const fragments = Utilities.getNoteDetails(value);\n\n    if (WebMidi.validation) {\n      if (!value) throw new Error(\"Invalid note identifier\");\n    }\n\n    this._name = fragments.name;\n    this._accidental = fragments.accidental;\n    this._octave = fragments.octave;\n\n  }\n\n  /**\n   * The name (letter) of the note\n   * @type {string}\n   * @since 3.0.0\n   */\n  get name() {\n    return this._name;\n  }\n  set name(value) {\n\n    if (WebMidi.validation) {\n      value = value.toUpperCase();\n      if (![\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"].includes(value)) {\n        throw new Error(\"Invalid name value\");\n      }\n    }\n\n    this._name = value;\n\n  }\n\n  /**\n   * The accidental (#, ##, b or bb) of the note\n   * @type {string}\n   * @since 3.0.0\n   */\n  get accidental() {\n    return this._accidental;\n  }\n  set accidental(value) {\n\n    if (WebMidi.validation) {\n      value = value.toLowerCase();\n      if (![\"#\", \"##\", \"b\", \"bb\"].includes(value)) throw new Error(\"Invalid accidental value\");\n    }\n\n    this._accidental = value;\n\n  }\n\n  /**\n   * The octave of the note\n   * @type {number}\n   * @since 3.0.0\n   */\n  get octave() {\n    return this._octave;\n  }\n  set octave(value) {\n\n    if (WebMidi.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new Error(\"Invalid octave value\");\n    }\n\n    this._octave = value;\n\n  }\n\n  /**\n   * The duration of the note as a positive decimal number representing the number of milliseconds\n   * that the note should play for.\n   *\n   * @type {number}\n   * @since 3.0.0\n   */\n  get duration() {\n    return this._duration;\n  }\n  set duration(value) {\n\n    if (WebMidi.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || value === null || value < 0) {\n        throw new RangeError(\"Invalid duration value.\");\n      }\n    }\n\n    this._duration = value;\n\n  }\n\n  /**\n   * The attack velocity of the note as an integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get attack() {\n    return this._attack;\n  }\n  set attack(value) {\n    if (WebMidi.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || !(value >= 0 && value <= 1)) {\n        throw new RangeError(\"Invalid attack value.\");\n      }\n    }\n\n    this._attack = value;\n\n  }\n\n  /**\n   * The release velocity of the note as an integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get release() {\n    return this._release;\n  }\n  set release(value) {\n\n    if (WebMidi.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || !(value >= 0 && value <= 1)) {\n        throw new RangeError(\"Invalid release value.\");\n      }\n    }\n\n    this._release = value;\n\n  }\n\n  /**\n   * The attack velocity of the note as a positive integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get rawAttack() {\n    return Utilities.fromFloatTo7Bit(this._attack);\n  }\n  set rawAttack(value) {\n    this._attack = Utilities.from7bitToFloat(value);\n  }\n\n  /**\n   * The release velocity of the note as a positive integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get rawRelease() {\n    return Utilities.fromFloatTo7Bit(this._release);\n  }\n  set rawRelease(value) {\n    this._release = Utilities.from7bitToFloat(value);\n  }\n\n  /**\n   * The MIDI number of the note. This number is derived from the note identifier using C4 as a\n   * reference for middle C.\n   *\n   * @type {number}\n   * @since 3.0.0\n   */\n  get number() {\n    return Utilities.toNoteNumber(this.identifier);\n  }\n\n  /**\n   * Returns a MIDI note number offset by octave and/or semitone. If the calculated value is less\n   * than 0, 0 will be returned. If the calculated value is more than 127, 127 will be returned. If\n   * an invalid value is supplied, 0 will be used.\n   *\n   * @param [octaveOffset] {number} An integer to offset the note number by octave.\n   * @param [semitoneOffset] {number} An integer to offset the note number by semitone.\n   * @returns {number} An integer between 0 and 127\n   */\n  getOffsetNumber(octaveOffset = 0, semitoneOffset = 0) {\n\n    if (WebMidi.validation) {\n      octaveOffset = parseInt(octaveOffset) || 0;\n      semitoneOffset = parseInt(semitoneOffset) || 0;\n    }\n\n    return Math.min(Math.max(this.number + (octaveOffset * 12) + semitoneOffset, 0), 127);\n\n  }\n\n}\n","/**\n * The `Enumerations` class contains enumerations of elements used throughout the library. All\n * enumerations are static and should be referenced using the class name. For example:\n * `Enumerations.MIDI_CHANNEL_MESSAGES`.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Enumerations {\n\n  /**\n   * Enumeration of all MIDI channel messages and their associated 4-bit numerical value:\n   *\n   * - `noteoff`: 0x8 (8)\n   * - `noteon`: 0x9 (9)\n   * - `keyaftertouch`: 0xA (10)\n   * - `controlchange`: 0xB (11)\n   * - `nrpn`: 0xB (11)\n   * - `programchange`: 0xC (12)\n   * - `channelaftertouch`: 0xD (13)\n   * - `pitchbend`: 0xE (14)\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @static\n   */\n  static get MIDI_CHANNEL_MESSAGES() {\n\n    return {\n      noteoff: 0x8,           // 8\n      noteon: 0x9,            // 9\n      keyaftertouch: 0xA,     // 10\n      controlchange: 0xB,     // 11\n      programchange: 0xC,     // 12\n      channelaftertouch: 0xD, // 13\n      pitchbend: 0xE          // 14\n    };\n\n  }\n\n  /**\n   * An array of the 16 MIDI channel numbers (`1` to `16`):\n   *\n   * @enum {number[]}\n   * @readonly\n   * @static\n   */\n  static get MIDI_CHANNEL_NUMBERS() {\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n  }\n\n  /**\n   * Enumeration of all channel mode messages and their associated numerical value:\n   *\n   * - `allsoundoff`: 120\n   * - `resetallcontrollers`: 121\n   * - `localcontrol`: 122\n   * - `allnotesoff`: 123\n   * - `omnimodeoff`: 124\n   * - `omnimodeon`: 125\n   * - `monomodeon`: 126\n   * - `polymodeon`: 127\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @static\n   */\n  static get MIDI_CHANNEL_MODE_MESSAGES() {\n\n    return {\n      allsoundoff: 120,\n      resetallcontrollers: 121,\n      localcontrol: 122,\n      allnotesoff: 123,\n      omnimodeoff: 124,\n      omnimodeon: 125,\n      monomodeon: 126,\n      polymodeon: 127\n    };\n\n  }\n\n  /**\n   * Enumeration of most control change messages and their associated numerical value. Note that\n   * some control change numbers do not have a predefined purpose and are absent from this list.\n   *\n   * - `bankselectcoarse`: 0\n   * - `modulationwheelcoarse`: 1\n   * - `breathcontrollercoarse`: 2\n   * - `footcontrollercoarse`: 4\n   * - `portamentotimecoarse`: 5\n   * - `dataentrycoarse`: 6\n   * - `volumecoarse`: 7\n   * - `balancecoarse`: 8\n   * - `pancoarse`: 10\n   * - `expressioncoarse`: 11\n   * - `effectcontrol1coarse`: 12\n   * - `effectcontrol2coarse`: 13\n   * - `generalpurposeslider1`: 16\n   * - `generalpurposeslider2`: 17\n   * - `generalpurposeslider3`: 18\n   * - `generalpurposeslider4`: 19\n   * - `bankselectfine`: 32\n   * - `modulationwheelfine`: 33\n   * - `breathcontrollerfine`: 34\n   * - `footcontrollerfine`: 36\n   * - `portamentotimefine`: 37\n   * - `dataentryfine`: 38\n   * - `volumefine`: 39\n   * - `balancefine`: 40\n   * - `panfine`: 42\n   * - `expressionfine`: 43\n   * - `effectcontrol1fine`: 44\n   * - `effectcontrol2fine`: 45\n   * - `holdpedal`: 64\n   * - `portamento`: 65\n   * - `sustenutopedal`: 66\n   * - `softpedal`: 67\n   * - `legatopedal`: 68\n   * - `hold2pedal`: 69\n   * - `soundvariation`: 70\n   * - `resonance`: 71\n   * - `soundreleasetime`: 72\n   * - `soundattacktime`: 73\n   * - `brightness`: 74\n   * - `soundcontrol6`: 75\n   * - `soundcontrol7`: 76\n   * - `soundcontrol8`:`77\n   * - `soundcontrol9`: 78\n   * - `soundcontrol10`: 79\n   * - `generalpurposebutton1`: 80\n   * - `generalpurposebutton2`: 81\n   * - `generalpurposebutton3`: 82\n   * - `generalpurposebutton4`: 83\n   * - `reverblevel`: 91\n   * - `tremololevel`: 92\n   * - `choruslevel`: 93\n   * - `celestelevel`: 94\n   * - `phaserlevel`: 95\n   * - `databuttonincrement`: 96\n   * - `databuttondecrement`: 97\n   * - `nonregisteredparametercoarse`: 98\n   * - `nonregisteredparameterfine`: 99\n   * - `registeredparametercoarse`: 100\n   * - `registeredparameterfine`: 101\n   *\n   * - `allsoundoff`: 120\n   * - `resetallcontrollers`: 121\n   * - `localcontrol`: 122\n   * - `allnotesoff`: 123\n   * - `omnimodeoff`: 124\n   * - `omnimodeon`: 125\n   * - `monomodeon`: 126\n   * - `polymodeon`: 127\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @static\n   */\n  static get MIDI_CONTROL_CHANGE_MESSAGES() {\n\n    return {\n\n      bankselectcoarse: 0,\n      modulationwheelcoarse: 1,\n      breathcontrollercoarse: 2,\n      footcontrollercoarse: 4,\n      portamentotimecoarse: 5,\n      dataentrycoarse: 6,\n      volumecoarse: 7,\n      balancecoarse: 8,\n      pancoarse: 10,\n      expressioncoarse: 11,\n      effectcontrol1coarse: 12,\n      effectcontrol2coarse: 13,\n      generalpurposeslider1: 16,\n      generalpurposeslider2: 17,\n      generalpurposeslider3: 18,\n      generalpurposeslider4: 19,\n      bankselectfine: 32,\n      modulationwheelfine: 33,\n      breathcontrollerfine: 34,\n      footcontrollerfine: 36,\n      portamentotimefine: 37,\n      dataentryfine: 38,\n      volumefine: 39,\n      balancefine: 40,\n      panfine: 42,\n      expressionfine: 43,\n      effectcontrol1fine: 44,\n      effectcontrol2fine: 45,\n      holdpedal: 64,\n      portamento: 65,\n      sustenutopedal: 66,\n      softpedal: 67,\n      legatopedal: 68,\n      hold2pedal: 69,\n      soundvariation: 70,\n      resonance: 71,\n      soundreleasetime: 72,\n      soundattacktime: 73,\n      brightness: 74,\n      soundcontrol6: 75,\n      soundcontrol7: 76,\n      soundcontrol8: 77,\n      soundcontrol9: 78,\n      soundcontrol10: 79,\n      generalpurposebutton1: 80,\n      generalpurposebutton2: 81,\n      generalpurposebutton3: 82,\n      generalpurposebutton4: 83,\n      reverblevel: 91,\n      tremololevel: 92,\n      choruslevel: 93,\n      celestelevel: 94,\n      phaserlevel: 95,\n      databuttonincrement: 96,\n      databuttondecrement: 97,\n      nonregisteredparametercoarse: 98,\n      nonregisteredparameterfine: 99,\n      registeredparametercoarse: 100,\n      registeredparameterfine: 101,\n\n      allsoundoff: 120,\n      resetallcontrollers: 121,\n      localcontrol: 122,\n      allnotesoff: 123,\n      omnimodeoff: 124,\n      omnimodeon: 125,\n      monomodeon: 126,\n      polymodeon: 127\n\n    };\n\n  }\n\n  /**\n   * Enumeration of all registered parameters and their associated pair of numerical values. MIDI\n   * registered parameters extend the original list of control change messages. Currently, there are\n   * only a limited number of them:\n   *\n   * - `pitchbendrange`: [0x00, 0x00]\n   * - `channelfinetuning`: [0x00, 0x01]\n   * - `channelcoarsetuning`: [0x00, 0x02]\n   * - `tuningprogram`: [0x00, 0x03]\n   * - `tuningbank`: [0x00, 0x04]\n   * - `modulationrange`: [0x00, 0x05]\n   * - `azimuthangle`: [0x3D, 0x00]\n   * - `elevationangle`: [0x3D, 0x01]\n   * - `gain`: [0x3D, 0x02]\n   * - `distanceratio`: [0x3D, 0x03]\n   * - `maximumdistance`: [0x3D, 0x04]\n   * - `maximumdistancegain`: [0x3D, 0x05]\n   * - `referencedistanceratio`: [0x3D, 0x06]\n   * - `panspreadangle`: [0x3D, 0x07]\n   * - `rollangle`: [0x3D, 0x08]\n   *\n   * @enum {Object.<string, number[]>}\n   * @readonly\n   * @static\n   */\n  static get MIDI_REGISTERED_PARAMETERS() {\n\n    return {\n      pitchbendrange: [0x00, 0x00],\n      channelfinetuning: [0x00, 0x01],\n      channelcoarsetuning: [0x00, 0x02],\n      tuningprogram: [0x00, 0x03],\n      tuningbank: [0x00, 0x04],\n\n      modulationrange: [0x00, 0x05],\n      azimuthangle: [0x3D, 0x00],\n      elevationangle: [0x3D, 0x01],\n      gain: [0x3D, 0x02],\n      distanceratio: [0x3D, 0x03],\n      maximumdistance: [0x3D, 0x04],\n      maximumdistancegain: [0x3D, 0x05],\n      referencedistanceratio: [0x3D, 0x06],\n      panspreadangle: [0x3D, 0x07],\n      rollangle: [0x3D, 0x08]\n    };\n\n  }\n\n  /**\n   * Enumeration of all valid MIDI system messages and matching numerical values. WebMidi.js also\n   * uses two custom messages.\n   *\n   * **System common messages**\n   * - `sysex`: 0xF0 (240)\n   * - `timecode`: 0xF1 (241)\n   * - `songposition`: 0xF2 (242)\n   * - `songselect`: 0xF3 (243)\n   * - `tunerequest`: 0xF6 (246)\n   * - `sysexend`: 0xF7 (247)\n   *\n   * The `sysexend` message is never actually received. It simply ends a sysex stream.\n   *\n   * **System real-time messages**\n   *\n   * - `clock`: 0xF8 (248)\n   * - `start`: 0xFA (250)\n   * - `continue`: 0xFB (251)\n   * - `stop`: 0xFC (252)\n   * - `activesensing`: 0xFE (254)\n   * - `reset`: 0xFF (255)\n   *\n   * Values 249 and 253 are actually relayed by the Web MIDI API but they do not serve a specific\n   * purpose. The\n   * [MIDI 1.0 spec](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n   * simply states that they are undefined/reserved.\n   *\n   * **Custom WebMidi.js messages**\n   *\n   * - `midimessage`: 0\n   * - `unknownsystemmessage`: -1\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @static\n   */\n  static get MIDI_SYSTEM_MESSAGES() {\n\n    return {\n\n      // System common messages\n      sysex: 0xF0,            // 240\n      timecode: 0xF1,         // 241\n      songposition: 0xF2,     // 242\n      songselect: 0xF3,       // 243\n      tunerequest: 0xF6,      // 246\n      tuningrequest: 0xF6,    // for backwards-compatibility (deprecated in version 3.0)\n      sysexend: 0xF7,         // 247 (never actually received - simply ends a sysex)\n\n      // System real-time messages\n      clock: 0xF8,            // 248\n      start: 0xFA,            // 250\n      continue: 0xFB,         // 251\n      stop: 0xFC,             // 252\n      activesensing: 0xFE,    // 254\n      reset: 0xFF,            // 255\n\n      // Custom WebMidi.js messages\n      midimessage: 0,\n      unknownsystemmessage: -1\n\n    };\n\n  }\n\n}\n","import {Note} from \"./Note.js\";\nimport {WebMidi} from \"./WebMidi.js\";\nimport {Enumerations} from \"./Enumerations.js\";\n\n/**\n * The `Utilities` class contains general-purpose utility methods. All methods are static and\n * should be called using the class name. For example: `Utilities.getNoteDetails(\"C4\")`.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Utilities {\n\n  /**\n   * Returns a MIDI note number matching the identifier passed in the form of a string. The\n   * identifier must include the octave number. The identifier also optionally include a sharp (#),\n   * a double sharp (##), a flat (b) or a double flat (bb) symbol. For example, these are all valid\n   * identifiers: C5, G4, D#-1, F0, Gb7, Eb-1, Abb4, B##6, etc.\n   *\n   * When converting note identifiers to numbers, C4 is considered to be middle C (MIDI note number\n   * 60) as per the scientific pitch notation standard.\n   *\n   * The resulting note number can be offset by using the `octaveOffset` parameter.\n   *\n   * @param identifier {string} The identifier in the form of a letter, followed by an optional \"#\",\n   * \"##\", \"b\" or \"bb\" followed by the octave number. For exemple: C5, G4, D#-1, F0, Gb7, Eb-1,\n   * Abb4, B##6, etc.\n   *\n   * @param {number} [octaveOffset=0] A integer to offset the octave by.\n   *\n   * @returns {number} The MIDI note number (an integer between 0 and 127).\n   *\n   * @throws RangeError Invalid 'octaveOffset' value\n   *\n   * @throws TypeError Invalid note identifier\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   * @static\n   */\n  static toNoteNumber(identifier, octaveOffset = 0) {\n\n    // Validation\n    octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n    if (isNaN(octaveOffset)) throw new RangeError(\"Invalid 'octaveOffset' value\");\n    if (typeof identifier !== \"string\") identifier = \"\";\n\n    const fragments = this.getNoteDetails(identifier);\n    if (!fragments) throw new TypeError(\"Invalid note identifier\");\n\n    const notes = { C: 0, D: 2, E: 4, F: 5, G: 7, A: 9, B: 11 };\n    let result = (fragments.octave + 1 + octaveOffset) * 12;\n    result += notes[fragments.name];\n\n    if (fragments.accidental) {\n      if (fragments.accidental.startsWith(\"b\")) {\n        result -= fragments.accidental.length;\n      } else {\n        result += fragments.accidental.length;\n      }\n    }\n\n    if (result < 0 || result > 127) throw new RangeError(\"Invalid octaveOffset value\");\n\n    return result;\n\n  }\n\n  /**\n   * Given a proper note identifier (\"C#4\", \"Gb-1\", etc.) or a valid MIDI note number (9-127), this\n   * method returns an object containing broken down details about the specified note (uppercase\n   * letter, accidental and octave).\n   *\n   * When a number is specified, the translation to note is done using a value of 60 for middle C\n   * (C4 = middle C).\n   *\n   * @param value {string|number} A note identifier A  atring (\"C#4\", \"Gb-1\", etc.) or a MIDI note\n   * number (0-127).\n   *\n   * @returns {{octave: number, letter: string, accidental: string}}\n   *\n   * @throws TypeError Invalid note identifier\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static getNoteDetails(value) {\n\n    if (Number.isInteger(value)) value = this.toNoteIdentifier(value);\n\n    const matches = value.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\\d+)$/i);\n    if (!matches) throw new TypeError(\"Invalid note identifier\");\n\n    const name = matches[1].toUpperCase();\n    const octave = parseInt(matches[3]);\n    let accidental = matches[2].toLowerCase();\n    accidental = accidental === \"\" ? undefined : accidental;\n\n    const fragments = {\n      name: name,\n      accidental: accidental,\n      octave: octave,\n      identifier: name + (accidental || \"\") + octave\n    };\n\n    return fragments;\n\n  }\n\n  /**\n   * Returns a sanitized array of valid MIDI channel numbers (1-16). The parameter should be a\n   * single integer or an array of integers.\n   *\n   * For backwards-compatibility, passing `undefined` as a parameter to this method results in all\n   * channels being returned (1-16). Otherwise, parameters that cannot successfully be parsed to\n   * integers between 1 and 16 are silently ignored.\n   *\n   * @param [channel] {number|number[]} An integer or an array of integers to parse as channel\n   * numbers.\n   *\n   * @returns {Array} An array of 0 or more valid MIDI channel numbers.\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static sanitizeChannels(channel) {\n\n    let channels;\n\n    if (this.validation) {\n\n      if (channel === \"all\") { // backwards-compatibility\n        channels = [\"all\"];\n      } else if (channel === \"none\") { // backwards-compatibility\n        return [];\n      }\n\n    }\n\n    if (!Array.isArray(channel)) {\n      channels = [channel];\n    } else {\n      channels = channel;\n    }\n\n    // In order to preserve backwards-compatibility, we let this assignment as it is.\n    if (channels.indexOf(\"all\") > -1) {\n      channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n    }\n\n    return channels\n      .map(function(ch) {\n        return parseInt(ch);\n      })\n      .filter(function(ch) {\n        return (ch >= 1 && ch <= 16);\n      });\n\n  }\n\n  /**\n   * Returns a valid timestamp, relative to the navigation start of the document, derived from the\n   * `time` parameter. If the parameter is a string starting with the \"+\" sign and followed by a\n   * number, the resulting timestamp will be the sum of the current timestamp plus that number. If\n   * the parameter is a positive number, it will be returned as is. Otherwise, false will be\n   * returned.\n   *\n   * @param [time] {number|string} The time string (e.g. `\"+2000\"`) or number to parse\n   * @return {number|false} A positive number or `false` (if the time cannot be converted)\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static toTimestamp(time) {\n\n    let value = false;\n\n    const parsed = parseFloat(time);\n    if (isNaN(parsed)) return false;\n\n    if (typeof time === \"string\" && time.substring(0, 1) === \"+\") {\n      if (parsed >= 0) value = WebMidi.time + parsed;\n    } else {\n      if (parsed >= 0) value = parsed;\n    }\n\n    return value;\n\n  }\n\n  /**\n   * Returns a valid MIDI note number (0-127) given the specified input. The input usually is a\n   * string containing a note identifier (`\"C3\"`, `\"F#4\"`, `\"D-2\"`, `\"G8\"`, etc.). If an integer\n   * between 0 and 127 is passed, it will simply be returned as is (for convenience). Other strings\n   * will be parsed for integer value, if possible.\n   *\n   * If the input is an identifier, the resulting note number is offset by the `octaveOffset`\n   * parameter. For example, if you pass in \"C4\" (note number 60) and the `octaveOffset` value is\n   * -2, the resulting MIDI note number will be 36.\n   *\n   * @param input {string|number} A string or number to extract the MIDI note number from.\n   *\n   * @returns {number|false} A valid MIDI note number (0-127) or `false` if the input could not\n   * successfully be parsed to a note number.\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static guessNoteNumber(input, octaveOffset) {\n\n    // Validate and, if necessary, assign default\n    octaveOffset = parseInt(octaveOffset) || 0;\n\n    let output = false;\n\n    // Check input type\n    if (Number.isInteger(input) && input >= 0 && input <= 127) {        // uint\n      output = parseInt(input);\n    } else if (parseInt(input) >= 0 && parseInt(input) <= 127) {        // float or uint as string\n      output = parseInt(input);\n    } else if (typeof input === \"string\" || input instanceof String) {  // string\n      try {\n        output = this.toNoteNumber(input.trim(), octaveOffset);\n      } catch (e) {\n        return false;\n      }\n    }\n\n    return output;\n\n  }\n\n  /**\n   * Returns an identifier string representing a note name (with optional accidental) followed by an\n   * octave number. The octave can be offset by using the `octaveOffset` parameter.\n   *\n   * @param {number} number The MIDI note number to convert to a note identifier\n   * @param {number} octaveOffset An offset to apply to the resulting octave\n   *\n   * @returns {string}\n   *\n   * @throws RangeError Invalid note number\n   * @throws RangeError Invalid octaveOffset value\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static toNoteIdentifier(number, octaveOffset) {\n\n    number = parseInt(number);\n    if (isNaN(number) || number < 0 || number > 127) throw new RangeError(\"Invalid note number\");\n\n    octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n    if (isNaN(octaveOffset)) throw new RangeError(\"Invalid octaveOffset value\");\n\n    const notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n    const octave = Math.floor(number / 12 - 1) + octaveOffset;\n    return notes[number % 12] + octave.toString();\n\n  }\n\n  /**\n   * Converts the `input` parameter to a valid {@link Note} object. The input usually is an unsigned\n   * integer (0-127) or a note identifier (`\"C4\"`, `\"G#5\"`, etc.). If the input is a {@link Note}\n   * object, it will be returned as is.\n   *\n   * If the input is a note number or identifier, it is possible to specify options by providing the\n   * `options` parameter.\n   *\n   * @param [input] {number|string|Note}\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n   * be explicitly stopped.\n   *\n   * @param {number} [options.attack=64] The note's attack velocity as an integer between 0 and 127.\n   *\n   * @param {number} [options.release=64] The note's release velocity as an integer between 0 and\n   * 127.\n   *\n   * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n   * used when the input value is a note identifier.**\n   *\n   * @returns {Note}\n   *\n   * @throws TypeError The input could not be parsed to a note\n   *\n   * @since version 3.0.0\n   * @static\n   */\n  static buildNote(input, options= {}) {\n\n    options.octaveOffset = parseInt(options.octaveOffset) || 0;\n\n    // If it's already a Note, we're done\n    if (input instanceof Note) return input;\n\n    let number = this.guessNoteNumber(input, options.octaveOffset);\n\n    if (number === false) { // We use a comparison b/c the note can be 0 (which equates to false)\n      throw new TypeError(`The input could not be parsed as a note (${input})`);\n    }\n\n    // If we got here, we have a proper note number. Before creating the new note, we strip out\n    // 'octaveOffset' because it has already been factored in when calling guessNoteNumber().\n    options.octaveOffset = undefined;\n    return new Note(number, options);\n\n  }\n\n  /**\n   * Converts an input value, which can be an unsigned integer (0-127), a note identifier, a\n   * {@link Note} object or an array of the previous types, to an array of {@link Note} objects.\n   *\n   * {@link Note} objects are returned as is. For note numbers and identifiers, a {@link Note}\n   * object is created with the options specified. An error will be thrown when encountering invalid\n   * input.\n   *\n   * @param [notes] {number|string|Note|number[]|string[]|Note[]}\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n   * be explicitly stopped.\n   *\n   * @param {number} [options.attack=0.5] The note's attack velocity as a decimal number between 0\n   * and 1.\n   *\n   * @param {number} [options.release=0.5] The note's release velocity as a decimal number between 0\n   * and 1.\n   *\n   * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n   * 127.\n   *\n   * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n   * 127.\n   *\n   * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n   * used when the input value is a note identifier.**\n   *\n   * @returns {Note[]}\n   *\n   * @throws TypeError An element could not be parsed as a note.\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static buildNoteArray(notes, options = {}) {\n\n    let result = [];\n    if (!Array.isArray(notes)) notes = [notes];\n\n    notes.forEach(note => {\n      result.push(this.buildNote(note, options));\n    });\n\n    return result;\n\n  }\n\n  /**\n   * Returns a number between 0 and 1 representing the ratio of the input value divided by 127 (7\n   * bit). The returned value is restricted between 0 and 1 even if the input is greater than 127 or\n   * smaller than 0.\n   *\n   * Passing `Infinity` will return `1` and passing `-Infinity` will return `0`. Otherwise, when the\n   * input value cannot be converted to an integer, the method returns 0.\n   *\n   * @param value A positive integer between 0 and 127 (inclusive)\n   * @returns {number} A number between 0 and 1 (inclusive)\n   * @static\n   */\n  static from7bitToFloat(value) {\n    if (value === Infinity) value = 127;\n    value = parseInt(value) || 0;\n    return Math.min(Math.max(value / 127, 0), 1);\n  }\n\n  /**\n   * Returns a number between 0 and 127 which is the result of multiplying the input value by 127.\n   * The input value should be number between 0 and 1 (inclusively). The returned value is\n   * restricted between 0 and 127 even if the input is greater than 1 or smaller than 0.\n   *\n   * Passing `Infinity` will return `127` and passing `-Infinity` will return `0`. Otherwise, when\n   * the input value cannot be converted to a number, the method returns 0.\n   *\n   * @param value A positive integer between 0 and 127 (inclusive)\n   * @returns {number} A number between 0 and 1 (inclusive)\n   * @static\n   */\n  static fromFloatTo7Bit(value) {\n    if (value === Infinity) value = 1;\n    value = parseFloat(value) || 0;\n    return Math.min(Math.max(Math.round(value * 127), 0), 127);\n  }\n\n  /**\n   * Combines and converts MSB and LSB values (0-127) to a float between 0 and 1. The returned value\n   * is within between 0 and 1 even if the result is greater than 1 or smaller than 0.\n   *\n   * @param msb {number} The most significant byte as a integer between 0 and 127.\n   * @param [lsb=0] {number} The least significant byte as a integer between 0 and 127.\n   * @returns {number} A float between 0 and 1.\n   */\n  static fromMsbLsbToFloat(msb, lsb = 0) {\n\n    if (WebMidi.validation) {\n      msb = Math.min(Math.max(parseInt(msb) || 0, 0), 127);\n      lsb = Math.min(Math.max(parseInt(lsb) || 0, 0), 127);\n    }\n\n    const value = ((msb << 7) + lsb) / 16383;\n    return Math.min(Math.max(value, 0), 1);\n\n  }\n\n  /**\n   * Extracts 7bit MSB and LSB values from the supplied float.\n   *\n   * @param value {number} A float between 0 and 1\n   * @returns {{lsb: number, msb: number}}\n   */\n  static fromFloatToMsbLsb(value) {\n\n    if (WebMidi.validation) {\n      value = Math.min(Math.max(parseFloat(value) || 0, 0), 1);\n    }\n\n    const multiplied = Math.round(value * 16383);\n\n    return {\n      msb: multiplied >> 7,\n      lsb: multiplied & 0x7F\n    };\n\n  }\n\n  /**\n   * Returns the supplied MIDI note number offset by the requested octave and semitone values. If\n   * the calculated value is less than 0, 0 will be returned. If the calculated value is more than\n   * 127, 127 will be returned. If an invalid offset value is supplied, 0 will be used.\n   *\n   * @param offset\n   * @returns {number} An integer between 0 and 127\n   *\n   * @throws {Error} Invalid note number\n   * @static\n   */\n  static offsetNumber(number, octaveOffset = 0, semitoneOffset = 0) {\n\n    if (WebMidi.validation) {\n      number = parseInt(number);\n      if (isNaN(number)) throw new Error(\"Invalid note number\");\n      octaveOffset = parseInt(octaveOffset) || 0;\n      semitoneOffset = parseInt(semitoneOffset) || 0;\n    }\n\n    return Math.min(Math.max(number + (octaveOffset * 12) + semitoneOffset, 0), 127);\n\n  }\n\n  /**\n   * Returns the name of the first property of the supplied object whose value is equal to the one\n   * supplied.\n   *\n   * @param object {object}\n   * @param value {*}\n   * @returns {string} The name of the matching property\n   * @static\n   */\n  static getPropertyByValue(object, value) {\n    return Object.keys(object).find(key => object[key] === value);\n  }\n\n  /**\n   * Returns the name of a control change message matching the specified number. Some valid control\n   * change numbers do not have a specific name or purpose assigned in the MIDI\n   * [spec](https://midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2).\n   * In this case, the method returns `undefined`.\n   *\n   * @param {number} number An integer representing the control change message\n   * @returns {string|undefined} The matching control change name or `undefined` if not match was\n   * found.\n   *\n   * @static\n   */\n  static getCcNameByNumber(number) {\n    return Utilities.getPropertyByValue(Enumerations.MIDI_CONTROL_CHANGE_MESSAGES, number);\n  }\n\n  /**\n   * Returns the channel mode name matching the specified number. If no match is found, the function\n   * returns `false`.\n   *\n   * @param {number} number An integer representing the channel mode message.\n   * @returns {string|false} The name of the matching channel mode or `false` if not match could be\n   * found.\n   *\n   * @since 2.0.0\n   */\n  static getChannelModeByNumber(number) {\n\n    if ( !(number >= 120 && number <= 127) ) return false;\n\n    for (let cm in Enumerations.MIDI_CHANNEL_MODE_MESSAGES) {\n\n      if (\n        Enumerations.MIDI_CHANNEL_MODE_MESSAGES.hasOwnProperty(cm) &&\n        number === Enumerations.MIDI_CHANNEL_MODE_MESSAGES[cm]\n      ) {\n        return cm;\n      }\n\n    }\n\n    return false;\n\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\nimport {Note} from \"./Note.js\";\nimport {Enumerations} from \"./Enumerations.js\";\n\n/**\n * The `InputChannel` class represents a MIDI input channel (1-16) from a single input device. This\n * object is derived from the host's MIDI subsystem and cannot be instantiated directly.\n *\n * All 16 `InputChannel` objects can be found inside the input's [channels](Input#channels)\n * property.\n *\n * @param {Input} input The `Input` object this channel belongs to\n * @param {number} number The MIDI channel's number (1-16)\n *\n * @fires InputChannel#midimessage\n *\n * @fires InputChannel#noteoff\n * @fires InputChannel#noteon\n * @fires InputChannel#keyaftertouch\n * @fires InputChannel#controlchange\n * @fires InputChannel#programchange\n * @fires InputChannel#channelaftertouch\n * @fires InputChannel#pitchbend\n *\n * @fires InputChannel#allnotesoff\n * @fires InputChannel#allsoundoff\n * @fires InputChannel#localcontrol\n * @fires InputChannel#monomode\n * @fires InputChannel#omnimode\n * @fires InputChannel#resetallcontrollers\n *\n * @fires InputChannel#event:nrpn\n * @fires InputChannel#event:rpn\n *\n * @extends EventEmitter\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class InputChannel extends EventEmitter {\n\n  constructor(input, number) {\n\n    super();\n\n    /**\n     * @type {Input}\n     * @private\n     */\n    this._input = input;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._number = number;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * An array of messages that form the current NRPN sequence\n     * @private\n     * @type {Message[]}\n     */\n    this._nrpnBuffer = [];\n\n    /**\n     * An array of messages that form the current RPN sequence\n     * @private\n     * @type {Message[]}\n     */\n    this._rpnBuffer = [];\n\n    /**\n     * Indicates whether events for **Non-Registered Parameter Number** should be dispatched. NRPNs\n     * are composed of a sequence of specific **control change** messages. When a valid sequence of\n     * such control change messages is received, an `nrpn` event will fire.\n     *\n     * If an invalid or\n     * out-of-order control change message is received, it will fall through the collector logic and\n     * all buffered control change messages will be discarded as incomplete.\n     *\n     * @type {boolean}\n     */\n    this.parameterNumberEventsEnabled = true;\n\n    /**\n     * Contains the current playing state of all MIDI notes of this channel (0-127). The state is\n     * `true` for a currently playing note and `false` otherwise.\n     * @type {boolean[]}\n     */\n    this.notesState = new Array(128).fill(false);\n\n  }\n\n  /**\n   * Destroys the `Input` by removing all listeners and severing the link with the MIDI subsystem's\n   * input.\n   */\n  destroy() {\n    this._input = null;\n    this._number = null;\n    this._octaveOffset = 0;\n    this._nrpnBuffer = [];\n    this.notesState = new Array(128).fill(false);\n    this.parameterNumberEventsEnabled = false;\n    this.removeListener();\n  }\n\n  /**\n   * @param e MIDIMessageEvent\n   * @private\n   */\n  _processMidiMessageEvent(e) {\n\n    // Create and emit a new 'midimessage' event based on the incoming one\n    const event = Object.assign({}, e);\n    event.target = this;\n    event.type = \"midimessage\";\n\n    /**\n     * Event emitted when a MIDI message of any kind is received by an `InputChannel`\n     *\n     * @event InputChannel#midimessage\n     *\n     * @type {object}\n     *\n     * @property {Input} target The `InputChannel` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"midimessage\"`\n     *\n     * @property {Array} data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     * @property {number} event.statusByte The message's status byte  (deprecated, use the `message`\n     * object instead).\n     * @property {?number[]} event.dataBytes The message's data bytes as an array of 0, 1 or 2\n     * integers. This will be null for `sysex` messages (deprecated, use the `message` object\n     * instead).\n     */\n    this.emit(event.type, event);\n\n    // Parse the inbound event for regular MIDI messages\n    this._parseEventForStandardMessages(event);\n\n  }\n\n  /**\n   * Parses incoming channel events and emit standard MIDI message events (noteon, noteoff, etc.)\n   * @param e Event\n   * @private\n   */\n  _parseEventForStandardMessages(e) {\n\n\n    const event = Object.assign({}, e);\n    event.type = event.message.type || \"unknownmidimessage\";\n\n    const data1 = e.message.dataBytes[0];\n    const data2 = e.message.dataBytes[1];\n\n    if ( event.type === \"noteoff\" || (event.type === \"noteon\" && data2 === 0) ) {\n\n      this.notesState[data1] = false;\n\n      /**\n       * Event emitted when a **note off** MIDI message has been received on the channel.\n       *\n       * @event InputChannel#noteoff\n       *\n       * @type {object}\n       * @property {string} type `\"noteoff\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the\n       * [`InputChannel`](InputChannel) object).\n       * @property {Message} message A [`Message`](Message) object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment\n       * ([`DOMHighResTimeStamp`](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp))\n       * when the event occurred (in milliseconds since the navigation start of the document).\n       *\n       * @property {object} note A [`Note`](Note) object containing information such as note name,\n       * octave and release velocity.\n       * @property {number} value The release velocity amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The release velocity amount expressed as an integer (between 0\n       * and 127).\n       */\n\n      // The object created when a noteoff event arrives is a Note with an attack velocity of 0.\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + WebMidi.octaveOffset\n        ),\n        {\n          rawAttack: 0,\n          rawRelease: data2,\n        }\n      );\n\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      // Those are kept for backwards-compatibility but are gone from the documentation. They will\n      // be removed in future versions (@deprecated).\n      event.velocity = event.note.release;\n      event.rawVelocity = event.note.rawRelease;\n\n    } else if (event.type === \"noteon\") {\n\n      this.notesState[data1] = true;\n\n      /**\n       * Event emitted when a **note on** MIDI message has been received.\n       *\n       * @event InputChannel#noteon\n       *\n       * @type {object}\n       * @property {string} type `\"noteon\"`\n       *\n       * @property {InputChannel} channel The `InputChannel` object that triggered the event.\n       * @property {Array} data The MIDI message as an array of 8 bit values.\n       * @property {InputChannel} input The [`Input`](Input) object where through which the message\n       * was received.\n       * @property {Uint8Array} rawData The raw MIDI message as a `Uint8Array`.\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {Note} note A [`Note`](Note) object containing information such as note name,\n       * octave and attack velocity.\n       *\n       * @property {number} value The attack velocity amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The attack velocity amount expressed as an integer (between 0\n       * and 127).\n       */\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + WebMidi.octaveOffset\n        ),\n        { rawAttack: data2 }\n      );\n\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      // Those are kept for backwards-compatibility but are gone from the documentation. They will\n      // be removed in future versions (@deprecated).\n      event.velocity = event.note.attack;\n      event.rawVelocity = event.note.rawAttack;\n\n    } else if (event.type === \"keyaftertouch\") {\n\n      /**\n       * Event emitted when a **key-specific aftertouch** MIDI message has been received.\n       *\n       * @event InputChannel#keyaftertouch\n       *\n       * @type {object}\n       * @property {string} type `\"keyaftertouch\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {string} identifier The note identifier of the key to apply the aftertouch to.\n       * This includes any octave offset applied at the channel, input or global level.\n       * @property {number} key The MIDI note number of the key to apply the aftertouch to. This\n       * includes any octave offset applied at the channel, input or global level.\n       * @property {number} rawKey The MIDI note number of the key to apply the aftertouch to. This\n       * excludes any octave offset defined at the channel, input or global level.\n       * @property {number} value The aftertouch amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The aftertouch amount expressed as an integer (between 0 and\n       * 127).\n       */\n      event.identifier = Utilities.toNoteIdentifier(\n        data1, WebMidi.octaveOffset + this.input.octaveOffset + this.octaveOffset\n      );\n\n      event.key = Utilities.toNoteNumber(event.identifier);\n      event.rawKey = data1;\n\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      // This is kept for backwards-compatibility but is gone from the documentation. It will be\n      // removed from future versions (@deprecated).\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + WebMidi.octaveOffset\n        )\n      );\n\n    } else if (event.type === \"controlchange\") {\n\n      /**\n       * Event emitted when a **control change** MIDI message has been received.\n       *\n       * @event InputChannel#controlchange\n       *\n       * @type {object}\n       * @property {string} type `\"controlchange\"`\n       * @property {string} subtype The type of control change message that was received.\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      event.controller = {\n        number: data1,\n        name: Utilities.getCcNameByNumber(data1)\n      };\n\n      event.subtype = event.controller.name || \"controller\" + data1;\n\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      // Trigger channel mode message events (if appropriate)\n      if (event.message.dataBytes[0] >= 120) this._parseChannelModeMessage(event);\n\n      // Parse the inbound event to see if its part of an RPN/NRPN sequence\n      if (\n        this.parameterNumberEventsEnabled &&\n        this._isRpnOrNrpnController(event.message.dataBytes[0])\n      ) {\n        this._parseEventForParameterNumber(event);\n      }\n\n    } else if (event.type === \"programchange\") {\n\n      /**\n       * Event emitted when a **program change** MIDI message has been received.\n       *\n       * @event InputChannel#programchange\n       *\n       * @type {object}\n       * @property {string} type `\"programchange\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as an integer between 1 and 128.\n       * @property {number} rawValue The value expressed as an integer between 0 and 127..\n       */\n      event.value = data1 + 1;\n      event.rawValue = data1;\n\n    } else if (event.type === \"channelaftertouch\") {\n\n      /**\n       * Event emitted when a control change MIDI message has been received.\n       *\n       * @event InputChannel#channelaftertouch\n       *\n       * @type {object}\n       * @property {string} type `\"channelaftertouch\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      event.value = Utilities.from7bitToFloat(data1);\n      event.rawValue = data1;\n\n    } else if (event.type === \"pitchbend\") {\n\n      /**\n       * Event emitted when a pitch bend MIDI message has been received.\n       *\n       * @event InputChannel#pitchbend\n       *\n       * @type {object}\n       * @property {string} type `\"pitchbend\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 16383).\n       */\n      event.value = ((data2 << 7) + data1 - 8192) / 8192;\n      event.rawValue = (data2 << 7) + data1;\n\n    } else {\n      event.type = \"unknownmessage\";\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  _parseChannelModeMessage(e) {\n\n    // Make a shallow copy of the incoming event so we can use it as the new event.\n    const event = Object.assign({}, e);\n    event.type = event.controller.name;\n\n    /**\n     * Event emitted when an \"all sound off\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#allsoundoff\n     *\n     * @type {object}\n     * @property {string} type `\"allsoundoff\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when a \"reset all controllers\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#resetallcontrollers\n     *\n     * @type {object}\n     * @property {string} type `\"resetallcontrollers\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when a \"local control\" channel-mode MIDI message has been received. The value\n     * property of the event is set to either `true` (local control on) of `false` (local control\n     * off).\n     *\n     * @event InputChannel#localcontrol\n     *\n     * @type {object}\n     * @property {string} type `\"localcontrol\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value For local control on, the value is `true`. For local control off,\n     * the value is `false`.\n     */\n    if (event.type === \"localcontrol\") {\n      event.value = event.message.data[2] === 127 ? true : false;\n    }\n\n    /**\n     * Event emitted when an \"all notes off\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#allnotesoff\n     *\n     * @type {object}\n     * @property {string} type `\"allnotesoff\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when an \"omni mode\" channel-mode MIDI message has been received. The value\n     * property of the event is set to either `true` (omni mode on) of `false` (omni mode off).\n     *\n     * @event InputChannel#omnimode\n     *\n     * @type {object}\n     * @property {string} type `\"omnimode\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n     */\n    if (event.type === \"omnimodeon\") {\n      event.type = \"omnimode\";\n      event.value = true;\n    } else if (event.type === \"omnimodeoff\") {\n      event.type = \"omnimode\";\n      event.value = false;\n    }\n\n    /**\n     * Event emitted when a \"mono/poly mode\" MIDI message has been received. The value property of\n     * the event is set to either `true` (mono mode on / poly mode off) or `false` (mono mode off /\n     * poly mode on).\n     *\n     * @event InputChannel#monomode\n     *\n     * @type {object}\n     * @property {string} type `\"monomode\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n     */\n    if (event.type === \"monomodeon\") {\n      event.type = \"monomode\";\n      event.value = true;\n    } else if (event.type === \"polymodeon\") {\n      event.type = \"monomode\";\n      event.value = false;\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Parses inbound events to identify NRPN sequences.\n   * @param e Event\n   * @private\n   */\n  _parseEventForParameterNumber(event) {\n\n    // To make it more legible\n    const controller = event.message.dataBytes[0];\n    const value = event.message.dataBytes[1];\n    const list = Enumerations.MIDI_CONTROL_CHANGE_MESSAGES;\n\n    // A. Check if the message is the start of an RPN (101) or NRPN (99) parameter declaration.\n    if (\n      controller === list.nonregisteredparameterfine ||         // 99\n      controller === list.registeredparameterfine               // 101\n    ) {\n\n      this._nrpnBuffer = [];\n      this._rpnBuffer = [];\n\n      if (controller === list.nonregisteredparameterfine) {     // 99\n        this._nrpnBuffer = [event.message];\n      } else {                                                  // 101\n        // 127 is a reset so we ignore it\n        if (value !== 127) this._rpnBuffer = [event.message];\n      }\n\n    // B. Check if the message is the end of an RPN (100) or NRPN (98) parameter declaration.\n    } else if (\n      controller === list.nonregisteredparametercoarse ||       // 98\n      controller === list.registeredparametercoarse             // 100\n    ) {\n\n      if (controller === list.nonregisteredparametercoarse) {   // 98\n\n        // Flush the other buffer (they are mutually exclusive)\n        this._rpnBuffer = [];\n\n        // Check if we are in sequence\n        if (this._nrpnBuffer.length === 1) {\n          this._nrpnBuffer.push(event.message);\n        } else {\n          this._nrpnBuffer = []; // out of sequence\n        }\n\n      } else {                                                  // 100\n\n        // Flush the other buffer (they are mutually exclusive)\n        this._nrpnBuffer = [];\n\n        // 127 is a reset so we ignore it\n        if (this._rpnBuffer.length === 1 && value !== 127) {\n          this._rpnBuffer.push(event.message);\n        } else {\n          this._rpnBuffer = []; // out of sequence or reset\n        }\n\n      }\n\n    // C. Check if the message is for data entry (6, 38, 96 or 97). Those messages trigger events.\n    } else if (\n      controller === list.dataentrycoarse ||                    // 6\n      controller === list.dataentryfine ||                      // 38\n      controller === list.databuttonincrement ||                // 96\n      controller === list.databuttondecrement                   // 97\n    ) {\n\n      if (this._rpnBuffer.length === 2) {\n        this._dispatchParameterNumberEvent(\n          \"rpn\",\n          this._rpnBuffer[0].dataBytes[1],\n          this._rpnBuffer[1].dataBytes[1],\n          event\n        );\n      } else if (this._nrpnBuffer.length === 2) {\n        this._dispatchParameterNumberEvent(\n          \"nrpn\",\n          this._nrpnBuffer[0].dataBytes[1],\n          this._nrpnBuffer[1].dataBytes[1],\n          event\n        );\n      } else {\n        this._nrpnBuffer = [];\n        this._rpnBuffer = [];\n      }\n\n    }\n\n  }\n\n  /**\n   * Indicates whether the specified controller can be part of an RPN or NRPN sequence\n   * @param controller\n   * @returns {boolean}\n   * @private\n   */\n  _isRpnOrNrpnController(controller) {\n\n    return controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.dataentrycoarse ||        //   6\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.dataentryfine ||               //  38\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.databuttonincrement ||         //  96\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.databuttondecrement ||         //  97\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.nonregisteredparametercoarse ||//  98\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.nonregisteredparameterfine ||  //  99\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.registeredparametercoarse ||   // 100\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.registeredparameterfine;       // 101\n\n  }\n\n  _dispatchParameterNumberEvent(type, paramMsb, paramLsb, e) {\n\n    /**\n     * Event emitted when an NRPN message is received on the input. Four types of NRPN messages can\n     * be received:\n     *\n     *   * `\"dataentrycoarse\"`\n     *   * `\"dataentryfine\"`\n     *   * `\"databuttonincrement\"`\n     *   * `\"databuttondecrement\"`\n     *\n     * The parameter to which the message applies can be found in the event's `parameter` property.\n     *\n     * @event InputChannel#nrpn\n     *\n     * @type {object}\n     *\n     * @property {string} type `\"nrpn\"`\n     * @property {string} subtype The precise type of NRPN message that was received.\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {number} parameter The non-registered parameter number (0-16383)\n     * @property {number} parameterMsb The MSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} parameterLsb: The LSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an RPN message is received on the input. Four types of RPN messages can\n     * be received:\n     *\n     *   * `\"dataentrycoarse\"`\n     *   * `\"dataentryfine\"`\n     *   * `\"databuttonincrement\"`\n     *   * `\"databuttondecrement\"`\n     *\n     * The parameter to which the message applies can be found in the event's `parameter` property.\n     * It is one of the ones defined in\n     * [`Enumerations.MIDI_REGISTERED_PARAMETERS`](Enumerations#MIDI_REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn\n     *\n     * @type {object}\n     *\n     * @property {string} type `\"rpn\"`\n     * @property {string} subtype The precise type of RPN message that was received.\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    const event = {\n      target: e.target,\n      timestamp: e.timestamp,\n      parameterMsb: paramMsb,\n      parameterLsb: paramLsb,\n      value: Utilities.from7bitToFloat(e.message.dataBytes[1]),\n      rawValue: e.message.dataBytes[1],\n      type: type === \"rpn\" ? \"rpn\" : \"nrpn\"\n    };\n\n    // Retrieve controller type and append to event type\n    event.subtype = Utilities.getPropertyByValue(\n      Enumerations.MIDI_CONTROL_CHANGE_MESSAGES,\n      e.message.dataBytes[0]\n    );\n\n    // Identify the parameter (by name for RPN and by number for NRPN)\n    if (type === \"rpn\") {\n\n      event.parameter = Object.keys(Enumerations.MIDI_REGISTERED_PARAMETERS).find(key => {\n        return Enumerations.MIDI_REGISTERED_PARAMETERS[key][0] === paramMsb &&\n          Enumerations.MIDI_REGISTERED_PARAMETERS[key][1] === paramLsb;\n      });\n\n    } else {\n      event.parameter = (paramMsb << 7) + paramLsb;\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * @deprecated since version 3.\n   * @private\n   */\n  getChannelModeByNumber(number) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.\"\n      );\n      number = Math.floor(number);\n    }\n\n    return Utilities.getChannelModeByNumber(number);\n\n  }\n\n  /**\n   * @deprecated since version 3.\n   * @private\n   */\n  getCcNameByNumber(number) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The 'getCcNameByNumber()' method has been moved to the 'Utilities' class.\"\n      );\n      number = parseInt(number);\n      if ( !(number >= 0 && number <= 127) ) throw new RangeError(\"Invalid control change number.\");\n    }\n\n    return Utilities.getCcNameByNumber(number);\n\n  }\n\n  /**\n   * Return the playing status of the specified note. The `note` parameter can be an unsigned\n   * integer (0-127), a note identifier (`\"C4\"`, `\"G#5\"`, etc.) or a {@link Note} object.\n   *\n   * If a note identifier or Note object is passed in, the method will take into account any\n   * `octaveOffset` defined.\n   *\n   * @param [input] {number|string|Note}\n   * @returns {boolean}\n   * @since version 3.0.0\n   */\n  getNoteState(note) {\n\n    // If it's a note object, we simply use the identifier\n    if (note instanceof Note) note = note.identifier;\n\n    const number = Utilities.guessNoteNumber(\n      note,\n      WebMidi.octaveOffset + this.input.octaveOffset + this.octaveOffset\n    );\n\n    return this.notesState[number];\n\n  }\n\n  /**\n   * An integer to offset the reported octave of incoming note-specific messages (`noteon`,\n   * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n   * octave (C4).\n   *\n   * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n   * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n   *\n   * Note that this value is combined with the global offset value defined on the `WebMidi` object\n   * and with the value defined on the parent `Input` object.\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * The [`Input`](Input) this channel belongs to\n   * @type {Input}\n   * @since 3.0\n   */\n  get input() {\n    return this._input;\n  }\n\n  /**\n   * This channel's MIDI number (1-16)\n   * @type {number}\n   * @since 3.0\n   */\n  get number() {\n    return this._number;\n  }\n\n  /**\n   * Whether RPN/NRPN events are parsed and dispatched.\n   * @type {boolean}\n   * @since 3.0\n   * @deprecated Use parameterNumberEventsEnabled instead.\n   * @private\n   */\n  get nrpnEventsEnabled() {\n    return this.parameterNumberEventsEnabled;\n  }\n  set nrpnEventsEnabled(value) {\n\n    if (this.validation) {\n      value = !!value;\n    }\n\n    this.parameterNumberEventsEnabled = value;\n\n  }\n\n  /**\n   * Array of channel-specific event names that can be listened to.\n   * @type {string[]}\n   * @readonly\n   */\n  static get EVENTS() {\n\n    return [\n\n      // MIDI channel message events\n      \"noteoff\",\n      \"controlchange\",\n      \"noteon\",\n      \"keyaftertouch\",\n      \"programchange\",\n      \"channelaftertouch\",\n      \"pitchbend\",\n\n      // MIDI channel mode events\n      \"allnotesoff\",\n      \"allsoundoff\",\n      \"localcontrol\",\n      \"monomode\",\n      \"omnimode\",\n      \"resetallcontrollers\",\n\n      // RPN/NRPN events\n      \"nrpn\",\n      \"rpn\"\n\n    ];\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\nimport {Enumerations} from \"./Enumerations.js\";\n\n/**\n * The `OutputChannel` class represents a single output channel (1-16) from an output device. This\n * object is derived from the host's MIDI subsystem and cannot be instantiated directly.\n *\n * All 16 `OutputChannel` objects can be found inside the parent output's\n * [channels]{@link Output#channels} property.\n *\n * @param {Output} output The output this channel belongs to\n * @param {number} number The MIDI channel number (1-16)\n *\n * @extends EventEmitter\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class OutputChannel extends EventEmitter {\n\n  constructor(output, number) {\n\n    super();\n\n    /**\n     * @type {Output}\n     * @private\n     */\n    this._output = output;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._number = number;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n  }\n\n  /**\n   * Unlinks the MIDI subsystem, removes all listeners attached to the channel and nulls the channel\n   * number. This method is mostly for internal use. It has not been prefixed with an underscore\n   * since it is called by other objects such as the `Output` object.\n   *\n   * @private\n   */\n  destroy() {\n    this._output = null;\n    this._number = null;\n    this._octaveOffset = 0;\n    this.removeListener();\n  }\n\n  /**\n   * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\n   * sent immediately. The message should be an array of 8 bit unsigned integers (0-225), a\n   * [Uint8Array]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n   * object or a `Message` object.\n   *\n   * It is usually not necessary to use this method directly as you can use one of the simpler\n   * helper methods such as `playNote()`, `stopNote()`, `sendControlChange()`, etc.\n   *\n   * Details on the format of MIDI messages are available in the summary of\n   * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}\n   * from the MIDI Manufacturers Association.\n   *\n   * @param message {number[]|Uint8Array|Message} An array of 8bit unsigned integers, a `Uint8Array`\n   * object (not available in Node.js) containing the message bytes or a `Message` object.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a positive\n   * number\n   * ([DOMHighResTimeStamp]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that point time. If `time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.\n   *\n   * @throws {RangeError} Data bytes must be integers between 0 and 255.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  send(message, options = {time: 0}) {\n    this.output.send(message, options);\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **key aftertouch** message at the scheduled time. This is a key-specific\n   * aftertouch. For a channel-wide aftertouch message, use\n   * [setChannelAftertouch()]{@link Output#setChannelAftertouch}.\n   *\n   * The key can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier such as `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`, etc.\n   *\n   * @param target {number|string|number[]|string[]} The key(s) for which you are sending an\n   * aftertouch value. The notes can be specified by using a MIDI note number (0-127), a note\n   * identifier (e.g. C3, G#4, F-1, Db7), or an array of the previous types.\n   *\n   * When using a note identifier, the octave value will be offset by the combined value of\n   * `InputChannel.octaveOffset`, `Input.octaveOffset` and `WebMidi.octaveOffset` (if those values\n   * are not `0`). When using a key number, octaveOffset values are ignored.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure is defined by using an integer between 0 and 127.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {boolean} [options.useRawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @return {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @throws RangeError Invalid key aftertouch value.\n   */\n  setKeyAftertouch(target, pressure, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy support\n      if (options.useRawValue) options.rawValue = options.useRawValue;\n\n      if (isNaN(parseFloat(pressure))) {\n        throw new RangeError(\"Invalid key aftertouch value.\");\n      }\n      if (options.rawValue) {\n        if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) {\n          throw new RangeError(\"Key aftertouch raw value must be an integer between 0 and 127.\");\n        }\n      } else {\n        if (!(pressure >= 0 && pressure <= 1)) {\n          throw new RangeError(\"Key aftertouch value must be a float between 0 and 1.\");\n        }\n      }\n\n    }\n\n    // Normalize pressure to integer\n    if (!options.rawValue) pressure = Utilities.fromFloatTo7Bit(pressure);\n\n    // Retrieve key number. If identifier specified, offset by total offset value\n    const offset = WebMidi.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n    if (!Array.isArray(target)) target = [target];\n    target = target.map(item => Utilities.guessNoteNumber(item));\n\n    target.forEach(n => {\n      this.send(\n        [\n          (Enumerations.MIDI_CHANNEL_MESSAGES.keyaftertouch << 4) + (this.number - 1),\n          Utilities.offsetNumber(n, offset),\n          pressure\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n\n\n\n\n    //\n    // Utilities.buildNoteArray(note, {rawAttack: nVelocity}).forEach(n => {\n    //   this.send(\n    //     [\n    //       (Enumerations.MIDI_CHANNEL_MESSAGES.noteon << 4) + (this.number - 1),\n    //       n.getOffsetNumber(offset),\n    //       n.rawAttack\n    //     ],\n    //     {time: Utilities.toTimestamp(options.time)}\n    //   );\n    // });\n\n\n  }\n\n  /**\n   * Sends a MIDI **control change** message to the channel at the scheduled time. The control\n   * change message to send can be specified numerically (0 to 127) or by using one of the following\n   * common names:\n   *\n   *  * `bankselectcoarse` (#0)\n   *  * `modulationwheelcoarse` (#1)\n   *  * `breathcontrollercoarse` (#2)\n   *  * `footcontrollercoarse` (#4)\n   *  * `portamentotimecoarse` (#5)\n   *  * `dataentrycoarse` (#6)\n   *  * `volumecoarse` (#7)\n   *  * `balancecoarse` (#8)\n   *  * `pancoarse` (#10)\n   *  * `expressioncoarse` (#11)\n   *  * `effectcontrol1coarse` (#12)\n   *  * `effectcontrol2coarse` (#13)\n   *  * `generalpurposeslider1` (#16)\n   *  * `generalpurposeslider2` (#17)\n   *  * `generalpurposeslider3` (#18)\n   *  * `generalpurposeslider4` (#19)\n   *  * `bankselectfine` (#32)\n   *  * `modulationwheelfine` (#33)\n   *  * `breathcontrollerfine` (#34)\n   *  * `footcontrollerfine` (#36)\n   *  * `portamentotimefine` (#37)\n   *  * `dataentryfine` (#38)\n   *  * `volumefine` (#39)\n   *  * `balancefine` (#40)\n   *  * `panfine` (#42)\n   *  * `expressionfine` (#43)\n   *  * `effectcontrol1fine` (#44)\n   *  * `effectcontrol2fine` (#45)\n   *  * `holdpedal` (#64)\n   *  * `portamento` (#65)\n   *  * `sustenutopedal` (#66)\n   *  * `softpedal` (#67)\n   *  * `legatopedal` (#68)\n   *  * `hold2pedal` (#69)\n   *  * `soundvariation` (#70)\n   *  * `resonance` (#71)\n   *  * `soundreleasetime` (#72)\n   *  * `soundattacktime` (#73)\n   *  * `brightness` (#74)\n   *  * `soundcontrol6` (#75)\n   *  * `soundcontrol7` (#76)\n   *  * `soundcontrol8` (#77)\n   *  * `soundcontrol9` (#78)\n   *  * `soundcontrol10` (#79)\n   *  * `generalpurposebutton1` (#80)\n   *  * `generalpurposebutton2` (#81)\n   *  * `generalpurposebutton3` (#82)\n   *  * `generalpurposebutton4` (#83)\n   *  * `reverblevel` (#91)\n   *  * `tremololevel` (#92)\n   *  * `choruslevel` (#93)\n   *  * `celestelevel` (#94)\n   *  * `phaserlevel` (#95)\n   *  * `databuttonincrement` (#96)\n   *  * `databuttondecrement` (#97)\n   *  * `nonregisteredparametercoarse` (#98)\n   *  * `nonregisteredparameterfine` (#99)\n   *  * `registeredparametercoarse` (#100)\n   *  * `registeredparameterfine` (#101)\n   *\n   *  * `allsoundoff` (#120)\n   *  * `resetallcontrollers` (#121)\n   *  * `localcontrol` (#122)\n   *  * `allnotesoff` (#123)\n   *  * `omnimodeoff` (#124)\n   *  * `omnimodeon` (#125)\n   *  * `monomodeon` (#126)\n   *  * `polymodeon` (#127)\n   *\n   * As you can see above, not all control change message have a matching common name. This\n   * does not mean you cannot use the others. It simply means you will need to use their number\n   * (0-127) instead of their name. While you can still use them, numbers 120 to 127 are usually\n   * reserved for *channel mode* messages. See\n   * [sendChannelMode()]{@link OutputChannel#sendChannelMode} method for more info.\n   *\n   * To view a detailed list of all available **control change** messages, please consult \"Table 3 -\n   * Control Change Messages\" from the [MIDI Messages](\n   * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)\n   * specification.\n   *\n   * Note: messages #0-31 (MSB) are paired with messages #32-63 (LSB). For example, message #1\n   * (modulationwheelcoarse) can be accompanied by a second control change message for\n   * modulationwheelfine to achieve a greater level of precision. if you want to specify both MSB\n   * and LSB for messages between 0 and 31, you can do so by passing a 2-value array as the second\n   * parameter.\n   *\n   * @param {number|string} controller The MIDI controller name or number (0-127).\n   *\n   * @param {number|number[]} value The value to send (0-127). You can also use a two-position array\n   * for controllers 0 to 31. In this scenario, the first value will be sent as usual and the second\n   * calue will be sent to the matching LSB controller (which is obtained by adding 32 to the first\n   * controller)\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 127.\n   * @throws {RangeError} Invalid controller name.\n   * @throws {TypeError} The value array must have a length of 2.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   */\n  sendControlChange(controller, value, options = {}) {\n\n    if (typeof controller === \"string\") {\n      controller = Enumerations.MIDI_CONTROL_CHANGE_MESSAGES[controller];\n    }\n\n    if (!Array.isArray(value)) value = [value];\n\n    if (WebMidi.validation) {\n\n      if (controller === undefined) {\n        throw new TypeError(\n          \"Control change must be identified with a valid name or an integer between 0 and 127.\"\n        );\n      }\n\n      if (!Number.isInteger(controller) || !(controller >= 0 && controller <= 127)) {\n        throw new TypeError(\"Control change number must be an integer between 0 and 127.\");\n      }\n\n      value = value.map(item => {\n        const output = Math.min(Math.max(parseInt(item), 0), 127);\n        if (isNaN(output)) throw new TypeError(\"Values must be integers between 0 and 127\");\n        return output;\n      });\n\n      if (value.length === 2 && controller >= 32) {\n        throw new TypeError(\"To use a value array, the controller must be between 0 and 31\");\n      }\n\n    }\n\n    value.forEach((item, index) => {\n\n      this.send(\n        [\n          (Enumerations.MIDI_CHANNEL_MESSAGES.controlchange << 4) + (this.number - 1),\n          controller + (index * 32),\n          value[index]\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Selects a MIDI non-registered parameter so it is affected by upcoming data entry, data\n   * increment and data decrement messages.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes that identify\n   * the registered parameter. The NRPN MSB (99 or 0x63) is a position 0. The NRPN LSB (98 or 0x62)\n   * is at position 1.\n   *\n   * @private\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _selectNonRegisteredParameter(parameter, options = {}) {\n\n    // parameter[0] = Math.floor(parameter[0]);\n    // if (!(parameter[0] >= 0 && parameter[0] <= 127)) {\n    //   throw new RangeError(\"The control63 value must be between 0 and 127.\");\n    // }\n    //\n    // parameter[1] = Math.floor(parameter[1]);\n    // if (!(parameter[1] >= 0 && parameter[1] <= 127)) {\n    //   throw new RangeError(\"The control62 value must be between 0 and 127.\");\n    // }\n\n    this.sendControlChange(0x63, parameter[0], options);\n    this.sendControlChange(0x62, parameter[1], options);\n\n    return this;\n\n  }\n\n  /**\n   * Deselects the currently active MIDI registered parameter so it is no longer affected by data\n   * entry, data increment and data decrement messages.\n   *\n   * Current best practice recommends doing that after each call to\n   * [_setCurrentParameter()]{@link OutputChannel#_setCurrentParameter}.\n   *\n   * @private\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _deselectRegisteredParameter(options = {}) {\n    this.sendControlChange(0x65, 0x7F, options);\n    this.sendControlChange(0x64, 0x7F, options);\n    return this;\n  }\n\n  /**\n   * Deselects the currently active MIDI non-registered parameter so it is no longer affected by\n   * data entry, data increment and data decrement messages.\n   *\n   * @private\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _deselectNonRegisteredParameter(options = {}) {\n    this.sendControlChange(0x65, 0x7F, options);\n    this.sendControlChange(0x64, 0x7F, options);\n    return this;\n  }\n\n  /**\n   * Selects a MIDI registered parameter so it is affected by upcoming data entry, data increment\n   * and data decrement messages.\n   *\n   * @private\n   *\n   * @param parameter {number[]} A two-position array of integers specifying the two control bytes\n   * (0x65, 0x64) that identify the registered parameter. The integers must be between 0 and 127.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _selectRegisteredParameter(parameter, options = {}) {\n    this.sendControlChange(0x65, parameter[0], options);\n    this.sendControlChange(0x64, parameter[1], options);\n    return this;\n  }\n\n  /**\n   * Sets the value of the currently selected MIDI registered parameter.\n   *\n   * @private\n   *\n   * @param data {number|number[]}\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _setCurrentParameter(data, options = {}) {\n\n    data = [].concat(data);\n\n    // MSB\n    // data[0] = parseInt(data[0]);\n    // if (!isNaN(data[0]) && data[0] >= 0 && data[0] <= 127) {\n    this.sendControlChange(0x06, data[0], options);\n    // } else {\n    //   throw new RangeError(\"The msb value must be between 0 and 127.\");\n    // }\n\n    if (data.length < 2) return this;\n\n    // LSB\n    // data[1] = parseInt(data[1]);\n\n    // if (!isNaN(data[1]) && data[1] >= 0 && data[1] <= 127) {\n    this.sendControlChange(0x26, data[1], options);\n    // } else {\n    //   throw new RangeError(\"The lsb value must be between 0 and 127.\");\n    // }\n\n    return this;\n\n  }\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified registered parameter is invalid.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  decrementRegisteredParameter(parameter, options = {}) {\n\n    if (!Array.isArray(parameter)) parameter = Enumerations.MIDI_REGISTERED_PARAMETERS[parameter];\n\n    if (WebMidi.validation) {\n      if (parameter === undefined) {\n        throw new TypeError(\"The specified registered parameter is invalid.\");\n      }\n\n      let valid = false;\n\n      Object.getOwnPropertyNames(Enumerations.MIDI_REGISTERED_PARAMETERS).forEach(p => {\n        if (\n          Enumerations.MIDI_REGISTERED_PARAMETERS[p][0] === parameter[0] &&\n          Enumerations.MIDI_REGISTERED_PARAMETERS[p][1] === parameter[1]\n        ) {\n          valid = true;\n        }\n      });\n\n      if (!valid) throw new TypeError(\"The specified registered parameter is invalid.\");\n    }\n\n    this._selectRegisteredParameter(parameter, options);\n    this.sendControlChange(0x61, 0, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified registered parameter is invalid.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  incrementRegisteredParameter(parameter, options = {}) {\n\n    if (!Array.isArray(parameter)) parameter = Enumerations.MIDI_REGISTERED_PARAMETERS[parameter];\n\n    if (WebMidi.validation) {\n      if (parameter === undefined) {\n        throw new TypeError(\"The specified registered parameter is invalid.\");\n      }\n\n      let valid = false;\n\n      Object.getOwnPropertyNames(Enumerations.MIDI_REGISTERED_PARAMETERS).forEach(p => {\n        if (\n          Enumerations.MIDI_REGISTERED_PARAMETERS[p][0] === parameter[0] &&\n          Enumerations.MIDI_REGISTERED_PARAMETERS[p][1] === parameter[1]\n        ) {\n          valid = true;\n        }\n      });\n\n      if (!valid) throw new TypeError(\"The specified registered parameter is invalid.\");\n    }\n\n    this._selectRegisteredParameter(parameter, options);\n    this.sendControlChange(0x60, 0, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Plays a note or an array of notes on the channel. The first parameter is the note to play. It\n   * can be a single value or an array of the following valid values:\n   *\n   *  - A {@link Note} object\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *\n   * The `playNote()` method sends a **note on** MIDI message for all specified notes on all\n   * specified channels. If a `duration` is set in the `options` parameter or in the {@link Note}\n   * object's [duration]{@link Note#duration} property, it will also schedule a **note off** message\n   * to end the note after said duration. If no `duration` is set, the note will simply play until\n   * a matching **note off** message is sent with [stopNote()]{@link OutputChannel#stopNote} or\n   * [sendNoteOff()]{@link OutputChannel#sendNoteOff}.\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the durations and velocities defined in the {@link Note}\n   * objects have precedence over the ones specified via the method's `options` parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration] A positive number larger than 0 representing the number of\n   * milliseconds to wait before sending a **note off** message. If invalid or left undefined, only\n   * a **note on** message will be sent.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity\n   * value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=0.5] The attack velocity at which to play the note (between\n   * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will\n   * silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`. This is only used with the\n   * **note off** event triggered when `options.duration` is set.\n   *\n   * @param {number} [options.rawRelease=0.5] The velocity at which to release the note (between `0`\n   * and `127`). This has priority over the `release` property. An invalid velocity value will\n   * silently trigger the default of `0.5`. This is only used with the **note off** event triggered\n   * when `options.duration` is set.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  playNote(note, options = {}) {\n\n    // Send note on and, optionally, note off message (if duration is a positive number)\n    this.sendNoteOn(note, options);\n\n    // https://stackoverflow.com/questions/600763#answer-601877\n    if (options.duration > 0 && isFinite(String(options.duration).trim() || NaN)) {\n\n      let noteOffOptions = {\n        time: (Utilities.toTimestamp(options.time) || WebMidi.time) + options.duration,\n        release: options.release,\n        rawRelease: options.rawRelease,\n      };\n\n      this.sendNoteOff(note, noteOffOptions);\n\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified notes on the channel. The first parameter is the\n   * note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   *  The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the release velocity defined in the {@link Note} objects has\n   * precedence over the one specified via the method's `options` parameter.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNoteOff(note, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (\n        options.rawRelease != undefined &&\n        !(options.rawRelease >= 0 && options.rawRelease <= 127)\n      ) {\n        throw new RangeError(\"The 'rawRelease' option must be an integer between 0 and 127\");\n      }\n\n      if (options.release != undefined && !(options.release >= 0 && options.release <= 1)) {\n        throw new RangeError(\"The 'release' option must be an number between 0 and 1\");\n      }\n\n      // Legacy compatibility warnings\n      if (options.rawVelocity) {\n        options.rawRelease = options.velocity;\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.\");\n      }\n      if (options.velocity) {\n        options.release = options.velocity;\n        console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n      }\n\n    }\n\n    let nVelocity = 64;\n\n    if (options.rawRelease != undefined) {\n      nVelocity = options.rawRelease;\n    } else {\n      if (!isNaN(options.release)) nVelocity = Math.round(options.release * 127);\n    }\n\n    // Plot total octave offset\n    const offset = WebMidi.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n\n    Utilities.buildNoteArray(note, {rawRelease: parseInt(nVelocity)}).forEach(n => {\n      this.send(\n        [\n          (Enumerations.MIDI_CHANNEL_MESSAGES.noteoff << 4) + (this.number - 1),\n          n.getOffsetNumber(offset),\n          n.rawRelease,\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * This is an alias to the [sendNoteOff()]{@link OutputChannel#sendNoteOff} method.\n   *\n   * @see {@link OutputChannel#sendNoteOff}\n   *\n   * @param note\n   * @param options\n   * @returns {Output}\n   */\n  stopNote(note, options = {}) {\n    return this.sendNoteOff(note, options);\n  }\n\n  /**\n   * Sends a **note on** message for the specified note(s) on the channel. The first parameter is\n   * the note. It can be a single value or an array of the following valid values:\n   *\n   *  - A {@link Note} object\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *\n   *  When passing a {@link Note} object or a note name, the `octaveOffset` will be applied. This is\n   *  not the case when using a note number number. In this case, we assume you know exactly which\n   *  MIDI note number should be sent out.\n   *\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the attack velocity defined in the {@link Note} objects has\n   * precedence over the one specified via the method's `options` parameter. Also, the `duration` is\n   * ignored. If you want to also send a **note off** message, use the\n   * [playNote()]{@link Output#playNote} method instead.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The velocity at which to release the note (between `0`\n   * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `64`.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNoteOn(note, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (options.rawAttack != undefined && !(options.rawAttack >= 0 && options.rawAttack <= 127)) {\n        throw new RangeError(\"The 'rawAttack' option must be an integer between 0 and 127\");\n      }\n\n      if (options.attack != undefined && !(options.attack >= 0 && options.attack <= 1)) {\n        throw new RangeError(\"The 'attack' option must be an number between 0 and 1\");\n      }\n\n      // Legacy compatibility warnings\n      if (options.rawVelocity) {\n        options.rawAttack = options.velocity;\n        options.rawRelease = options.release;\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.\");\n      }\n      if (options.velocity) {\n        options.attack = options.velocity;\n        console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n      }\n\n    }\n\n    let nVelocity = 64;\n\n    if (options.rawAttack != undefined) {\n      nVelocity = options.rawAttack;\n    } else {\n      if (!isNaN(options.attack)) nVelocity = Math.round(options.attack * 127);\n    }\n\n    // Plot total octave offset\n    const offset = WebMidi.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n\n    Utilities.buildNoteArray(note, {rawAttack: nVelocity}).forEach(n => {\n      this.send(\n        [\n          (Enumerations.MIDI_CHANNEL_MESSAGES.noteon << 4) + (this.number - 1),\n          n.getOffsetNumber(offset),\n          n.rawAttack\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel mode** message. The channel mode message to send can be specified\n   * numerically or by using one of the following common names:\n   *\n   *   * `\"allsoundoff\"` (#120)\n   *   * `\"resetallcontrollers\"` (#121)\n   *   * `\"localcontrol\"` (#122)\n   *   * `\"allnotesoff\"` (#123)\n   *   * `\"omnimodeoff\"` (#124)\n   *   * `\"omnimodeon\"` (#125)\n   *   * `\"monomodeon\"` (#126)\n   *   * `\"polymodeon\"` (#127)\n   *\n   * It should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may\n   * require a value that's not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * To make it easier, all channel mode messages have a matching helper method:\n   *\n   *   - [turnSoundOff()]{@link Output#turnSoundOff}\n   *   - [resetAllControllers()]{@link Output#resetAllControllers}\n   *   - [setLocalControl()]{@link Output#turnSoundOff}\n   *   - [turnNotesOff()]{@link Output#turnNotesOff}\n   *   - [setOmniMode()]{@link Output#setOmniMode}\n   *   - [setPolyphonicMode()]{@link Output#setPolyphonicMode}\n   *\n   * @param command {number|string} The numerical identifier of the channel mode message (integer\n   * between 120-127) or its name as a string.\n   *\n   * @param value {number} The value to send (integer between 0-127).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendChannelMode(command, value, options = {}) {\n\n    // Normalize command to integer\n    if (typeof command === \"string\") command = Enumerations.MIDI_CHANNEL_MODE_MESSAGES[command];\n\n    if (WebMidi.validation) {\n\n      if (command === undefined) {\n        throw new TypeError(\"Invalid channel mode message name or number.\");\n      }\n\n      if (isNaN(command) || !(command >= 120 && command <= 127)) {\n        throw new TypeError(\"Invalid channel mode message number.\");\n      }\n\n      if (isNaN(parseInt(value)) || value < 0 || value > 127) {\n        throw new RangeError(\"Value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    this.send(\n      [\n        (Enumerations.MIDI_CHANNEL_MESSAGES.controlchange << 4) + (this.number - 1),\n        command,\n        value\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets OMNI mode to `\"on\"` or `\"off\"`. MIDI's OMNI mode causes the instrument to respond to\n   * messages from all channels.\n   *\n   * It should be noted that support for OMNI mode is not as common as it used to be.\n   *\n   * @param [state=true] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setOmniMode(state, options = {}) {\n\n    if (state === undefined || state) {\n      this.sendChannelMode(\"omnimodeon\", 0, options);\n    } else {\n      this.sendChannelMode(\"omnimodeoff\", 0, options);\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel aftertouch** message. For key-specific aftertouch, you should instead\n   * use [setKeyAftertouch()]{@link Output#setKeyAftertouch}.\n   *\n   * @param [pressure] {number} The pressure level (between 0 and 1). If the `rawValue` option is\n   * set to `true`, the pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @throws RangeError Invalid channel aftertouch value.\n   */\n  setChannelAftertouch(pressure, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (isNaN(parseFloat(pressure))) {\n        throw new RangeError(\"Invalid channel aftertouch value.\");\n      }\n\n      if (options.rawValue) {\n        if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) {\n          throw new RangeError(\n            \"Channel aftertouch raw value must be an integer between 0 and 127.\")\n          ;\n        }\n      } else {\n        if (!(pressure >= 0 && pressure <= 1)) {\n          throw new RangeError(\"Channel aftertouch value must be a float between 0 and 1.\");\n        }\n      }\n\n    }\n\n    this.send(\n      [\n        (Enumerations.MIDI_CHANNEL_MESSAGES.channelaftertouch << 4) + (this.number - 1),\n        Math.round(pressure * 127)\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **master tuning** message. The value is decimal and must be larger than -65 semitones\n   * and smaller than 64 semitones.\n   *\n   * Because of the way the MIDI specification works, the decimal portion of the value will be\n   * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n   * a **Master Fine Tuning** RPN messages.\n   *\n   * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setMasterTuning(value, options = {}) {\n\n    // @todo allow passing value as msb/lsb pair (the same as pitch bend range)\n\n    value = parseFloat(value) || 0.0;\n\n    if (WebMidi.validation) {\n\n      if (!(value > -65 && value < 64)) {\n        throw new RangeError(\n          \"The value must be a decimal number larger than -65 and smaller than 64.\"\n        );\n      }\n\n    }\n\n    let coarse = Math.floor(value) + 64;\n    let fine = value - Math.floor(value);\n\n    // Calculate MSB and LSB for fine adjustment (14bit resolution)\n    fine = Math.round((fine + 1) / 2 * 16383);\n    let msb = (fine >> 7) & 0x7F;\n    let lsb = fine & 0x7F;\n\n    this.setRegisteredParameter(\"channelcoarsetuning\", coarse, options);\n    this.setRegisteredParameter(\"channelfinetuning\", [msb, lsb], options);\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **modulation depth range** message to adjust the depth of the modulation wheel's range.\n   * The range can be specified with the `semitones` parameter, the `cents` parameter or by\n   * specifying both parameters at the same time.\n   *\n   * @param {number} semitones The desired adjustment value in semitones (integer between 0 and\n   * 127).\n   *\n   * @param {number} [cents=0] The desired adjustment value in cents (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setModulationRange(semitones, cents, options = {}) {\n\n    // @todo allow passing value as msb/lsb pair (the same as pitch bend range)\n    // when passing a single argument, semitones and cents shoud be combined\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) {\n        throw new RangeError(\"The semitones value must be an integer between 0 and 127.\");\n      }\n\n      if (!(cents == undefined) && (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127))) {\n        throw new RangeError(\"If specified, the cents value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    // Default value for cents\n    if (!(cents >= 0 && cents <= 127)) cents = 0;\n\n    this.setRegisteredParameter(\"modulationrange\", [semitones, cents], options);\n\n    return this;\n\n  }\n\n  /**\n   * Sets a non-registered parameter (NRPN) to the specified value. The NRPN is selected by passing\n   * in a two-position array specifying the values of the two control bytes. The value is specified\n   * by passing in a single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you\n   * would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].channels[0].setNonRegisteredParameter([1, 8], 123);\n   * ```\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was 10, you could use:\n   *\n   * ```js\n   * WebMidi.outputs[0].channels[0].setNonRegisteredParameter([2, 63], [0, 10]);\n   * ```\n   *\n   * For further implementation details, refer to the manufacturer's documentation.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes (0x63,\n   * 0x62) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The control value must be between 0 and 127.\n   * @throws {RangeError} The msb value must be between 0 and 127\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setNonRegisteredParameter(nrpn, data, options = {}) {\n\n    data = [].concat(data);\n\n    if (WebMidi.validation) {\n\n      if (!Array.isArray(nrpn) || !Number.isInteger(nrpn[0]) || !Number.isInteger(nrpn[1])) {\n        throw new TypeError(\"The specified NRPN is invalid.\");\n      }\n\n      if (!(nrpn[0] >= 0 && nrpn[0] <= 127)) {\n        throw new RangeError(\"The first byte of the NRPN must be between 0 and 127.\");\n      }\n\n      if (!(nrpn[1] >= 0 && nrpn[1] <= 127)) {\n        throw new RangeError(\"The second byte of the NRPN must be between 0 and 127.\");\n      }\n\n      data.forEach(value => {\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The data bytes of the NRPN must be between 0 and 127.\");\n        }\n      });\n\n    }\n\n    this._selectNonRegisteredParameter(nrpn, options);\n    this._setCurrentParameter(data, options);\n    this._deselectNonRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **pitch bend** message at the scheduled time.\n   *\n   * @param {number|number[]} [value] The intensity of the bend (between -1.0 and 1.0). A value of\n   * zero means no bend. The resulting bend is relative to the pitch bend range that has been\n   * defined. The range can be set with\n   * [`setPitchBendRange()`]{@link OutputChannel#setPitchBendRange}. So, for example, if the pitch\n   * bend range has been set to 12 semitones, using a bend value of -1 will bend the note 1 octave\n   * below its nominal value.\n   *\n   * If the `rawValue` option is set to `true`, the intensity of the bend can be defined by either\n   * using a single integer between 0 and 127 (MSB) or an array of two integers between 0 and 127\n   * representing, respectively, the MSB (most significant byte) and the LSB (least significant\n   * byte). The MSB is expressed in semitones with `64` meaning no bend. A value lower than `64`\n   * bends downwards while a value higher than `64` bends upwards. The LSB is expressed in cents\n   * (1/100 of a semitone). An LSB of `64` also means no bend.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered as a float between -1.0 and 1.0 (default) or as raw integer between 0 and 127 (or\n   * an array of 2 integers if using both MSB and LSB).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setPitchBend(value, options = {}) {\n\n    // @todo standardize the way msb/lsb are passed in\n\n    if (WebMidi.validation) {\n\n      if (options.rawValue && Array.isArray(value)) {\n\n        if (!(value[0] >= 0 && value[0] <= 127)) {\n          throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n        }\n        if (!(value[1] >= 0 && value[1] <= 127)) {\n          throw new RangeError(\"The pitch bend LSB must be an integer between 0 and 127.\");\n        }\n\n      } else if (options.rawValue && !Array.isArray(value)) {\n\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n        }\n\n      } else {\n\n        if (isNaN(value) || value === null) {\n          throw new RangeError(\"Invalid pitch bend value.\");\n        }\n\n        if (!(value >= -1 && value <= 1)) {\n          throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n        }\n\n      }\n\n    }\n\n    let msb = 0;\n    let lsb = 0;\n\n    // Calculate MSB and LSB for both scenarios\n    if (options.rawValue && Array.isArray(value)) {\n      msb = value[0];\n      lsb = value[1];\n    } else if (options.rawValue && !Array.isArray(value)) {\n      msb = value;\n    } else {\n      const result = Utilities.fromFloatToMsbLsb((value + 1) / 2); // b/c value is -1 to 1\n      msb = result.msb;\n      lsb = result.lsb;\n    }\n\n    this.send(\n      [\n        (Enumerations.MIDI_CHANNEL_MESSAGES.pitchbend << 4) + (this.number - 1),\n        lsb,\n        msb\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a pitch bend range message to the specified channel(s) at the scheduled time so that they\n   * adjust the range used by their pitch bend lever. The range is specified by using the\n   * `semitones` and `cents` parameters. For example, setting the `semitones` parameter to `12`\n   * means that the pitch bend range will be 12 semitones above and below the nominal pitch.\n   *\n   * @param semitones {number} The desired adjustment value in semitones (between 0 and 127). While\n   * nothing imposes that in the specification, it is very common for manufacturers to limit the\n   * range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The semitones value must be an integer between 0 and 127.\n   * @throws {RangeError} The cents value must be an integer between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setPitchBendRange(semitones, cents, options = {}) {\n\n    // @todo use single value as parameter or pair of msb/lsb\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) {\n        throw new RangeError(\"The semitones value must be an integer between 0 and 127.\");\n      }\n\n      if (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127)) {\n        throw new RangeError(\"The cents value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    this.setRegisteredParameter(\"pitchbendrange\", [semitones, cents], options);\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **program change** message at the scheduled time.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param [program=1] {number} The MIDI patch (program) number (1-128)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n   * than 0xFF.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   */\n  setProgram(program, options = {}) {\n\n    program = parseInt(program) || 1;\n\n    if (WebMidi.validation) {\n\n      if (!(program >= 1 && program <= 128)) {\n        throw new RangeError(\"The program number must be between 1 and 128.\");\n      }\n\n    }\n\n    this.send(\n      [\n        (Enumerations.MIDI_CHANNEL_MESSAGES.programchange << 4) + (this.number - 1),\n        program - 1\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data (msb, lsb) that each can go from 0 to 127.\n   *\n   * MIDI\n   * [registered parameters]\n   * (https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n   * limited number of them. Here are the original registered parameters with the identifier that\n   * can be used as the first parameter of this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *\n   * Note that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * Another set of extra parameters have been later added for 3D sound controllers. They are:\n   *\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param rpn {string|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n   * registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An single integer or an array of integers with a maximum\n   * length of 2 specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setRegisteredParameter(rpn, data, options = {}) {\n\n    if (!Array.isArray(rpn)) rpn = Enumerations.MIDI_REGISTERED_PARAMETERS[rpn];\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(rpn[0]) || !Number.isInteger(rpn[1])) {\n        throw new TypeError(\"The specified NRPN is invalid.\");\n      }\n\n      if (!(rpn[0] >= 0 && rpn[0] <= 127)) {\n        throw new RangeError(\"The first byte of the RPN must be between 0 and 127.\");\n      }\n\n      if (!(rpn[1] >= 0 && rpn[1] <= 127)) {\n        throw new RangeError(\"The second byte of the RPN must be between 0 and 127.\");\n      }\n\n      [].concat(data).forEach(value => {\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The data bytes of the RPN must be between 0 and 127.\");\n        }\n      });\n\n    }\n\n    this._selectRegisteredParameter(rpn, options);\n    this._setCurrentParameter(data, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the bank number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning bank (1-128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 1 and 128.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setTuningBank(value, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(value) || !(value >= 1 && value <= 128)) {\n        throw new RangeError(\"The tuning bank number must be between 1 and 128.\");\n      }\n\n    }\n\n    this.setRegisteredParameter(\"tuningbank\", value - 1, options);\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning program (1-128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 1 and 128.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setTuningProgram(value, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(value) || !(value >= 1 && value <= 128)) {\n        throw new RangeError(\"The tuning program number must be between 1 and 128.\");\n      }\n\n    }\n\n    this.setRegisteredParameter(\"tuningprogram\", value - 1, options);\n    return this;\n\n  }\n\n  /**\n   * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n   * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n   * its out port.\n   *\n   * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n   * (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setLocalControl(state, options = {}) {\n    if (state) {\n      return this.sendChannelMode(\"localcontrol\", 127, options);\n    } else {\n      return this.sendChannelMode(\"localcontrol\", 0, options);\n    }\n  }\n\n  /**\n   * Sends an **all notes off** channel mode message. This will make all currently playing notes\n   * fade out just as if their key had been released. This is different from the\n   * [turnSoundOff()]{@link OutputChannel#turnSoundOff} method which mutes all sounds immediately.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  turnNotesOff(options = {}) {\n    return this.sendChannelMode(\"allnotesoff\", 0, options);\n  }\n\n  /**\n   * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n   * channel but will not prevent new sounds from being triggered.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  turnSoundOff(options = {}) {\n    return this.sendChannelMode(\"allsoundoff\", 0, options);\n  }\n\n  /**\n   * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n   * the pitch bend, to their default value.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  resetAllControllers(options = {}) {\n    return this.sendChannelMode(\"resetallcontrollers\", 0, options);\n  }\n\n  /**\n   * Sets the polyphonic mode. In `\"poly\"` mode (usually the default), multiple notes can be played\n   * and heard at the same time. In `\"mono\"` mode, only one note will be heard at once even if\n   * multiple notes are being played.\n   *\n   * @param {string} [mode=poly] The mode to use: `\"mono\"` or `\"poly\"`.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setPolyphonicMode(mode, options = {}) {\n    if (mode === \"mono\") {\n      return this.sendChannelMode(\"monomodeon\", 0, options);\n    } else {\n      return this.sendChannelMode(\"polymodeon\", 0, options);\n    }\n  }\n\n  /**\n   * An integer to offset the reported octave of outgoing note-specific messages (`noteon`,\n   * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n   * octave (C4).\n   *\n   * Note that this value is combined with the global offset value defined on the `WebMidi` object\n   * and with the value defined on the parent {@link Output} object.\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * The parent {@link Output} this channel belongs to\n   * @type {Output}\n   * @since 3.0\n   */\n  get output() {\n    return this._output;\n  }\n\n  /**\n   * This channel's MIDI number (1-16)\n   * @type {number}\n   * @since 3.0\n   */\n  get number() {\n    return this._number;\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {OutputChannel} from \"./OutputChannel.js\";\nimport {Enumerations, Message, WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/**\n * The `Output` class represents a single MIDI output port. This object is automatically\n * instantiated by the library according to the host's MIDI subsystem and should not be directly\n * instantiated. Instead, you can access all available `Output` objects by referring to the\n * [`WebMidi.outputs`](WebMidi#outputs) array.\n *\n * @param {MIDIOutput} midiOutput [`MIDIOutput`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutput)\n * object as provided by the MIDI subsystem.\n *\n * @fires Output#opened\n * @fires Output#disconnected\n * @fires Output#closed\n *\n * @extends EventEmitter\n * @license Apache-2.0\n */\nexport class Output extends EventEmitter {\n\n  constructor(midiOutput) {\n\n    super();\n\n    /**\n     * A reference to the `MIDIOutput` object\n     * @type {MIDIOutput}\n     * @private\n     */\n    this._midiOutput = midiOutput;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * Array containing the 16 {@link OutputChannel} objects available for this `Output`. The\n     * channels are numbered 1 through 16.\n     *\n     * @type {OutputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new OutputChannel(this, i);\n\n    this._midiOutput.onstatechange = this._onStateChange.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Output`. All listeners are removed, all channels are destroyed and the MIDI\n   * subsystem is unlinked.\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    this._midiOutput.onstatechange = null;\n    await this.close();\n    this._midiOutput = null;\n  }\n\n  /**\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: WebMidi.time\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the {@link Output} has been opened by calling the\n       * [open()]{@link Output#open} method.\n       *\n       * @event Output#opened\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"opened\"`\n       * @property {Output} target The object that triggered the event\n       */\n      event.type = \"opened\";\n      event.target = this;\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the {@link Output} has been closed by calling the\n       * [close()]{@link Output#close} method.\n       *\n       * @event Output#closed\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"closed\"`\n       * @property {Output} target The object that triggered the event\n       */\n      event.type = \"closed\";\n      event.target = this;\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the {@link Output} becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Output#disconnected\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp0 when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"disconnected\"`\n       * @property {object} target Object with properties describing the {@link Output} that\n       * triggered the event. This is not the actual `Output` as it is no longer available.\n       * @property {string} target.connection `\"closed\"`\n       * @property {string} target.id ID of the input\n       * @property {string} target.manufacturer Manufacturer of the device that provided the input\n       * @property {string} target.name Name of the device that provided the input\n       * @property {string} target.state `\"disconnected\"`\n       * @property {string} target.type `\"output\"`\n       */\n      event.type = \"disconnected\";\n      event.target = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") {\n      // I don't see the need to forward that...\n    } else {\n      console.warn(\"This statechange event was not caught:\", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Opens the output for usage.\n   *\n   * @returns {Promise<Output>} The promise is fulfilled with the `Output`\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when calling `send()` on the `MIDIOutput`.\n    // We do it explicitly so that 'connected' events are dispatched immediately and we are ready to\n    // send.\n    try {\n      await this._midiOutput.open();\n      return Promise.resolve(this);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n  }\n\n  /**\n   * Closes the output connection. When an output is closed, it cannot be used to send MIDI messages\n   * until the output is opened again by calling [Output.open()]{@link Output#open}. You can check\n   * the connection status by looking at the [connection]{@link Output#connection} property.\n   *\n   * @returns {Promise<void>}\n   */\n  async close() {\n\n    // We close the port. This triggers a 'statechange' event which we listen to to re-trigger the\n    // 'closed' event.\n    if (this._midiOutput) {\n      await this._midiOutput.close();\n    } else {\n      await Promise.resolve();\n    }\n\n  }\n\n  /**\n   * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\n   * sent immediately. The message should be an array of 8 bit unsigned integers (0-225), a\n   * [Uint8Array]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n   * object or a `Message` object.\n   *\n   * It is usually not necessary to use this method directly as you can use one of the simpler\n   * helper methods such as [playNote()`, `stopNote()`, `sendControlChange()`, etc.\n   *\n   * Details on the format of MIDI messages are available in the summary of\n   * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}\n   * from the MIDI Manufacturers Association.\n   *\n   * @param message {number[]|Uint8Array|Message} An array of 8bit unsigned integers, a `Uint8Array`\n   * object (not available in Node.js) containing the message bytes or a `Message` object.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a positive\n   * number\n   * ([DOMHighResTimeStamp]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that point time. If `time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @license Apache-2.0\n   */\n  send(message, options = {time: 0}, legacy = undefined) {\n\n    // If a Message object is passed in we extract the message data (the jzz plugin used on Node.js\n    // does not support using Uint8Array).\n    if (message instanceof Message) {\n      message = WebMidi.isNode ? message.data : message.rawData;\n    }\n\n    // If the data is a Uint8Array and we are on Node, we must convert it to array so it works with\n    // the jzz module.\n    if (message instanceof Uint8Array && WebMidi.isNode) {\n      message = Array.from(message);\n    }\n\n    // Validation\n    if (WebMidi.validation) {\n\n      // If message is neither an array nor a Uint8Array, then we are in legacy mode\n      if (!Array.isArray(message) && !(message instanceof Uint8Array)) {\n        message = [message];\n        if (Array.isArray(options)) message = message.concat(options);\n        options = legacy ? {time: legacy} : {time: 0};\n      }\n\n      if (!(parseInt(message[0]) >= 128 && parseInt(message[0]) <= 255)) {\n        throw new RangeError(\"The first byte (status) must be an integer between 128 and 255.\");\n      }\n\n      message.slice(1).forEach(value => {\n        value = parseInt(value);\n        if (!(value >= 0 && value <= 255)) {\n          throw new RangeError(\"Data bytes must be integers between 0 and 255.\");\n        }\n      });\n\n      if (!options) options = {time: 0};\n\n    }\n\n    // Send message and return `Output` for chaining\n    this._midiOutput.send(message, Utilities.toTimestamp(options.time));\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI [system exclusive]{@link\n    * https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages}\n   * (*sysex*) message. The `data` parameter should only contain the data of the message. When\n   * sending out the actual MIDI message, WebMidi.js will automatically prepend the data with the\n   * *sysex byte* (`0xF0`) and the manufacturer ID byte(s). It will also automatically terminate\n   * the message with the *sysex end byte* (`0xF7`).\n   *\n   * The data can be an array of unsigned integers (0-127) or a `Uint8Array` object.\n   *\n   * To use the `sendSysex()` method, system exclusive message support must have been enabled. To\n   * do so, you must set the `sysex` option to `true` when calling `WebMidi.enable()`:\n   *\n   * ```js\n   * WebMidi.enable({sysex: true})\n   *   .then(() => console.log(\"System exclusive messages are enabled\");\n   * ```\n   *\n   * Note that, depending on browser, version and platform, it is generally necessary to serve the\n   * page over HTTPS to enable sysex support.\n   *\n   * ##### Examples\n   *\n   * If you want to send a sysex message to a Korg device connected to the first output, you would\n   * use the following code:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(0x42, [0x1, 0x2, 0x3, 0x4, 0x5]);\n   * ```\n   *\n   * The parameters can be specified using any number notation (decimal, hex, binary, etc.).\n   * Therefore, the code below is equivalent to the code above:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(66, [1, 2, 3, 4, 5]);\n   * ```\n   *\n   * The above code sends the byte values 1, 2, 3, 4 and 5 to Korg devices (hex 42 is the same as\n   * decimal 66).\n   *\n   * Some manufacturers are identified using 3 bytes. In this case, you would use a 3-position array\n   * as the first parameter. For example, to send the same sysex message to a\n   * *Native Instruments* device:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex([0x00, 0x21, 0x09], [0x1, 0x2, 0x3, 0x4, 0x5]);\n   * ```\n   * There is no limit for the length of the data array. However, it is generally suggested to keep\n   * system exclusive messages to 64Kb or less.\n   *\n   * @param manufacturer {number|number[]} An unsigned integer or an array of three unsigned\n   * integers between 0 and 127 that identify the targeted manufacturer. The *MIDI Manufacturers\n   * Association* maintains a full list of\n   * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers)\n   * .\n   *\n   * @param {number[]|Uint8Array} [data=[]] A Uint8Array or an array of unsigned integers between 0\n   * and 127. This is the data you wish to transfer.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {DOMException} Failed to execute 'send' on 'MIDIOutput': System exclusive message is\n   * not allowed.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index x is greater\n   * than 0xFF.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendSysex(manufacturer, data= [], options = {}) {\n\n    manufacturer = [].concat(manufacturer);\n\n    // Check if data is Uint8Array\n    if (data instanceof Uint8Array) {\n      const merged = new Uint8Array(1 + manufacturer.length + data.length + 1);\n      merged[0] = Enumerations.MIDI_SYSTEM_MESSAGES.sysex;\n      merged.set(Uint8Array.from(manufacturer), 1);\n      merged.set(data, 1 + manufacturer.length);\n      merged[merged.length - 1] = Enumerations.MIDI_SYSTEM_MESSAGES.sysexend;\n      this.send(merged, {time: options.time});\n    } else {\n      const merged = manufacturer.concat(data, Enumerations.MIDI_SYSTEM_MESSAGES.sysexend);\n      this.send([Enumerations.MIDI_SYSTEM_MESSAGES.sysex].concat(merged), {time: options.time});\n    }\n\n    return this;\n\n  };\n\n  /**\n   * Clears all messages that have been queued but not yet delivered.\n   *\n   * Warning: this method has been defined in the specification but has not been implemented yet. As\n   * soon as browsers implement it, it will work.\n   *\n   * You can check out the current status of this feature for Chromium (Chrome) here:\n   * https://bugs.chromium.org/p/chromium/issues/detail?id=471798\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  clear() {\n\n    if (this._midiOutput.clear) {\n\n      this._midiOutput.clear();\n\n    } else {\n\n      if (WebMidi.validation) {\n        console.warn(\n          \"The 'clear()' method has not yet been implemented in your environment.\"\n        );\n      }\n\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **timecode quarter frame** message. Please note that no processing is being done\n   * on the data. It is up to the developer to format the data according to the\n   * [MIDI Timecode](https://en.wikipedia.org/wiki/MIDI_timecode) format.\n   *\n   * @param value {number} The quarter frame message content (integer between 0 and 127).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendTimecodeQuarterFrame(value, options = {}) {\n\n    if (WebMidi.validation) {\n      value = parseInt(value);\n      if (isNaN(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The value must be an integer between 0 and 127.\");\n      }\n    }\n\n    this.send(\n      [\n        Enumerations.MIDI_SYSTEM_MESSAGES.timecode,\n        value\n      ],\n      {time: options.time}\n    );\n\n    return this;\n\n  };\n\n  /**\n   * Sends a **ong position** MIDI message. The value is expressed in MIDI beats (between 0 and\n   * 16383) which are 16th note. Position 0 is always the start of the song.\n   *\n   * @param [value=0] {number} The MIDI beat to cue to (integer between 0 and 16383).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setSongPosition(value, options = {}) {\n\n    // @todo allow passing in 2-entries array for msb/lsb\n\n    value = Math.floor(value) || 0;\n\n    var msb = (value >> 7) & 0x7F;\n    var lsb = value & 0x7F;\n\n    this.send(\n      [\n        Enumerations.MIDI_SYSTEM_MESSAGES.songposition,\n        msb,\n        lsb\n      ],\n      {time: options.time}\n    );\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendSongPosition(value, options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendSongPosition() method has been deprecated. Use setSongPosition() instead.\"\n      );\n    }\n\n    return this.setSongPosition(value, options);\n\n  }\n\n  /**\n   * Sends a **song select** MIDI message.\n   *\n   * **Note**: since version 3.0, the song number is an integer between 1 and 128. In versions 1.0\n   * and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices that\n   * use a numbering scheme starting at 1.\n   *\n   * @param value {number} The number of the song to select (integer between 1 and 128).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws The song number must be between 1 and 128.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setSong(value, options = {}) {\n\n    if (WebMidi.validation) {\n\n      value = parseInt(value);\n\n      if (isNaN(value) || !(value >= 1 && value <= 128)) {\n        throw new RangeError(\"The program value must be between 1 and 128\");\n      }\n\n    }\n\n    this.send(\n      [\n        Enumerations.MIDI_SYSTEM_MESSAGES.songselect,\n        value\n      ],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendSongSelect(value, options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendSongSelect() method has been deprecated. Use setSong() instead.\"\n      );\n    }\n\n    return this.setSong(value, options);\n\n  }\n\n  /**\n   * Sends a MIDI **tune request** real-time message.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendTuneRequest(options = {}) {\n\n    this.send(\n      [Enumerations.MIDI_SYSTEM_MESSAGES.tunerequest],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **clock* real-time message. According to the standard, there are 24 MIDI Clocks\n   * for every quarter note.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendClock(options = {}) {\n\n    this.send(\n      [Enumerations.MIDI_SYSTEM_MESSAGES.clock],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **start** real-time message. A MIDI Start message starts the playback of the current\n   * song at beat 0. To start playback elsewhere in the song, use the\n   * [sendContinue()]{@link Output#sendContinue} method.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendStart(options = {}) {\n\n    this.send(\n      [Enumerations.MIDI_SYSTEM_MESSAGES.start],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **continue** real-time message. This resumes song playback where it was previously\n   * stopped or where it was last cued with a song position message. To start playback from the\n   * start, use the [sendStart()]{@link Output#sendStart}` method.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendContinue(options = {}) {\n\n    this.send(\n      [Enumerations.MIDI_SYSTEM_MESSAGES.continue],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **stop** real-time message. This tells the device connected to this output to stop\n   * playback immediately (or at the scheduled time).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendStop(options = {}) {\n\n    this.send(\n      [Enumerations.MIDI_SYSTEM_MESSAGES.stop],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **active sensing** real-time message. This tells the device connected to this port\n   * that the connection is still good. Active sensing messages should be sent every 300 ms if there\n   * was no other activity on the MIDI port.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendActiveSensing(options = {}) {\n\n    this.send(\n      [Enumerations.MIDI_SYSTEM_MESSAGES.activesensing],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **reset** real-time message. This tells the device connected to this output that it\n   * should reset itself to a default state.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendReset(options = {}) {\n\n    this.send(\n      [Enumerations.MIDI_SYSTEM_MESSAGES.reset],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendTuningRequest(options = {}) {\n\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead.\"\n      );\n    }\n\n    return this.sendTuneRequest(options);\n\n  }\n\n  /**\n   * Sends a MIDI **key aftertouch** message to the specified channel(s) at the scheduled time. This\n   * is a key-specific aftertouch. For a channel-wide aftertouch message, use\n   * [setChannelAftertouch()]{@link Output#setChannelAftertouch}.\n   *\n   * @param note {number|string|Array}  The note for which you are sending an aftertouch value. The\n   * notes can be specified in one of two ways. The first way is by using the MIDI note number (an\n   * integer between 0 and 127). The second way is by using the note name followed by the octave\n   * (C3, G#4, F-1, Db7). The octave range should be between -1 and 9. The lowest note is C-1 (MIDI\n   * note number 0) and the highest note is G9 (MIDI note number 127). It is also possible to use\n   * an array of note names and/or numbers.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setKeyAftertouch(note, pressure, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(pressure) || Number.isInteger(pressure) || pressure === \"all\") {\n        let channels = pressure;\n        pressure = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setKeyAftertouch(note, pressure, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendKeyAftertouch(note, channel, pressure, options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendKeyAftertouch() method has been deprecated. Use setKeyAftertouch() instead.\"\n      );\n    }\n\n    options.channels = channel;\n    return this.setKeyAftertouch(note, pressure, options);\n\n  }\n\n  /**\n   * Sends a MIDI **control change** message to the specified channel(s) at the scheduled time. The\n   * control change message to send can be specified numerically (0-127) or by using one of the\n   * following common names:\n   *\n   *  * `bankselectcoarse` (#0)\n   *  * `modulationwheelcoarse` (#1)\n   *  * `breathcontrollercoarse` (#2)\n   *  * `footcontrollercoarse` (#4)\n   *  * `portamentotimecoarse` (#5)\n   *  * `dataentrycoarse` (#6)\n   *  * `volumecoarse` (#7)\n   *  * `balancecoarse` (#8)\n   *  * `pancoarse` (#10)\n   *  * `expressioncoarse` (#11)\n   *  * `effectcontrol1coarse` (#12)\n   *  * `effectcontrol2coarse` (#13)\n   *  * `generalpurposeslider1` (#16)\n   *  * `generalpurposeslider2` (#17)\n   *  * `generalpurposeslider3` (#18)\n   *  * `generalpurposeslider4` (#19)\n   *  * `bankselectfine` (#32)\n   *  * `modulationwheelfine` (#33)\n   *  * `breathcontrollerfine` (#34)\n   *  * `footcontrollerfine` (#36)\n   *  * `portamentotimefine` (#37)\n   *  * `dataentryfine` (#38)\n   *  * `volumefine` (#39)\n   *  * `balancefine` (#40)\n   *  * `panfine` (#42)\n   *  * `expressionfine` (#43)\n   *  * `effectcontrol1fine` (#44)\n   *  * `effectcontrol2fine` (#45)\n   *  * `holdpedal` (#64)\n   *  * `portamento` (#65)\n   *  * `sustenutopedal` (#66)\n   *  * `softpedal` (#67)\n   *  * `legatopedal` (#68)\n   *  * `hold2pedal` (#69)\n   *  * `soundvariation` (#70)\n   *  * `resonance` (#71)\n   *  * `soundreleasetime` (#72)\n   *  * `soundattacktime` (#73)\n   *  * `brightness` (#74)\n   *  * `soundcontrol6` (#75)\n   *  * `soundcontrol7` (#76)\n   *  * `soundcontrol8` (#77)\n   *  * `soundcontrol9` (#78)\n   *  * `soundcontrol10` (#79)\n   *  * `generalpurposebutton1` (#80)\n   *  * `generalpurposebutton2` (#81)\n   *  * `generalpurposebutton3` (#82)\n   *  * `generalpurposebutton4` (#83)\n   *  * `reverblevel` (#91)\n   *  * `tremololevel` (#92)\n   *  * `choruslevel` (#93)\n   *  * `celestelevel` (#94)\n   *  * `phaserlevel` (#95)\n   *  * `databuttonincrement` (#96)\n   *  * `databuttondecrement` (#97)\n   *  * `nonregisteredparametercoarse` (#98)\n   *  * `nonregisteredparameterfine` (#99)\n   *  * `registeredparametercoarse` (#100)\n   *  * `registeredparameterfine` (#101)\n   *\n   *  * `allsoundoff` (#120)\n   *  * `resetallcontrollers` (#121)\n   *  * `localcontrol` (#122)\n   *  * `allnotesoff` (#123)\n   *  * `omnimodeoff` (#124)\n   *  * `omnimodeon` (#125)\n   *  * `monomodeon` (#126)\n   *  * `polymodeon` (#127)\n   *\n   * Note: as you can see above, not all control change message have a matching common name. This\n   * does not mean you cannot use the others. It simply means you will need to use their number\n   * (0-127) instead of their name. While you can still use them, numbers 120 to 127 are usually\n   * reserved for *channel mode* messages. See [sendChannelMode()]{@link Output#sendChannelMode}\n   * method for more info.\n   *\n   * To view a list of all available `control change` messages, please consult \"Table 3 - Control\n   * Change Messages\" from the [MIDI Messages](\n   * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)\n   * specification.\n   *\n   * @param controller {number|string} The MIDI controller name or number (0-127).\n   *\n   * @param [value=0] {number} The value to send (0-127).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 127.\n   * @throws {RangeError} Invalid controller name.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendControlChange(controller, value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendControlChange(controller, value, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a pitch bend range message to the specified channel(s) at the scheduled time so that they\n   * adjust the range used by their pitch bend lever. The range is specified by using the\n   * `semitones` and `cents` parameters. For example, setting the `semitones` parameter to `12`\n   * means that the pitch bend range will be 12 semitones above and below the nominal pitch.\n   *\n   * @param semitones {number} The desired adjustment value in semitones (between 0 and 127). While\n   * nothing imposes that in the specification, it is very common for manufacturers to limit the\n   * range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0-127).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127.\n   * @throws {RangeError} The lsb value must be between 0 and 127.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setPitchBendRange(semitones, cents, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setPitchBendRange(semitones, cents, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data (msb, lsb) that each can go from 0 to 127.\n   *\n   * MIDI\n   * [registered parameters]\n   * (https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n   * limited number of them. Here are the original registered parameters with the identifier that\n   * can be used as the first parameter of this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *\n   * Note that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * Another set of extra parameters have been later added for 3D sound controllers. They are:\n   *\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {string|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n   * registered parameter.\n   *\n   * @param [data=[]] {number|number[]} A single integer or an array of integers with a maximum\n   * length of 2 specifying the desired data.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  setRegisteredParameter(parameter, data, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setRegisteredParameter(parameter, data, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel aftertouch** message to the specified channel(s). For key-specific\n   * aftertouch, you should instead use [setKeyAftertouch()]{@link Output#setKeyAftertouch}.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   * @since 3.0.0\n   */\n  setChannelAftertouch(pressure, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setChannelAftertouch(pressure, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendChannelAftertouch(pressure, channel, options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendChannelAftertouch() method has been deprecated. Use setChannelAftertouch().\"\n      );\n    }\n\n    options.channels = channel;\n    return this.setChannelAftertouch(pressure, options);\n\n  }\n\n  /**\n   * Sends a MIDI **pitch bend** message to the specified channel(s) at the scheduled time.\n   *\n   * @param {number|number[]} value The intensity of the bend (between -1.0 and 1.0). A value of\n   * zero means no bend. The resulting bend is relative to the pitch bend range that has been\n   * defined. The range can be set with [setPitchBendRange()]{@link OutputChannel#setPitchBendRange}\n   * . So, for example, if the pitch bend range has been set to 12 semitones, using a bend value of\n   * -1 will bend the note 1 octave below its nominal value.\n   *\n   * If an invalid value is specified, the nearest valid value will be used instead.\n   *\n   * If the `rawValue` option is set to `true`, the intensity of the bend can be defined by either\n   * using a single integer between 0 and 127 (MSB) or an array of two integers between 0 and 127\n   * representing, respectively, the MSB (most significant byte) and the LSB (least significant\n   * byte). The MSB is expressed in semitones with `64` meaning no bend. A value lower than `64`\n   * bends downwards while a value higher than `64` bends upwards. The LSB is expressed in cents\n   * (1/100 of a semitone). An LSB of `64` also means no bend.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered as a float between -1.0 and 1.0 (default) or as raw integer between 0 and 127 (or\n   * an array of 2 integers if using both MSB and LSB).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setPitchBend(value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setPitchBend(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendPitchBend(bend, channel, options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendPitchBend() method has been deprecated. Use setPitchBend() instead.\"\n      );\n    }\n\n    options.channels = channel;\n    return this.setPitchBend(bend, options);\n\n  }\n\n  /**\n   * Sends a MIDI **program change** message to the specified channel(s) at the scheduled time.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param [program=1] {number} The MIDI patch (program) number (1-128)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n   * than 0xFF.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setProgram(program, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setProgram(program, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendProgramChange(program, channel, options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendProgramChange() method has been deprecated. Use setProgram() instead.\"\n      );\n    }\n\n    options.channels = channel;\n    return this.setProgram(program, options);\n\n  }\n\n  /**\n   * Sends a **modulation depth range** message to the specified channel(s) so that they adjust the\n   * depth of their modulation wheel's range. The range can be specified with the `semitones`\n   * parameter, the `cents` parameter or by specifying both parameters at the same time.\n   *\n   * @param [semitones=0] {number} The desired adjustment value in semitones (integer between\n   * 0 and 127).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127\n   * @throws {RangeError} The lsb value must be between 0 and 127\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setModulationRange(semitones, cents, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setModulationRange(semitones, cents, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a master tuning message to the specified channel(s). The value is decimal and must be\n   * larger than -65 semitones and smaller than 64 semitones.\n   *\n   * Because of the way the MIDI specification works, the decimal portion of the value will be\n   * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n   * a **Master Fine Tuning** RPN messages.\n   *\n   * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setMasterTuning(value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setMasterTuning(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning program (1-128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 1 and 128.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setTuningProgram(value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setTuningProgram(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the bank number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning bank (1-128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 1 and 128.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setTuningBank(value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setTuningBank(value, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a MIDI **channel mode** message to the specified channel(s). The channel mode message to\n   * send can be specified numerically or by using one of the following common names:\n   *\n   *   * `\"allsoundoff\"` (#120)\n   *   * `\"resetallcontrollers\"` (#121)\n   *   * `\"localcontrol\"` (#122)\n   *   * `\"allnotesoff\"` (#123)\n   *   * `\"omnimodeoff\"` (#124)\n   *   * `\"omnimodeon\"` (#125)\n   *   * `\"monomodeon\"` (#126)\n   *   * `\"polymodeon\"` (#127)\n   *\n   * It should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may\n   * require a value that's not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * To make it easier, all channel mode messages have a matching helper method:\n   *\n   *   - [turnSoundOff()]{@link OutputChannel#turnSoundOff}\n   *   - [resetAllControllers()]{@link OutputChannel#resetAllControllers}\n   *   - [setLocalControl()]{@link OutputChannel#turnSoundOff}\n   *   - [turnNotesOff()]{@link OutputChannel#turnNotesOff}\n   *   - [setOmniMode()]{@link OutputChannel#setOmniMode}\n   *   - [setPolyphonicMode()]{@link OutputChannel#setPolyphonicMode}\n   *\n   * @param command {number|string} The numerical identifier of the channel mode message (integer\n   * between 120-127) or its name as a string.\n   *\n   * @param [value] {number} The value to send (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   */\n  sendChannelMode(command, value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendChannelMode(command, value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n   * channel but will not prevent new sounds from being triggered.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   *\n   * @since 3.0.0\n   */\n  turnSoundOff(options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].turnSoundOff(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **all notes off** channel mode message. This will make all currently playing notes\n   * fade out just as if their key had been released. This is different from the\n   * [turnSoundOff()]{@link Output#turnSoundOff} method which mutes all sounds immediately.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   *\n   * @since 3.0.0\n   */\n  turnNotesOff(options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].turnNotesOff(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n   * the pitch bend, to their default value.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   */\n  resetAllControllers(options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].resetAllControllers(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the polyphonic mode. In `\"poly\"` mode (usually the default), multiple notes can be played\n   * and heard at the same time. In `\"mono\"` mode, only one note will be heard at once even if\n   * multiple notes are being played.\n   *\n   * @param mode {string} The mode to use: `\"mono\"` or `\"poly\"`.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setPolyphonicMode(mode, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setPolyphonicMode(mode, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n   * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n   * its out port.\n   *\n   * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n   * (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setLocalControl(state, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setLocalControl(state, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets OMNI mode to `\"on\"` or `\"off\"` for the specified channel(s). MIDI's OMNI mode causes the\n   * instrument to respond to messages from all channels.\n   *\n   * It should be noted that support for OMNI mode is not as common as it used to be.\n   *\n   * @param [state] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setOmniMode(state, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setOmniMode(state, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets a non-registered parameter to the specified value. The NRPN is selected by passing in a\n   * two-position array specifying the values of the two control bytes. The value is specified by\n   * passing in a single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you\n   * would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].setNonRegisteredParameter([1, 8], 123);\n   * ```\n   *\n   * Obviously, you should select a channel so the message is not sent to all channels. For\n   * instance, to send to channel 1 of the first output port, you would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].setNonRegisteredParameter([1, 8], 123, 1);\n   * ```\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was 10, you could use:\n   *\n   * ```js\n   * WebMidi.outputs[0].setNonRegisteredParameter([2, 63], [0, 10], [1]);\n   * ```\n   *\n   * For further implementation details, refer to the manufacturer\"s documentation.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes (0x63,\n   * 0x62) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The control value must be between 0 and 127.\n   * @throws {RangeError} The msb value must be between 0 and 127\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  setNonRegisteredParameter(parameter, data, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setNonRegisteredParameter(parameter, data, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this method:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  incrementRegisteredParameter(parameter, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].incrementRegisteredParameter(parameter, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this method:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter\"s name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified parameter is not available.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  decrementRegisteredParameter(parameter, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].decrementRegisteredParameter(parameter, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified MIDI note number on the specified channel(s).\n   * The first parameter is the number. It can be a single value or an array of the following valid\n   * values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *\n   *  The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * @param note {number|string|number[]|string[]} The note(s) to stop. The notes can be specified\n   * by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7) or an array of the\n   * previous types. When using a note name, octave range must be between -1 and 9. The lowest note\n   * is C-1 (MIDI note number 0) and the highest note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {boolean} [options.rawValue=false] Controls whether the release velocity is set using\n   * integers between `0` and `127` (`true`) or a decimal number between `0` and `1` (`false`,\n   * default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNoteOff(note, options= {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    // This actually supports passing a Note object even if, semantically, this does not make sense.\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendNoteOff(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * This is an alias to the [sendNoteOff()]{@link Output#sendNoteOff} method.\n   *\n   * @see {@link Output#sendNoteOff}\n   *\n   * @param note\n   * @param options\n   * @returns {Output}\n   */\n  stopNote(note, options) {\n    return this.sendNoteOff(note, options);\n  }\n\n  /**\n   * Plays a note or an array of notes on one or more channels of this output. The first parameter\n   * is the note to play. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   * The `playNote()` method sends a **note on** MIDI message for all specified notes on all\n   * specified channels. If no channels are specified, it will send to all channels. If a `duration`\n   * is set in the `options` parameter or in the {@link Note} object's\n   * [duration]{@link Note#duration} property, it will also schedule a **note off** message to end\n   * the note after said duration. If no `duration` is set, the note will simply play until a\n   * matching **note off** message is sent with [stopNote()]{@link Output#stopNote} or\n   * [sendNoteOff()]{@link Output#sendNoteOff}.\n   *\n   * The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the durations and velocities defined in the {@link Note}\n   * objects have precedence over the ones specified via the method's `options` parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to play the note on. The special value `\"all\"` can\n   * also be used to use all channels (default).\n   *\n   * @param {number} [options.duration=undefined] The number of milliseconds (integer) after which a\n   * **note off** message will be scheduled. If left undefined, only a **note on** message is sent.\n   *\n   * @param {boolean} [options.rawValue=false] Controls whether the attack and release velocities\n   * are set using integers between `0` and `127` (`true`) or a decimal number between `0` and `1`\n   * (`false`, default).\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   * This is only used with the **note off** event triggered when `options.duration` is set.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The attack velocity to use when playing the note (between\n   * `0` and `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  playNote(note, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy-compatibility warnings\n      if (options.rawVelocity) {\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' instead.\");\n      }\n\n      if (options.velocity) {\n        console.warn(\"The 'velocity' option is deprecated. Use 'velocity' instead.\");\n      }\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].playNote(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note on** message for the specified MIDI note number on the specified channel(s). The\n   * first parameter is the number. It can be a single value or an array of the following valid\n   * values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|number[]|string[]} The note(s) to play. The notes can be specified\n   * by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7) or an array of the\n   * previous types. When using a note name, octave range must be between -1 and 9. The lowest note\n   * is C-1 (MIDI note number 0) and the highest note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {boolean} [options.rawValue=false] Controls whether the attack velocity is set using\n   * integers between `0` and `127` (`true`) or a decimal number between `0` and `1` (`false`,\n   * default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNoteOn(note, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    // This actually supports passing a Note object even if, semantically, this does not make sense.\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendNoteOn(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Name of the MIDI output\n   *\n   * @type {string}\n   * @readonly\n   */\n  get name() {\n    return this._midiOutput.name;\n  }\n\n  /**\n   * ID string of the MIDI output. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiOutput.id;\n  }\n\n  /**\n   * Output port's connection state: `\"pending\"`, `\"open\"` or `\"closed\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiOutput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this output port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiOutput.manufacturer;\n  }\n\n  /**\n   * State of the output port: `\"connected\"` or `\"disconnected\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiOutput.state;\n  }\n\n  /**\n   * Type of the output port (`\"output\"`)\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiOutput.type;\n  }\n\n  /**\n   * An integer to offset the octave of outgoing notes. By default, middle C (MIDI note number 60)\n   * is placed on the 4th octave (C4).\n   *\n   * Note that this value is combined with the global offset value defined on the `WebMidi` object\n   * (if any).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n}\n","import {Enumerations} from \"./Enumerations.js\";\nimport {Output} from \"./Output.js\";\nimport {WebMidi} from \"./WebMidi.js\";\n\n/**\n * The `Forwarder` class allows the forwarding of a MIDI message to a predetermined list of\n * [`Output`](Output) objects as long as the message matches certain conditions.\n *\n * While it certainly can be manually instantiated, you are more likely to come across a `Forwarder`\n * object as the return value of the [`Input.addForwarder()`](Input#addForwarder) method.\n *\n * @param {Output|Output[]} destinations An [`Output`](Output) object, or an array of such objects,\n * to forward the message to.\n *\n * @param {object} [options={}]\n * @param {string|string[]} [options.types] A MIDI message type (`\"noteon\"`, `\"controlchange\"`,\n * etc.), or an array of such types, that the specified message must match in order to be forwarded.\n * If this option is not specified, all types of messages will be forwarded. Valid messages are the\n * ones found in either [`MIDI_SYSTEM_MESSAGES`](Enumerations#MIDI_SYSTEM_MESSAGES) or\n * [`MIDI_CHANNEL_MESSAGES`](Enumerations#MIDI_CHANNEL_MESSAGES).\n * @param {number} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n * A MIDI channel number or an array of channel numbers that the message must match in order to be\n * forwarded. By default all MIDI channels are included (`1` to `16`).\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Forwarder {\n\n  constructor(destinations, options = {}) {\n\n    /**\n     * An array of [`Output`](Output) objects to forward the message to.\n     * @type {Output[]}\n     */\n    this.destinations = [];\n\n    /**\n     * An array of message types (`\"noteon\"`, `\"controlchange\"`, etc.) that must be matched in order\n     * for messages to be forwarded. By default, this array includes all\n     * [`Enumerations.MIDI_SYSTEM_MESSAGES`](Enumerations#MIDI_SYSTEM_MESSAGES) and\n     * [`Enumerations.MIDI_CHANNEL_MESSAGES`](Enumerations#MIDI_CHANNEL_MESSAGES).\n     * @type {string[]}\n     */\n    this.types = [\n      ...Object.keys(Enumerations.MIDI_SYSTEM_MESSAGES),\n      ...Object.keys(Enumerations.MIDI_CHANNEL_MESSAGES)\n    ];\n\n    /**\n     * An array of MIDI channel numbers that the message must match in order to be forwarded. By\n     * default, this array includes all MIDI channels (`1` to `16`).\n     * @type {number[]}\n     */\n    this.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    /**\n     * Indicates whether message forwarding is currently suspended or not in this forwarder.\n     * @type {boolean}\n     */\n    this.suspended = false;\n\n    // Make sure parameters are arrays\n    if (!Array.isArray(destinations)) destinations = [destinations];\n    if (options.types && !Array.isArray(options.types)) options.types = [options.types];\n    if (options.channels && !Array.isArray(options.channels)) options.channels = [options.channels];\n\n    if (WebMidi.validation) {\n\n      // Validate destinations\n      destinations.forEach(destination => {\n        if ( !(destination instanceof Output) ) {\n          throw new TypeError(\"Destinations must be of type 'Output'.\");\n        }\n      });\n\n      // Validate types\n      if (options.types !== undefined) {\n\n        options.types.forEach(type => {\n          if (\n            ! Enumerations.MIDI_SYSTEM_MESSAGES.hasOwnProperty(type) &&\n            ! Enumerations.MIDI_CHANNEL_MESSAGES.hasOwnProperty(type)\n          ) {\n            throw new TypeError(\"Type must be a valid message type.\");\n          }\n        });\n\n      }\n\n      // Validate channels\n      if (options.channels !== undefined) {\n\n        options.channels.forEach(channel => {\n          if (! Enumerations.MIDI_CHANNEL_NUMBERS.includes(channel) ) {\n            throw new TypeError(\"MIDI channel must be between 1 and 16.\");\n          }\n        });\n\n      }\n\n    }\n\n    this.destinations = destinations;\n    if (options.types) this.types = options.types;\n    if (options.channels) this.channels = options.channels;\n\n  }\n\n  /**\n   * Sends the specified message to the forwarder's destination(s) if it matches the specified\n   * type(s) and channel(s).\n   *\n   * @param {Message} message The [`Message`](Message) object to forward.\n   */\n  forward(message) {\n\n    // Abort if forwarding is currently suspended\n    if (this.suspended) return;\n\n    // Abort if this message type should not be forwarded\n    if (!this.types.includes(message.type)) return;\n\n    // Abort if this channel should not be forwarded\n    if (message.channel && !this.channels.includes(message.channel)) return;\n\n    // Forward\n    this.destinations.forEach(destination => destination.send(message));\n\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {Message, WebMidi} from \"./WebMidi.js\";\nimport {InputChannel} from \"./InputChannel.js\";\nimport {Utilities} from \"./Utilities.js\";\nimport {Forwarder} from \"./Forwarder.js\";\nimport {Enumerations} from \"./Enumerations.js\";\n\n/**\n * The `Input` class represents a single MIDI input port. This object is automatically instantiated\n * by the library according to the host's MIDI subsystem and should not be directly instantiated.\n * Instead, you can access all `Input` objects by referring to the [`WebMidi.inputs`](WebMidi#inputs)\n * array.\n *\n * Note that a single device may expose several inputs and/or outputs.\n *\n * @param {MIDIInput} midiInput `MIDIInput` object as provided by the MIDI subsystem (Web MIDI API).\n *\n * @fires Input#opened\n * @fires Input#disconnected\n * @fires Input#closed\n * @fires Input#midimessage\n * @fires Input#sysex\n * @fires Input#timecode\n * @fires Input#songposition\n * @fires Input#songselect\n * @fires Input#tunerequest\n * @fires Input#clock\n * @fires Input#start\n * @fires Input#continue\n * @fires Input#stop\n * @fires Input#activesensing\n * @fires Input#reset\n * @fires Input#unknownmidimessage\n *\n * @extends EventEmitter\n * @license Apache-2.0\n */\nexport class Input extends EventEmitter {\n\n  constructor(midiInput) {\n\n    super();\n\n    /**\n     * Reference to the actual MIDIInput object\n     * @private\n     */\n    this._midiInput = midiInput;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * Array containing the 16 [`InputChannel`](InputChannel) objects available for this `Input`. The\n     * channels are numbered 1 through 16.\n     *\n     * @type {InputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new InputChannel(this, i);\n\n    this._forwarders = [];\n\n    // Setup listeners\n    this._midiInput.onstatechange = this._onStateChange.bind(this);\n    this._midiInput.onmidimessage = this._onMidiMessage.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Input` by removing all listeners, emptying the `channels` array and unlinking the\n   * MIDI subsystem.\n   *\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    this._forwarders = [];\n    if (this._midiInput) {\n      this._midiInput.onstatechange = null;\n      this._midiInput.onmidimessage = null;\n    }\n    await this.close();\n    this._midiInput = null;\n  }\n\n  /**\n   * Executed when a `\"statechange\"` event occurs.\n   *\n   * @param e\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: WebMidi.time,\n      target: this\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the {@link Input} has been opened by calling the {@link Input#open}\n       * method.\n       *\n       * @event Input#opened\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"opened\"`\n       * @property {Input} target The object that triggered the event\n       */\n      event.type = \"opened\";\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the {@link Input} has been closed by calling the {@link Input#close}\n       * method.\n       *\n       * @event Input#closed\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"closed\"`\n       * @property {Input} target The object that triggered the event\n       */\n      event.type = \"closed\";\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the {@link Input} becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Input#disconnected\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"disconnected\"`\n       * @property {object} target Object with properties describing the {@link Input} that\n       * triggered the event. This is not the actual `Input` as it is no longer available.\n       * @property {string} target.connection `\"closed\"`\n       * @property {string} target.id ID of the input\n       * @property {string} target.manufacturer Manufacturer of the device that provided the input\n       * @property {string} target.name Name of the device that provided the input\n       * @property {string} target.state `\"disconnected\"`\n       * @property {string} target.type `\"input\"`\n       */\n      event.type = \"disconnected\";\n      event.target = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") {\n      // I don't see the need to forward that...\n    } else {\n      console.warn(\"This statechange event was not caught: \", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Executed when a `\"midimessage\"` event is received\n   * @param e\n   * @private\n   */\n  _onMidiMessage(e) {\n\n\n    // Create Message object from MIDI data\n    const message = new Message(e.data);\n\n    /**\n     * Event emitted when any MIDI message is received on an `Input`\n     *\n     * @event Input#midimessage\n     *\n     * @type {object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"midimessage\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array (deprecated, use\n     * the `message` object instead).\n     * @property {number} event.statusByte The message's status byte  (deprecated, use the `message`\n     * object instead).\n     * @property {?number[]} event.dataBytes The message's data bytes as an array of 0, 1 or 2\n     * integers. This will be null for `sysex` messages (deprecated, use the `message` object\n     * instead).\n     *\n     * @since 2.1\n     */\n    const event = {\n      target: this,\n      message: message,\n      timestamp: e.timeStamp,\n      type: \"midimessage\",\n\n      data: message.data,           // @deprecated (will be removed in v4)\n      rawData: message.data,        // @deprecated (will be removed in v4)\n      statusByte: message.data[0],  // @deprecated (will be removed in v4)\n      dataBytes: message.dataBytes  // @deprecated (will be removed in v4)\n    };\n\n    this.emit(\"midimessage\", event);\n\n    // Messages are forwarded to InputChannel if they are channel messages or parsed locally for\n    // system messages.\n    if (message.isSystemMessage) {                                         // system messages\n      this._parseEvent(event);\n    } else if (message.isChannelMessage) {   // channel messages\n      this.channels[message.channel]._processMidiMessageEvent(event);\n    }\n\n    // Forward message if forwarders have been defined\n    this._forwarders.forEach(forwarder => forwarder.forward(message));\n\n  }\n\n  /**\n   * @private\n   */\n  _parseEvent(e) {\n\n    // Make a shallow copy of the incoming event so we can use it as the new event.\n    const event = Object.assign({}, e);\n    event.type = event.message.type || \"unknownmidimessage\";\n\n    // Add custom property for 'songselect'\n    if (event.type === \"songselect\") {\n      event.song = e.data[1] + 1;\n    }\n\n    // Emit event\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Opens the input for usage. This is usually unnecessary as the port is open automatically when\n   * WebMidi is enabled.\n   *\n   * @returns {Promise<Input>} The promise is fulfilled with the `Input` object\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when assigning a listener to the\n    // `onmidimessage` property of the `MIDIInput`. We do it explicitly so that 'connected' events\n    // are dispatched immediately and that we are ready to listen.\n    try {\n      await this._midiInput.open();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * Closes the input. When an input is closed, it cannot be used to listen to MIDI messages until\n   * the input is opened again by calling [Input.open()]{@link Input#open}.\n   *\n   * @returns {Promise<Input>} The promise is fulfilled with the `Input` object\n   */\n  async close() {\n\n    // We close the port. This triggers a statechange event which, in turn, will emit the 'closed'\n    // event.\n    if (!this._midiInput) return Promise.resolve(this);\n\n    try {\n      await this._midiInput.close();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since v3.0.0 (moved to 'Utilities' class)\n   */\n  getChannelModeByNumber() {\n    if (WebMidi.validation) {\n      console.warn(\n        \"The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.\"\n      );\n    }\n  }\n\n  /**\n   * Adds an event listener that will trigger a function callback when the specified event is\n   * dispatched. The event usually is **input-wide** but can also be **channel-specific**.\n   *\n   * Input-wide events do not target a specific MIDI channel so it makes sense to listen for them\n   * at the `Input` level and not at the [`InputChannel`](InputChannel) level. Channel-specific\n   * events target a specific channel. Usually, in this case, you would add the listener to the\n   * [`InputChannel`](InputChannel) object. However, as a convenience, you can also listen to\n   * channel-specific events directly on an `Input`. This allows you to react to a channel-specific\n   * event no matter which channel it actually came through.\n   *\n   * When listening for an event, you simply need to specify the event name and the function to\n   * execute:\n   *\n   * ```javascript\n   * const listener = WebMidi.inputs[0].addListener(\"midimessage\", e => {\n   *   console.log(e);\n   * });\n   * ```\n   *\n   * Calling the function with an input-wide event (such as\n   * [`\"midimessage\"`]{@link #event:midimessage}), will return the [`Listener`](Listener) object\n   * that was created.\n   *\n   * If you call the function with a channel-specific event (such as\n   * [`\"noteon\"`]{@link InputChannel#event:noteon}), it will return an array of all\n   * [`Listener`](Listener) objects that were created (one for each channel):\n   *\n   * ```javascript\n   * const listeners = WebMidi.inputs[0].addListener(\"noteon\", someFunction);\n   * ```\n   *\n   * You can also specify which channels you want to add the listener to:\n   *\n   * ```javascript\n   * const listeners = WebMidi.inputs[0].addListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n   * ```\n   *\n   * In this case, `listeners` is an array containing 3 [`Listener`](Listener) objects.\n   *\n   * Note that, when adding channel-specific listeners, it is the [`InputChannel`](InputChannel)\n   * instance that actually gets a listener added and not the [`Input`](Input) instance. You can\n   * check that by calling [`InputChannel.hasListener()`](InputChannel#hasListener()).\n   *\n   * There are 8 families of events you can listen to:\n   *\n   * 1. **MIDI System Common** Events (input-wide)\n   *\n   *    * [`\"songposition\"`]{@link Input#event:songposition}\n   *    * [`\"songselect\"`]{@link Input#event:songselect}\n   *    * [`\"sysex\"`]{@link Input#event:sysex}\n   *    * [`\"timecode\"`]{@link Input#event:timecode}\n   *    * [`\"tunerequest\"`]{@link Input#event:tunerequest}\n   *\n   * 2. **MIDI System Real-Time** Events (input-wide)\n   *\n   *    * [`\"clock\"`]{@link Input#event:clock}\n   *    * [`\"start\"`]{@link Input#event:start}\n   *    * [`\"continue\"`]{@link Input#event:continue}\n   *    * [`\"stop\"`]{@link Input#event:stop}\n   *    * [`\"activesensing\"`]{@link Input#event:activesensing}\n   *    * [`\"reset\"`]{@link Input#event:reset}\n   *\n   * 3. **State Change** Events (input-wide)\n   *\n   *    * [`\"opened\"`]{@link Input#event:opened}\n   *    * [`\"closed\"`]{@link Input#event:closed}\n   *    * [`\"disconnected\"`]{@link Input#event:disconnected}\n   *\n   * 4. **Catch-All** Events (input-wide)\n   *\n   *    * [`\"midimessage\"`]{@link Input#event:midimessage}\n   *    * [`\"unknownmidimessage\"`]{@link Input#event:unknownmidimessage}\n   *\n   * 5. **Channel Voice** Events (channel-specific)\n   *\n   *    * [`\"channelaftertouch\"`]{@link InputChannel#event:channelaftertouch}\n   *    * [`\"controlchange\"`]{@link InputChannel#event:controlchange}\n   *    * [`\"keyaftertouch\"`]{@link InputChannel#event:keyaftertouch}\n   *    * [`\"noteoff\"`]{@link InputChannel#event:noteoff}\n   *    * [`\"noteon\"`]{@link InputChannel#event:noteon}\n   *    * [`\"pitchbend\"`]{@link InputChannel#event:pitchbend}\n   *    * [`\"programchange\"`]{@link InputChannel#event:programchange}\n   *\n   * 6. **Channel Mode** Events (channel-specific)\n   *\n   *    * [`\"allnotesoff\"`]{@link InputChannel#event:allnotesoff}\n   *    * [`\"allsoundoff\"`]{@link InputChannel#event:allsoundoff}\n   *    * [`\"localcontrol\"`]{@link InputChannel#event:localcontrol}\n   *    * [`\"monomode\"`]{@link InputChannel#event:monomode}\n   *    * [`\"omnimode\"`]{@link InputChannel#event:omnimode}\n   *    * [`\"resetallcontrollers\"`]{@link InputChannel#event:resetallcontrollers}\n   *\n   * 7. **NRPN** Events (channel-specific)\n   *\n   *    * [`\"nrpn:dataentrycoarse\"`]{@link InputChannel#event:nrpn:dataentrycoarse}\n   *    * [`\"nrpn:dataentryfine\"`]{@link InputChannel#event:nrpn:dataentryfine}\n   *    * [`\"nrpn:databuttonincrement\"`]{@link InputChannel#event:nrpn:databuttonincrement}\n   *    * [`\"nrpn:databuttondecrement\"`]{@link InputChannel#event:nrpn:databuttondecrement}\n   *\n   * 8. **RPN** Events (channel-specific)\n   *\n   *    * [`\"rpn:dataentrycoarse\"`]{@link InputChannel#event:rpn:dataentrycoarse}\n   *    * [`\"rpn:dataentryfine\"`]{@link InputChannel#event:rpn:dataentryfine}\n   *    * [`\"rpn:databuttonincrement\"`]{@link InputChannel#event:rpn:databuttonincrement}\n   *    * [`\"rpn:databuttondecrement\"`]{@link InputChannel#event:rpn:databuttondecrement}\n   *\n   * @param event {string} The type of the event.\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object's properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the `arguments` property of the `Listener` object\n   * and can be retrieved or modified as desired.\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * An integer between 1 and 16 or an array of such integers representing the MIDI channel(s) to\n   * listen on. If no channel is specified, all channels will be used. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array.\n   *\n   * @param {boolean} [options.remaining=Infinity] The number of times after which the callback\n   * should automatically be removed.\n   *\n   * @throws {Error} For channel-specific events, 'options.channels' must be defined.\n   *\n   * @returns {Listener|Listener[]} If the event is input-wide, a single [`Listener`](Listener)\n   * object is returned. If the event is channel-specific, an array of all the\n   * [`Listener`](Listener) objects is returned (one for each channel).\n   */\n  addListener(event, listener, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = (listener != undefined) ? [].concat(listener) : undefined; // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n    }\n\n    // Check if the event is channel-specific or input-wide\n    if (InputChannel.EVENTS.includes(event)) {\n\n      // If no channel defined, use all.\n      if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n      let listeners = [];\n\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        listeners.push(this.channels[ch].addListener(event, listener, options));\n      });\n\n      return listeners;\n\n    } else {\n\n      return super.addListener(event, listener, options);\n\n    }\n\n  }\n\n  /**\n   * Adds a one-time event listener that will trigger a function callback when the specified event\n   * happens. The event can be **channel-bound** or **input-wide**. Channel-bound events are\n   * dispatched by {@link InputChannel} objects and are tied to a specific MIDI channel while\n   * input-wide events are dispatched by the {@link Input} object itself and are not tied to a\n   * specific channel.\n   *\n   * When listening for an input-wide event, you must specify the event to listen for and the\n   * callback function to trigger when the event happens:\n   *\n   * ```\n   * WebMidi.inputs[0].addListener(\"midimessage\", someFunction);\n   * ```\n   *\n   * To listen for a channel-bound event, you must also specify the event to listen for and the\n   * function to trigger but you have to add the channels you wish to listen on in the `options`\n   * parameter:\n   *\n   * ```\n   * WebMidi.inputs[0].addListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n   * ```\n   *\n   * The code above will add a listener for the `\"noteon\"` event and call `someFunction` when the\n   * event is triggered on MIDI channels `1`, `2` or `3`.\n   *\n   * Note that, when adding events to channels, it is the {@link InputChannel} instance that\n   * actually gets a listener added and not the `{@link Input} instance.\n   *\n   * Note: if you want to add a listener to a single MIDI channel you should probably do so directly\n   * on the {@link InputChannel} object itself.\n   *\n   * There are 6 families of events you can listen to:\n   *\n   * 1. **MIDI System Common** Events (input-wide)\n   *\n   *    * [songposition]{@link Input#event:songposition}\n   *    * [songselect]{@link Input#event:songselect}\n   *    * [sysex]{@link Input#event:sysex}\n   *    * [timecode]{@link Input#event:timecode}\n   *    * [tunerequest]{@link Input#event:tunerequest}\n   *\n   * 2. **MIDI System Real-Time** Events (input-wide)\n   *\n   *    * [clock]{@link Input#event:clock}\n   *    * [start]{@link Input#event:start}\n   *    * [continue]{@link Input#event:continue}\n   *    * [stop]{@link Input#event:stop}\n   *    * [activesensing]{@link Input#event:activesensing}\n   *    * [reset]{@link Input#event:reset}\n   *\n   * 3. **State Change** Events (input-wide)\n   *\n   *    * [opened]{@link Input#event:opened}\n   *    * [closed]{@link Input#event:closed}\n   *    * [disconnected]{@link Input#event:disconnected}\n   *\n   * 4. **Catch-All** Events (input-wide)\n   *\n   *    * [midimessage]{@link Input#event:midimessage}\n   *    * [unknownmidimessage]{@link Input#event:unknownmidimessage}\n   *\n   * 5. **Channel Voice** Events (channel-specific)\n   *\n   *    * [channelaftertouch]{@link InputChannel#event:channelaftertouch}\n   *    * [controlchange]{@link InputChannel#event:controlchange}\n   *    * [keyaftertouch]{@link InputChannel#event:keyaftertouch}\n   *    * [noteoff]{@link InputChannel#event:noteoff}\n   *    * [noteon]{@link InputChannel#event:noteon}\n   *    * [nrpn]{@link InputChannel#event:nrpn}\n   *    * [pitchbend]{@link InputChannel#event:pitchbend}\n   *    * [programchange]{@link InputChannel#event:programchange}\n   *\n   * 6. **Channel Mode** Events (channel-specific)\n   *\n   *    * allnotesoff\n   *    * allsoundoff\n   *    * localcontrol\n   *    * monomode\n   *    * omnimode\n   *    * resetallcontrollers\n   *\n   * @param event {string} The type of the event.\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object's properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the `arguments` property of the `Listener` object\n   * and can be retrieved or modified as desired.\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to listen on. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array.\n   *\n   * @throws {Error} For channel-specific events, 'options.channels' must be defined.\n   *\n   * @returns {Listener[]} An array of all `Listener` objects that were created.\n   */\n  addOneTimeListener(event, listener, options = {}) {\n    options.remaining = 1;\n    return this.addListener(event, listener, options);\n  }\n\n  /**\n   * This is an alias to the [Input.addListener()]{@link Input#addListener} method.\n   * @since 2.0.0\n   * @deprecated since v3.0\n   * @private\n   */\n  on(event, channel, listener, options) {\n    return this.addListener(event, channel, listener, options);\n  }\n\n  /**\n   * Checks if the specified event type is already defined to trigger the listener function. For\n   * channel-specific events, the function will return `true` only if all channels have the listener\n   * defined.\n   *\n   * @param event {string} The type of the event.\n   *\n   * @param listener {function} The callback function to check for.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of such\n   * integers representing the MIDI channel(s) to check. This parameter is ignored for input-wide\n   * events.\n   *\n   * @returns {boolean} Boolean value indicating whether or not the channel(s) already have this\n   * listener defined.\n   *\n   * @throws Error For channel-specific events, 'options.channels' must be defined.\n   */\n  hasListener(event, listener, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = [].concat(listener); // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n      // Validation\n      if (\n        InputChannel.EVENTS.includes(event) &&\n        options.channels === undefined\n      ) {\n        throw new Error(\"For channel-specific events, 'options.channels' must be defined.\");\n      }\n\n    }\n\n    if (InputChannel.EVENTS.includes(event)) {\n\n      return Utilities.sanitizeChannels(options.channels).every(ch => {\n        return this.channels[ch].hasListener(event, listener);\n      });\n\n    } else {\n      return super.hasListener(event, listener);\n    }\n\n  }\n\n  /**\n   * Removes the specified listener for the specified event. If no listener is specified, all\n   * listeners for the specified event will be removed. If no event is specified, all listeners for\n   * the `Input` as well as all listeners for all `InputChannels` will be removed.\n   *\n   * By default, channel-specific listeners will be removed from all channels unless the\n   * `options.channel` narrows it down.\n   *\n   * @param [type] {string} The type of the event.\n   *\n   * @param [listener] {Function} The callback function to check for.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to match. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {*} [options.context] Only remove the listeners that have this exact context.\n   *\n   * @param {number} [options.remaining] Only remove the listener if it has exactly that many\n   * remaining times to be executed.\n   */\n  removeListener(event, listener, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = [].concat(listener); // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n    }\n\n    if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    // If the event is not specified, remove everything (channel-specific and input-wide)!\n    if (event == undefined) {\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        if (this.channels[ch]) this.channels[ch].removeListener();\n      });\n      return super.removeListener();\n    }\n\n    // If the event is specified, check if it's channel-specific or input-wide.\n    if (InputChannel.EVENTS.includes(event)) {\n\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].removeListener(event, listener, options);\n      });\n\n    } else {\n\n      super.removeListener(event, listener, options);\n\n    }\n\n  }\n\n  /**\n   * Adds a forwarder that will forward all incoming MIDI messages matching the criteria to the\n   * specified output destination(s). This is akin to the hardware MIDI THRU port with the added\n   * benefit of being able to filter which data is forwarded.\n   *\n   * @param {Output|Output[]} destinations An [`Output`](Output) object, or an array of such objects,\n   * to forward messages to.\n   * @param {object} [options={}]\n   * @param {string|string[]} [options.types] A message type (`\"noteon\"`, `\"controlchange\"`, etc.),\n   * or an array of such types, that the message type must match in order to be forwarded. If this\n   * option is not specified, all types of messages will be forwarded. Valid messages are the ones\n   * found in either [`MIDI_SYSTEM_MESSAGES`](Enumerations#MIDI_SYSTEM_MESSAGES) or\n   * [`MIDI_CHANNEL_MESSAGES`](Enumerations#MIDI_CHANNEL_MESSAGES).\n   * @param {number} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]] A\n   * MIDI channel number or an array of channel numbers that the message must match in order to be\n   * forwarded. By default all MIDI channels are included (`1` to `16`).\n   *\n   * @returns {Forwarder} The [`Forwarder`](Forwarder) object created to handle the forwarding. This\n   * is useful if you wish to manipulate or remove the [`Forwarder`](Forwarder) later on.\n   */\n  addForwarder(output, options = {}) {\n\n    let forwarder;\n\n    // Unless 'output' is a forwarder, create a new forwarder\n    if (output instanceof Forwarder) {\n      forwarder = output;\n    } else {\n      forwarder = new Forwarder(output, options);\n    }\n\n    this._forwarders.push(forwarder);\n    return forwarder;\n\n  }\n\n  /**\n   * Removes the specified forwarder.\n   * @param {Forwarder} forwarder The [`Forwarder`](Forwarder) to remove (the\n   * [`Forwarder`](Forwarder) object is returned when calling `addForwarder()`.\n   */\n  removeForwarder(forwarder) {\n    this._forwarders = this._forwarders.filter(item => item !== forwarder);\n  }\n\n  /**\n   * Checks whether the specified forwarded has already been attached to this input.\n   * @param {Forwarder} forwarder The [`Forwarder`](Forwarder) to check (the\n   * [`Forwarder`](Forwarder) object is returned when calling `addForwarder()`.\n   * @returns {boolean}\n   */\n  hasForwarder(forwarder) {\n    return this._forwarders.includes(forwarder);\n  }\n\n  /**\n   * Name of the MIDI input\n   *\n   * @type {string}\n   * @readonly\n   */\n  get name() {\n    return this._midiInput.name;\n  }\n\n  /**\n   * ID string of the MIDI port. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiInput.id;\n  }\n\n  /**\n   * Input port's connection state: `\"pending\"`, `\"open\"` or `\"closed\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiInput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this input port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiInput.manufacturer;\n  }\n\n  /**\n   * An integer to offset the reported octave of incoming notes. By default, middle C (MIDI note\n   * number 60) is placed on the 4th octave (C4).\n   *\n   * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n   * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n   *\n   * Note that this value is combined with the global offset value defined on the `WebMidi` object\n   * (if any).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * State of the input port: `\"connected\"` or `\"disconnected\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiInput.state;\n  }\n\n  /**\n   * Port type. In the case of `Input`, this is always: `\"input\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiInput.type;\n  }\n\n  /**\n   * @type {boolean}\n   * @private\n   * @deprecated since v3.0.0 (moved to 'InputChannel' class)\n   */\n  get nrpnEventsEnabled() {\n    if (WebMidi.validation) {\n      console.warn(\"The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class.\");\n    }\n    return false;\n  }\n\n}\n\n// Events that do not have code below them must be placed outside the class definition (?!)\n\n/**\n * Input-wide (system) event emitted when a **system exclusive** message has been received.\n * You should note that, to receive `sysex` events, you must call the `WebMidi.enable()`\n * method with the `sysex` option set to `true`:\n *\n * ```js\n * WebMidi.enable({sysex: true})\n *  .then(() => console.log(\"WebMidi has been enabled with sysex support.\"))\n *  .catch(err => console.log(\"WebMidi could not be enabled.\"))\n * ```\n *\n * @event Input#sysex\n *\n * @type {object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"sysex\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values.\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array.\n */\n\n/**\n * Input-wide (system) event emitted when a **time code quarter frame** message has been\n * received.\n *\n * @event Input#timecode\n *\n * @type {object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"timecode\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **song position** message has been received.\n *\n * @event Input#songposition\n *\n * @type {object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"songposition\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **song select** message has been received.\n *\n * @event Input#songselect\n *\n * @type {object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"songselect\"`\n * @property {string} song Song (or sequence) number to select (1-128)\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **tune request** message has been received.\n *\n * @event Input#tunerequest\n *\n * @type {object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"tunerequest\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **timing clock** message has been received.\n *\n * @event Input#clock\n *\n * @type {object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"clock\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **start** message has been received.\n *\n * @event Input#start\n *\n * @type {object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"start\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **continue** message has been received.\n *\n * @event Input#continue\n *\n * @type {object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"continue\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **stop** message has been received.\n *\n * @event Input#stop\n *\n * @type {object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"stop\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when an **active sensing** message has been received.\n *\n * @event Input#activesensing\n *\n * @type {object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"activesensing\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **reset** message has been received.\n *\n * @event Input#reset\n *\n * @type {object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"reset\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when an unknown MIDI message has been received. It could\n * be, for example, one of the undefined/reserved messages.\n *\n * @event Input#unknownmidimessage\n *\n * @type {Object}\n *\n * @property {Input} target The `Input` that triggered the event.\n * @property {Message} message A `Message` object containing information about the incoming MIDI\n * message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `\"unknownmidimessage\"`\n *\n * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n * the `message` object instead).\n * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n * the `message` object instead).\n *\n * @since 2.1\n */\n\n","import {Utilities} from \"./Utilities.js\";\nimport {Enumerations} from \"./Enumerations.js\";\n\n/**\n * The `Message` class represents a single MIDI message. It has several properties that make it\n * easy to make sense of the binary data it contains.\n *\n * @param {Uint8Array} data The raw data of the MIDI message as a\n * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n * of integers between `0` and `255`.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Message {\n\n  constructor(data) {\n\n    /**\n     * A\n     * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n     * containing the bytes of the MIDI message. Each byte is an integer between `0` and `255`.\n     *\n     * @type {Uint8Array}\n     * @readonly\n     */\n    this.rawData = data;\n\n    /**\n     * An array containing the bytes of the MIDI message. Each byte is an integer between `0` and\n     * `255`.\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.data = Array.from(this.rawData);\n\n    /**\n     * The MIDI status byte of the message as an integer between `0` and `255`.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.statusByte = this.rawData[0];\n\n    /**\n     * A\n     * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n     * of the data byte(s) of the MIDI message. When the message is a system exclusive message\n     * (sysex), `rawDataBytes` explicitly excludes the manufacturer ID and the sysex end byte so\n     * only the actual data is included.\n     *\n     * @type {Uint8Array}\n     * @readonly\n     */\n    this.rawDataBytes = this.rawData.slice(1);\n\n    /**\n     * An array of the the data byte(s) of the MIDI message. When the message is a system exclusive\n     * message (sysex), `dataBytes` explicitly excludes the manufacturer ID and the sysex end\n     * byte so only the actual data is included.\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.dataBytes = this.data.slice(1);\n\n    /**\n     * A boolean indicating whether the MIDI message is a channel-specific message.\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    this.isChannelMessage = false;\n\n    /**\n     * A boolean indicating whether the MIDI message is a system message (not specific to a\n     * channel).\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    this.isSystemMessage = false;\n\n    /**\n     * An integer identifying the MIDI command. For channel-specific messages, the value will be\n     * between `8` and `14`. For system messages, the value will be between `240` and `255`.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.command = undefined;\n\n    /**\n     * The MIDI channel number (`1` - `16`) that the message is targeting. This is only for\n     * channel-specific messages. For system messages, this will be left undefined.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.channel = undefined;\n\n    /**\n     * When the message is a system exclusive message (sysex), this property contains an array with\n     * either 1 or 3 entries that identify the manufacturer targeted by the message.\n     *\n     * To know how to translate these entries into manufacturer names, check out the official list:\n     * https://www.midi.org/specifications-old/item/manufacturer-id-numbers\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.manufacturerId = undefined;\n\n    /**\n     * The type of message as a string (`\"noteon\"`, `\"controlchange\"`, `\"sysex\"`, etc.)\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.type = undefined;\n\n    // Assign values to property that vary according to whether they are channel-specific or system\n    if (this.statusByte < 240) {\n      this.isChannelMessage = true;\n      this.command = this.statusByte >> 4;\n      this.channel = (this.statusByte & 0b00001111) + 1;\n    } else {\n      this.isSystemMessage = true;\n      this.command = this.statusByte;\n    }\n\n    // Assign type (depending on whether the message is channel-specific or system)\n    if (this.isChannelMessage) {\n      this.type = Utilities.getPropertyByValue(Enumerations.MIDI_CHANNEL_MESSAGES, this.command);\n    } else if (this.isSystemMessage) {\n      this.type = Utilities.getPropertyByValue(Enumerations.MIDI_SYSTEM_MESSAGES, this.command);\n    }\n\n    // When the message is a sysex message, we add a manufacturer property and strip out the id from\n    // dataBytes and rawDataBytes.\n    if (this.statusByte === Enumerations.MIDI_SYSTEM_MESSAGES.sysex) {\n\n      if (this.dataBytes[0] === 0) {\n        this.manufacturerId = this.dataBytes.slice(0, 3);\n        this.dataBytes = this.dataBytes.slice(3, this.rawDataBytes.length - 1);\n        this.rawDataBytes = this.rawDataBytes.slice(3, this.rawDataBytes.length - 1);\n      } else {\n        this.manufacturerId = [this.dataBytes[0]];\n        this.dataBytes = this.dataBytes.slice(1, this.dataBytes.length - 1);\n        this.rawDataBytes = this.rawDataBytes.slice(1, this.rawDataBytes.length - 1);\n      }\n\n    }\n\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {Input} from \"./Input.js\";\nimport {Output} from \"./Output.js\";\nimport {Utilities} from \"./Utilities.js\";\nimport {Enumerations} from \"./Enumerations.js\";\nimport {InputChannel} from \"./InputChannel.js\";\n\n/*START-NODE.JS*/\n// This block of code is only relevant on Node.js and causes issues with bundlers (such as Webpack)\n// and server-side rendering. This is why it is explicitly being stripped off for the IIFE and ESM\n// distributions.\nglobal[\"performance\"] = require(\"perf_hooks\").performance;\nglobal[\"navigator\"] = require(\"jzz\");\n/*END-NODE.JS*/\n\n/**\n * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it\n * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.\n *\n * When using the WebMidi.js library, you should know that the `WebMidi` class has already been\n * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should\n * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6\n * module) version, you get an already-instantiated object when you import the module.\n *\n * @fires WebMidi#connected\n * @fires WebMidi#disabled\n * @fires WebMidi#disconnected\n * @fires WebMidi#enabled\n * @fires WebMidi#midiaccessgranted\n *\n * @extends EventEmitter\n * @license Apache-2.0\n */\nclass WebMidi extends EventEmitter {\n\n  constructor() {\n\n    super();\n\n    /**\n     * Object containing system-wide default values that can be changed to customize how the library\n     * works.\n     *\n     * @type {object}\n     *\n     * @property {object}  defaults.note - Default values relating to note\n     * @property {number}  defaults.note.attack - A number between 0 and 127 representing the\n     * default attack velocity of notes. Initial value is 64.\n     * @property {number}  defaults.note.release - A number between 0 and 127 representing the\n     * default release velocity of notes. Initial value is 64.\n     * @property {number}  defaults.note.duration - A number representing the default duration of\n     * notes (in seconds). Initial value is Infinity.\n     */\n    this.defaults = {\n      note: {\n        attack: Utilities.from7bitToFloat(64),\n        release: Utilities.from7bitToFloat(64),\n        duration: Infinity\n      }\n    };\n\n    /**\n     * The [`MIDIAccess`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess)\n     * instance used to talk to the lower-level Web MIDI API. This should not be used directly\n     * unless you know what you are doing.\n     *\n     * @type {?MIDIAccess}\n     * @readonly\n     */\n    this.interface = null;\n\n    /**\n     * Indicates whether argument validation and backwards-compatibility checks are performed\n     * throughout the WebMidi.js library for object methods and property setters.\n     *\n     * This is an advanced setting that should be used carefully. Setting `validation` to `false`\n     * improves performance but should only be done once the project has been thoroughly tested with\n     * `validation` turned on.\n     *\n     * @type {boolean}\n     */\n    this.validation = true;\n\n    /**\n     * Array of all (Input) objects\n     * @type {Input[]}\n     * @private\n     */\n    this._inputs = [];\n\n    /**\n     * Array of disconnected [`Input`](Input) objects. This is used when inputs are plugged back in\n     * to retain their previous state.\n     * @type {Input[]}\n     * @private\n     */\n    this._disconnectedInputs = [];\n\n    /**\n     * Array of all [`Output`](Output) objects\n     * @type {Output[]}\n     * @private\n     */\n    this._outputs = [];\n\n    /**\n     * Array of disconnected [`Output`](Output) objects. This is used when outputs are plugged back\n     * in to retain their previous state.\n     * @type {Output[]}\n     * @private\n     */\n    this._disconnectedOutputs = [];\n\n    /**\n     * Array of statechange events to process. These events must be parsed synchronously so they do\n     * not override each other.\n     *\n     * @type {string[]}\n     * @private\n     */\n    this._stateChangeQueue = [];\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n  }\n\n  /**\n   * Checks if the Web MIDI API is available in the current environment and then tries to connect to\n   * the host's MIDI subsystem. This is an asynchronous operation and it causes a security prompt to\n   * be displayed to the user.\n   *\n   * To enable the use of MIDI system exclusive messages, the `sysex` option should be set to\n   * `true`. However, under some environments (e.g. Jazz-Plugin), the `sysex` option is ignored\n   * and system exclusive messages are always enabled. You can check the\n   * [`sysexEnabled`](#sysexEnabled) property to confirm.\n   *\n   * To enable access to software synthesizers available on the host, you would set the `software`\n   * option to `true`. However, this option is only there to future-proof the library as support for\n   * software synths has not yet been implemented in any browser (as of September 2021).\n   *\n   * By the way, if you call the [`enable()`](#enable) method while WebMidi.js is already enabled,\n   * the callback function will be executed (if any), the promise will resolve but the events\n   * ([`\"midiaccessgranted\"`](#event:midiaccessgranted), [`\"connected\"`](#event:connected) and\n   * [`\"enabled\"`](#event:enabled)) will not be fired.\n   *\n   * There are 3 ways to execute code after `WebMidi` has been enabled:\n   *\n   * - Pass a callback function in the `options`\n   * - Listen to the [`\"enabled\"`](#event:enabled) event\n   * - Wait for the promise to resolve\n   *\n   * In order, this is what happens towards the end of the enabling process:\n   *\n   * 1. [`\"midiaccessgranted\"`](#event:midiaccessgranted) event is triggered once the user has\n   * granted access to use MIDI.\n   * 2. [`\"connected\"`](#event:connected) events are triggered (for each available input and output)\n   * 3. [`\"enabled\"`](#event:enabled) event is triggered when WebMidi.js is fully ready\n   * 4. specified callback (if any) is executed\n   * 5. promise is resolved and fulfilled with the `WebMidi` object.\n   *\n   * **Important note**: starting with Chrome v77, a page using Web MIDI API must be hosted on a\n   * secure origin (`https://`, `localhost` or `file:///`) and the user will always be prompted to\n   * authorize the operation (no matter if the `sysex` option is `true` or not).\n   *\n   * ##### Example\n   * ```js\n   * // Enabling WebMidi and using the promise\n   * WebMidi.enable().then(ports => {\n   *   console.log(\"WebMidi.js has been enabled!\");\n   *   console.log(\"Inputs: \", ports.inputs);\n   *   console.log(\"Outputs: \", ports.outputs);\n   * })\n   * ```\n   *\n   * @param [options] {object}\n   *\n   * @param [options.callback] {function} A function to execute once the operation completes. This\n   * function will receive an `Error` object if enabling the Web MIDI API failed.\n   *\n   * @param [options.sysex=false] {boolean} Whether to enable MIDI system exclusive messages or not.\n   *\n   * @param [options.validation=true] {boolean} Whether to enable library-wide validation of method\n   * arguments and setter values. This is an advanced setting that should be used carefully. Setting\n   * [`validation`](#validation) to `false` improves performance but should only be done once the\n   * project has been thoroughly tested with [`validation`](#validation)  turned on.\n   *\n   * @param [options.software=false] {boolean} Whether to request access to software synthesizers on\n   * the host system. This is part of the spec but has not yet been implemented by most browsers as\n   * of April 2020.\n   *\n   * @async\n   *\n   * @returns {Promise.<WebMidi>} The promise is fulfilled with the `WebMidi` object fro\n   * chainability\n   *\n   * @throws {Error} The Web MIDI API is not supported in your environment.\n   * @throws {Error} Jazz-Plugin must be installed to use WebMIDIAPIShim.\n   */\n  async enable(options = {}, legacy = false) {\n\n    this.validation = (options.validation !== false);\n\n    if (this.validation) {\n      // Backwards-compatibility. Previous syntax was: enable(callback, sysex)\n      if (typeof options === \"function\") options = {callback: options, sysex: legacy};\n      if (legacy) options.sysex = true;\n    }\n\n    // If already enabled, trigger callback and resolve promise but do not dispatch events.\n    if (this.enabled) {\n      if (typeof options.callback === \"function\") options.callback();\n      return Promise.resolve();\n    }\n\n    // The Jazz-Plugin takes a while to be available (even after the Window's 'load' event has been\n    // fired). Therefore, we wait a little while to give it time to finish loading (initiqted in\n    // constructor).\n    // if (!this.supported) {\n    //\n    //   await new Promise((resolve, reject) => {\n    //\n    //     const start = this.time;\n    //\n    //     const intervalID = setInterval(() => {\n    //\n    //       if (this.supported) {\n    //         clearInterval(intervalID);\n    //         resolve();\n    //       } else {\n    //         if (this.time > start + 1500) {\n    //           clearInterval(intervalID);\n    //           let error = new Error(\"The Web MIDI API is not available in your environment.\");\n    //           if (typeof options.callback === \"function\") options.callback(error);\n    //           reject(error);\n    //         }\n    //       }\n    //\n    //     }, 25);\n    //\n    //   });\n    //\n    // }\n\n    /**\n     * Event emitted when an error occurs trying to enable `WebMidi`\n     *\n     * @event WebMidi#error\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `error`\n     * @property {*} error Actual error that occurred\n     */\n    const errorEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"error\",\n      error: undefined\n    };\n\n    /**\n     * Event emitted once the MIDI interface has been successfully created (which implies user has\n     * granted access to MIDI).\n     *\n     * @event WebMidi#midiaccessgranted\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `midiaccessgranted`\n     */\n    const midiAccessGrantedEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"midiaccessgranted\"\n    };\n\n    /**\n     * Event emitted once `WebMidi` has been fully enabled\n     *\n     * @event WebMidi#enabled\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `\"enabled\"`\n     */\n    const enabledEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"enabled\"\n    };\n\n    // Request MIDI access (this iw where the prompt will appear)\n    try {\n      this.interface = await navigator.requestMIDIAccess(\n        {sysex: options.sysex, software: options.software}\n      );\n    } catch(err) {\n      errorEvent.error = err;\n      this.emit(\"error\", errorEvent);\n      if (typeof options.callback === \"function\") options.callback(err);\n      return Promise.reject(err);\n    }\n\n    // Now that the Web MIDI API interface has been created, we trigger the 'midiaccessgranted'\n    // event. This allows the developer an occasion to assign listeners on 'connected' events.\n    this.emit(\"midiaccessgranted\", midiAccessGrantedEvent);\n\n    // We setup the state change listener before creating the ports so that it properly catches the\n    // the ports' `connected` events\n    this.interface.onstatechange = this._onInterfaceStateChange.bind(this);\n\n    // Update inputs and outputs (this is where `Input` and `Output` objects are created).\n    try {\n      await this._updateInputsAndOutputs();\n    } catch (err) {\n      errorEvent.error = err;\n      this.emit(\"error\", errorEvent);\n      if (typeof options.callback === \"function\") options.callback(err);\n      return Promise.reject(err);\n    }\n\n    // If we make it here, the ports have been successfully created, so we trigger the 'enabled'\n    // event.\n    this.emit(\"enabled\", enabledEvent);\n\n    // Execute the callback (if any) and resolve the promise with 'this' (for chainability)\n    if (typeof options.callback === \"function\") options.callback();\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * Completely disables **WebMidi.js** by unlinking the MIDI subsystem's interface and closing all\n   * [`Input`](Input) and [`Output`](Output) objects that may have been opened. This also means that\n   * listeners added to [`Input`](Input) objects, [`Output`](Output) objects or to `WebMidi` itself\n   * are also destroyed.\n   *\n   * @async\n   * @returns {Promise}\n   *\n   * @throws {Error} The Web MIDI API is not supported by your environment.\n   *\n   * @since 2.0.0\n   */\n  async disable() {\n\n    return this._destroyInputsAndOutputs().then(() => {\n\n      if (typeof navigator.close === \"function\") navigator.close();\n\n      if (this.interface) this.interface.onstatechange = undefined;\n      this.interface = null; // also resets enabled, sysexEnabled\n\n      /**\n       * Event emitted once `WebMidi` has been successfully disabled.\n       *\n       * @event WebMidi#disabled\n       * @type {object}\n       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {WebMidi} target The object that triggered the event\n       * @property {string} type `\"disabled\"`\n       */\n      let event = {\n        timestamp: this.time,\n        target: this,\n        type: \"disabled\"\n      };\n\n      // Finally, trigger the 'disabled' event and then remove all listeners.\n      this.emit(\"disabled\", event);\n      this.removeListener();\n\n    });\n\n  };\n\n  /**\n   * Returns the [`Input`](Input) object that matches the specified ID string or `false` if no\n   * matching input is found. As per the Web MIDI API specification, IDs are strings (not integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the input. IDs can be viewed by looking at the\n   * [`WebMidi.inputs`](WebMidi#inputs) array. Even though they sometimes look like integers, IDs\n   * are strings.\n   *\n   * @returns {Input|false} An [`Input`](Input) object matching the specified ID string or `false`\n   * if no matching input can be found.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputById(id) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!id) return false;\n    }\n\n    for (let i = 0; i < this.inputs.length; i++) {\n      if (this.inputs[i].id === id.toString()) return this.inputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the first [`Input`](Input) object whose name **contains** the specified string. Note\n   * that the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [inputs](WebMidi#inputs) array).\n   *\n   * @returns {Input|false} The [`Input`](Input) that was found or `false` if no input contained the\n   * specified name.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputByName(name) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!name) return false;\n      name = name.toString();\n    }\n\n    for (let i = 0; i < this.inputs.length; i++) {\n      if (~this.inputs[i].name.indexOf(name)) return this.inputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the first [`Output`](Output) object whose name **contains** the specified string. Note\n   * that the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [outputs](WebMidi#outputs) array).\n   *\n   * @returns {Output|false} The [`Output`](Output) that was found or `false` if no output matched\n   * the specified name.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputByName(name) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!name) return false;\n      name = name.toString();\n    }\n\n    for (let i = 0; i < this.outputs.length; i++) {\n      if (~this.outputs[i].name.indexOf(name)) return this.outputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the [`Output`](Output) object that matches the specified ID string or `false` if no\n   * matching output is found. As per the Web MIDI API specification, IDs are strings (not\n   * integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the port. IDs can be viewed by looking at the\n   * [`WebMidi.outputs`](WebMidi#outputs) array.\n   *\n   * @returns {Output|false} An [`Output`](Output) object matching the specified ID string. If no\n   * matching output can be found, the method returns `false`.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputById(id) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!id) return false;\n    }\n\n    for (let i = 0; i < this.outputs.length; i++) {\n      if (this.outputs[i].id === id.toString()) return this.outputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.toNoteNumber() instead.\n   */\n  noteNameToNumber(name) {\n    if (this.validation) {\n      console.warn(\n        \"The noteNameToNumber() method is deprecated. Use \" +\n        \"Utilities.toNoteNumber() instead.\"\n      );\n    }\n    return Utilities.toNoteNumber(name, this.octaveOffset);\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0, use Utilities.getNoteDetails() instead.\n   */\n  getOctave(number) {\n\n    if (this.validation) {\n      console.warn(\"The getOctave()is deprecated. Use Utilities.getNoteDetails() instead\");\n      number = parseInt(number);\n    }\n\n    if (!isNaN(number) && number >= 0 && number <= 127) {\n      return Utilities.getNoteDetails(Utilities.offsetNumber(number, this.octaveOffset)).octave;\n    } else {\n      return false;\n    }\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0, use Utilities.sanitizeChannels() instead.\n   */\n  sanitizeChannels(channel) {\n\n    if (this.validation) {\n      console.warn(\"The sanitizeChannels() method has been moved to the utilities class.\");\n    }\n\n    return Utilities.sanitizeChannels(channel);\n\n    // let channels;\n    //\n    // if (this.validation) {\n    //\n    //   if (channel === \"all\") { // backwards-compatibility\n    //     channels = [\"all\"];\n    //   } else if (channel === \"none\") { // backwards-compatibility\n    //     return [];\n    //   }\n    //\n    // }\n    //\n    // if (!Array.isArray(channel)) {\n    //   channels = [channel];\n    // } else {\n    //   channels = channel;\n    // }\n    //\n    // // In order to preserve backwards-compatibility, we let this assignment as it is.\n    // if (channels.indexOf(\"all\") > -1) {\n    //   channels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    // }\n    //\n    // return channels\n    //   .map(function(ch) {\n    //     return parseInt(ch);\n    //   })\n    //   .filter(function(ch) {\n    //     return (ch >= 1 && ch <= 16);\n    //   });\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.sanitizeChannels() instead.\n   */\n  toMIDIChannels(channel) {\n\n    if (this.validation) {\n      console.warn(\n        \"The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead.\"\n      );\n    }\n\n    return Utilities.sanitizeChannels(channel);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.guessNoteNumber() instead.\n   */\n  guessNoteNumber(input) {\n\n    if (this.validation) {\n      console.warn(\n        \"The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead.\"\n      );\n    }\n\n    return Utilities.guessNoteNumber(input, this.octaveOffset);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.buildNoteArray() instead.\n   */\n  getValidNoteArray(notes, options = {}) {\n    if (this.validation) {\n      console.warn(\n        \"The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()\"\n      );\n    }\n    return Utilities.buildNoteArray(notes, options);\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.toTimestamp() instead.\n   */\n  convertToTimestamp(time) {\n\n    if (this.validation) {\n      console.warn(\n        \"The convertToTimestamp() method has been moved to Utilities.toTimestamp().\"\n      );\n    }\n\n    return Utilities.toTimestamp(time);\n\n  }\n\n  /**\n   * @return {Promise<void>}\n   * @private\n   */\n  async _destroyInputsAndOutputs() {\n\n    let promises = [];\n\n    this.inputs.forEach(input => promises.push(input.destroy()));\n    this.outputs.forEach(output => promises.push(output.destroy()));\n\n    return Promise.all(promises).then(() => {\n      this._inputs = [];\n      this._outputs = [];\n    });\n\n  }\n\n  /**\n   * @private\n   */\n  _onInterfaceStateChange(e) {\n\n    this._updateInputsAndOutputs();\n\n    /**\n     * Event emitted when an [`Input`](Input) or [`Output`](Output) becomes available. This event is\n     * typically fired whenever a MIDI device is plugged in. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#connected\n     * @type {object}\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n     * (in milliseconds since the navigation start of the document).\n     * @property {string} type `\"connected\"`\n     * @property {Input|Output} target The [`Input`](Input) or [`Output`](Output) object that\n     * triggered the event.\n     */\n\n    /**\n     * Event emitted when an [`Input`](Input) or [`Output`](Output) becomes unavailable. This event\n     * is typically fired whenever a MIDI device is unplugged. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#disconnected\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {string} type `\"disconnected\"`\n     * @property {object} target Object with properties describing the [`Input`](Input) or\n     * [`Output`](Output) that triggered the event.\n     * @property {string} target.connection `\"closed\"`\n     * @property {string} target.id ID of the input\n     * @property {string} target.manufacturer Manufacturer of the device that provided the input\n     * @property {string} target.name Name of the device that provided the input\n     * @property {string} target.state `disconnected`\n     * @property {string} target.type `input` or `output`\n     */\n    let event = {\n      timestamp: e.timeStamp,\n      type: e.port.state\n    };\n\n    // We check if \"connection\" is \"open\" because connected events are also triggered with\n    // \"connection=closed\"\n    if (e.port.state === \"connected\" && e.port.connection === \"open\") {\n\n      if (e.port.type === \"output\") {\n        event.port = this.getOutputById(e.port.id); // legacy\n        event.target = event.port;\n      } else if (e.port.type === \"input\") {\n        event.port = this.getInputById(e.port.id); // legacy\n        event.target = event.port;\n      }\n\n      this.emit(e.port.state, event);\n\n    // We check if \"connection\" is \"pending\" because we do not always get the \"closed\" event\n    } else if (e.port.state === \"disconnected\" && e.port.connection === \"pending\") {\n\n      // It feels more logical to include a `target` property instead of a `port` property. This is\n      // the terminology used everywhere in the library.\n      event.port = {\n        connection: \"closed\",\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n\n      event.target = event.port;\n\n      this.emit(e.port.state, event);\n\n    }\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputsAndOutputs() {\n\n    return Promise.all([\n      this._updateInputs(),\n      this._updateOutputs()\n    ]);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputs() {\n\n    // We must check for the existence of this.interface because it might have been closed via\n    // WebMidi.disable().\n    if (!this.interface) return;\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = this._inputs.length - 1; i >= 0; i--) {\n      const current = this._inputs[i];\n      const inputs = Array.from(this.interface.inputs.values());\n      if (! inputs.find(input => input === current._midiInput)) {\n        // Instead of destroying removed inputs, we stash them in case they come back (which is the\n        // case when the computer goes to sleep and is later brought back online).\n        this._disconnectedInputs.push(current);\n        this._inputs.splice(i, 1);\n      }\n    }\n\n    // Array to hold pending promises from trying to open all input ports\n    let promises = [];\n\n    // Add new inputs (if not already present)\n    this.interface.inputs.forEach(nInput => {\n\n      // Check if the input is currently absent from the 'inputs' array.\n      if (! this._inputs.find(input => input._midiInput === nInput) ) {\n\n        // If the input has previously been stashed away, reuse it. If not, create a new one.\n        let input = this._disconnectedInputs.find(input => input._midiInput === nInput);\n        if (!input) input = new Input(nInput);\n        this._inputs.push(input);\n        promises.push(input.open());\n\n      }\n\n    });\n\n    // Return a promise that resolves when all promises have resolved\n    return Promise.all(promises);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateOutputs() {\n\n    // We must check for the existence of this.interface because it might have been closed via\n    // WebMidi.disable().\n    if (!this.interface) return;\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = this._outputs.length - 1; i >= 0; i--) {\n      const current = this._outputs[i];\n      const outputs = Array.from(this.interface.outputs.values());\n      if (! outputs.find(output => output === current._midiOutput)) {\n        // Instead of destroying removed inputs, we stash them in case they come back (which is the\n        // case when the computer goes to sleep and is later brought back online).\n        this._disconnectedOutputs.push(current);\n        this._outputs.splice(i, 1);\n      }\n    }\n\n    // Array to hold pending promises from trying to open all output ports\n    let promises = [];\n\n    // Add new outputs (if not already present)\n    this.interface.outputs.forEach(nOutput => {\n\n      // Check if the output is currently absent from the 'outputs' array.\n      if (! this._outputs.find(output => output._midiOutput === nOutput) ) {\n\n        // If the output has previously been stashed away, reuse it. If not, create a new one.\n        let output = this._disconnectedOutputs.find(output => output._midiOutput === nOutput);\n        if (!output) output = new Output(nOutput);\n        this._outputs.push(output);\n        promises.push(output.open());\n\n      }\n\n    });\n\n    // Return a promise that resolves when all sub-promises have resolved\n    return Promise.all(promises);\n\n  };\n\n  // injectPluginMarkup(parent) {\n  //\n  //   // Silently ignore on Node.js\n  //   if (this.isNode) return;\n  //\n  //   // Default to <body> if no parent is specified\n  //   if (!(parent instanceof Element) && !(parent instanceof HTMLDocument)) {\n  //     parent = document.body;\n  //   }\n  //\n  //   // IE10 needs this:\n  //   // <meta http-equiv=\"X-UA-Compatible\" content=\"requiresActiveX=true\"/>\n  //\n  //   // Create markup and add to parent\n  //   const obj = document.createElement(\"object\");\n  //   obj.classid = \"CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90\"; // IE\n  //   if (!obj.isJazz) obj.type = \"audio/x-jazz\";                 // Standards-compliant\n  //   obj.style.visibility = \"hidden\";\n  //   obj.style.width = obj.style.height = \"0px\";\n  //   parent.appendChild(obj);\n  //\n  // }\n\n  /**\n   * Indicates whether access to the host's MIDI subsystem is active or not.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get enabled() {\n    return this.interface !== null;\n  }\n\n  /**\n   * An array of all currently available MIDI inputs.\n   *\n   * @readonly\n   * @type {Array}\n   */\n  get inputs() {\n    return this._inputs;\n  }\n\n  /**\n   * Indicates whether the current environment is Node.js or not. If you need to check if we are in\n   * browser, use [`isBrowser`](#isBrowser). In certain environments (such as Electron and\n   * NW.js) [`isNode`](#isNode) and [`isBrowser`](#isBrowser) can both be true at the\n   * same time.\n   * @type {boolean}\n   */\n  get isNode() {\n\n    return (Object.prototype.toString.call(\n      typeof process !== \"undefined\" ? process : 0\n    ) === \"[object process]\");\n\n    // Alternative way to try\n    // return typeof process !== \"undefined\" &&\n    //   process.versions != null &&\n    //   process.versions.node != null;\n\n  }\n\n  /**\n   * Indicates whether the current environment is a browser environment or not. If you need to check\n   * if we are in Node.js, use [`isNode`](#isNode). In certain environments (such as Electron and\n   * NW.js) [`isNode`](#isNode) and [`isBrowser`](#isBrowser) can both be true at the same time.\n   * @type {boolean}\n   */\n  get isBrowser() {\n    return typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n  }\n\n  /**\n   * An integer to offset the octave of notes received from external devices or sent to external\n   * devices.\n   *\n   * When a MIDI message comes in on an input channel the reported note name will be offset. For\n   * example, if the `octaveOffset` is set to `-1` and a [`\"noteon\"`](InputChannel#event:noteon)\n   * message with MIDI number 60 comes in, the note will be reported as C3 (instead of C4).\n   *\n   * By the same token, when [`OutputChannel.playNote()`](OutputChannel#playNote) is called, the\n   * MIDI note number being sent will be offset. If `octaveOffset` is set to `-1`, the MIDI note\n   * number sent will be 72 (instead of 60).\n   *\n   * @type {number}\n   *\n   * @since 2.1\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * An array of all currently available MIDI outputs as [`Output`](Output) objects.\n   *\n   * @readonly\n   * @type {Array}\n   */\n  get outputs() {\n    return this._outputs;\n  }\n\n  /**\n   * Indicates whether the environment provides support for the Web MIDI API or not.\n   *\n   * **Note**: in environments that do not offer built-in MIDI support, this will report `true` if\n   * the\n   * [`navigator.requestMIDIAccess`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess)\n   * function is available. For example, if you have installed WebMIDIAPIShim.js but no plugin, this\n   * property will be `true` even though actual support might not be there.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get supported() {\n    return (typeof navigator !== \"undefined\" && navigator.requestMIDIAccess);\n  }\n\n  /**\n   * Indicates whether MIDI system exclusive messages have been activated when WebMidi.js was\n   * enabled via the [`enable()`](#enable) method.\n   *\n   * @readonly\n   * @type boolean\n   */\n  get sysexEnabled() {\n    return !!(this.interface && this.interface.sysexEnabled);\n  }\n\n  /**\n   * The elapsed time, in milliseconds, since the time\n   * [origin](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp#The_time_origin).\n   * Said simply, it is the number of milliseconds that passed since the page was loaded. Being a\n   * floating-point number, it has sub-millisecond accuracy. According to the\n   * [documentation](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp), the\n   * time should be accurate to 5 µs (microseconds). However, due to various constraints, the\n   * browser might only be accurate to one millisecond.\n   *\n   * @type {DOMHighResTimeStamp}\n   * @readonly\n   */\n  get time() {\n    return performance.now();\n  }\n\n  /**\n   * The version of the library\n   *\n   * @readonly\n   * @type string\n   */\n  get version() {\n    return \"[VI]{version}[/VI]\";\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use InputChannel.EVENTS instead.\n   */\n  get CHANNEL_EVENTS() {\n    if (this.validation) {\n      console.warn(\n        \"The CHANNEL_EVENTS enum has been moved to InputChannel.EVENTS.\"\n      );\n    }\n    return InputChannel.EVENTS;\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.MIDI_SYSTEM_MESSAGES instead.\n   */\n  get MIDI_SYSTEM_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_SYSTEM_MESSAGES enum has been moved to \" +\n        \"Enumerations.MIDI_SYSTEM_MESSAGES.\"\n      );\n    }\n\n    return Enumerations.MIDI_SYSTEM_MESSAGES;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.MIDI_CHANNEL_MODE_MESSAGES instead\n   */\n  get MIDI_CHANNEL_MODE_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to \" +\n        \"Enumerations.MIDI_CHANNEL_MODE_MESSAGES.\"\n      );\n    }\n\n    return Enumerations.MIDI_CHANNEL_MODE_MESSAGES;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.MIDI_CONTROL_CHANGE_MESSAGES instead.\n   */\n  get MIDI_CONTROL_CHANGE_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CONTROL_CHANGE_MESSAGES enum has been moved to \" +\n        \"Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.\"\n      );\n    }\n\n    return Enumerations.MIDI_CONTROL_CHANGE_MESSAGES;\n\n  }\n\n  /**\n   * @deprecated since 3.0.0. Use Enumerations.MIDI_REGISTERED_PARAMETERS instead.\n   * @private\n   */\n  get MIDI_REGISTERED_PARAMETER() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_REGISTERED_PARAMETER enum has been moved to \" +\n        \"Enumerations.MIDI_REGISTERED_PARAMETERS.\"\n      );\n    }\n\n    return this.MIDI_REGISTERED_PARAMETERS;\n\n  }\n\n  /**\n   * @deprecated since 3.0.0.\n   * @private\n   */\n  get NOTES() {\n\n    if (this.validation) {\n      console.warn(\"The NOTES enum has been deprecated.\");\n    }\n\n    return [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n  }\n\n}\n\n// Export singleton instance of WebMidi class. The 'constructor' is nulled so that it cannot be used\n// to instantiate a new WebMidi object or extend it. However, it is not freezed so it remains\n// extensible (properties can be added at will).\nconst wm = new WebMidi();\nwm.constructor = null;\nexport {wm as WebMidi};\n\nexport {Note} from \"./Note.js\";\nexport {Utilities} from \"./Utilities.js\";\nexport {Enumerations} from \"./Enumerations.js\";\nexport {Message} from \"./Message.js\";\nexport {Forwarder} from \"./Forwarder.js\";\n"],"names":["e","[object Object]","this","eventMap","eventsSuspended","n","r","i","length","String","ANY_EVENT","TypeError","s","t","prepend","unshift","push","remaining","addListener","Symbol","for","Object","entries","some","filter","callback","eventNames","keys","getListeners","forEach","suspended","concat","Array","isArray","arguments","apply","context","count","remove","duration","parseInt","isNaN","Promise","clearTimeout","setTimeout","eventCount","ReferenceError","assign","event","target","removeListener","Note","value","options","WebMidi","defaults","note","attack","release","undefined","rawAttack","Utilities","from7bitToFloat","rawRelease","Number","isInteger","identifier","toNoteIdentifier","_name","_accidental","_octave","fragments","getNoteDetails","validation","Error","name","accidental","octave","toUpperCase","includes","toLowerCase","_duration","parseFloat","RangeError","_attack","_release","fromFloatTo7Bit","number","toNoteNumber","octaveOffset","semitoneOffset","Math","min","max","Enumerations","MIDI_CHANNEL_MESSAGES","noteoff","noteon","keyaftertouch","controlchange","programchange","channelaftertouch","pitchbend","MIDI_CHANNEL_NUMBERS","MIDI_CHANNEL_MODE_MESSAGES","allsoundoff","resetallcontrollers","localcontrol","allnotesoff","omnimodeoff","omnimodeon","monomodeon","polymodeon","MIDI_CONTROL_CHANGE_MESSAGES","bankselectcoarse","modulationwheelcoarse","breathcontrollercoarse","footcontrollercoarse","portamentotimecoarse","dataentrycoarse","volumecoarse","balancecoarse","pancoarse","expressioncoarse","effectcontrol1coarse","effectcontrol2coarse","generalpurposeslider1","generalpurposeslider2","generalpurposeslider3","generalpurposeslider4","bankselectfine","modulationwheelfine","breathcontrollerfine","footcontrollerfine","portamentotimefine","dataentryfine","volumefine","balancefine","panfine","expressionfine","effectcontrol1fine","effectcontrol2fine","holdpedal","portamento","sustenutopedal","softpedal","legatopedal","hold2pedal","soundvariation","resonance","soundreleasetime","soundattacktime","brightness","soundcontrol6","soundcontrol7","soundcontrol8","soundcontrol9","soundcontrol10","generalpurposebutton1","generalpurposebutton2","generalpurposebutton3","generalpurposebutton4","reverblevel","tremololevel","choruslevel","celestelevel","phaserlevel","databuttonincrement","databuttondecrement","nonregisteredparametercoarse","nonregisteredparameterfine","registeredparametercoarse","registeredparameterfine","MIDI_REGISTERED_PARAMETERS","pitchbendrange","channelfinetuning","channelcoarsetuning","tuningprogram","tuningbank","modulationrange","azimuthangle","elevationangle","gain","distanceratio","maximumdistance","maximumdistancegain","referencedistanceratio","panspreadangle","rollangle","MIDI_SYSTEM_MESSAGES","sysex","timecode","songposition","songselect","tunerequest","tuningrequest","sysexend","clock","start","continue","stop","activesensing","reset","midimessage","unknownsystemmessage","result","C","D","E","F","G","A","B","startsWith","matches","match","channel","channels","indexOf","map","ch","time","parsed","substring","input","output","trim","floor","toString","guessNoteNumber","notes","buildNote","Infinity","round","msb","lsb","multiplied","object","find","key","getPropertyByValue","cm","hasOwnProperty","InputChannel","EventEmitter","super","_input","_number","_octaveOffset","_nrpnBuffer","_rpnBuffer","parameterNumberEventsEnabled","notesState","fill","type","emit","_parseEventForStandardMessages","message","data1","dataBytes","data2","offsetNumber","rawValue","velocity","rawVelocity","rawKey","controller","getCcNameByNumber","subtype","_parseChannelModeMessage","_isRpnOrNrpnController","_parseEventForParameterNumber","data","list","_dispatchParameterNumberEvent","paramMsb","paramLsb","timestamp","parameterMsb","parameterLsb","parameter","console","warn","getChannelModeByNumber","nrpnEventsEnabled","EVENTS","OutputChannel","_output","send","pressure","useRawValue","offset","item","toTimestamp","index","sendControlChange","valid","getOwnPropertyNames","p","_selectRegisteredParameter","_deselectRegisteredParameter","sendNoteOn","isFinite","NaN","noteOffOptions","sendNoteOff","nVelocity","buildNoteArray","getOffsetNumber","command","state","sendChannelMode","coarse","fine","setRegisteredParameter","semitones","cents","nrpn","_selectNonRegisteredParameter","_setCurrentParameter","_deselectNonRegisteredParameter","fromFloatToMsbLsb","program","rpn","mode","Output","midiOutput","_midiOutput","onstatechange","_onStateChange","bind","destroy","close","port","connection","id","manufacturer","open","resolve","err","reject","legacy","Message","isNode","rawData","Uint8Array","from","slice","merged","set","clear","setSongPosition","setSong","sendTuneRequest","sanitizeChannels","setKeyAftertouch","setPitchBendRange","setChannelAftertouch","setPitchBend","bend","setProgram","setModulationRange","setMasterTuning","setTuningProgram","setTuningBank","turnSoundOff","turnNotesOff","resetAllControllers","setPolyphonicMode","setLocalControl","setOmniMode","setNonRegisteredParameter","incrementRegisteredParameter","decrementRegisteredParameter","playNote","Forwarder","destinations","types","destination","Input","midiInput","_midiInput","_forwarders","onmidimessage","_onMidiMessage","timeStamp","statusByte","isSystemMessage","_parseEvent","isChannelMessage","_processMidiMessageEvent","forwarder","forward","song","listener","listeners","every","hasListener","rawDataBytes","manufacturerId","wm","interface","_inputs","_disconnectedInputs","_outputs","_disconnectedOutputs","_stateChangeQueue","enabled","errorEvent","error","midiAccessGrantedEvent","enabledEvent","navigator","requestMIDIAccess","software","_onInterfaceStateChange","_updateInputsAndOutputs","_destroyInputsAndOutputs","then","inputs","outputs","promises","all","getOutputById","getInputById","_updateInputs","_updateOutputs","current","values","splice","nInput","nOutput","prototype","call","process","isBrowser","window","document","supported","sysexEnabled","performance","now","version","CHANNEL_EVENTS","MIDI_REGISTERED_PARAMETER","NOTES","constructor"],"mappings":"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"}