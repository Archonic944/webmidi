{"version":3,"file":"webmidi.cjs.min.js","sources":["../node_modules/djipevents/dist/djipevents.esm.min.js","../src/Note.js","../src/Utilities.js","../src/InputChannel.js","../src/Input.js","../src/OutputChannel.js","../src/Output.js","../src/Message.js","../src/WebMidi.js"],"sourcesContent":["class e{constructor(e=!1){this.eventMap={},this.eventsSuspended=1==e}addListener(n,r,i={}){if(\"string\"==typeof n&&n.length<1||n instanceof String&&n.length<1||\"string\"!=typeof n&&!(n instanceof String)&&n!==e.ANY_EVENT)throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");if(\"function\"!=typeof r)throw new TypeError(\"The callback must be a function.\");const s=new t(n,this,r,i);return this.eventMap[n]||(this.eventMap[n]=[]),i.prepend?this.eventMap[n].unshift(s):this.eventMap[n].push(s),s}addOneTimeListener(e,t,n={}){n.remaining=1,this.addListener(e,t,n)}static get ANY_EVENT(){return Symbol.for(\"Any event\")}hasListener(n,r){if(void 0===n)return!!(this.eventMap[e.ANY_EVENT]&&this.eventMap[e.ANY_EVENT].length>0)||Object.entries(this.eventMap).some(([,e])=>e.length>0);if(this.eventMap[n]&&this.eventMap[n].length>0){if(r instanceof t){return this.eventMap[n].filter(e=>e===r).length>0}if(\"function\"==typeof r){return this.eventMap[n].filter(e=>e.callback===r).length>0}return null==r}return!1}get eventNames(){return Object.keys(this.eventMap)}getListeners(e){return this.eventMap[e]||[]}suspendEvent(e){this.getListeners(e).forEach(e=>{e.suspended=!0})}unsuspendEvent(e){this.getListeners(e).forEach(e=>{e.suspended=!1})}getListenerCount(e){return this.getListeners(e).length}emit(t,...n){if(\"string\"!=typeof t&&!(t instanceof String))throw new TypeError(\"The 'event' parameter must be a string.\");if(this.eventsSuspended)return;let r=[],i=this.eventMap[e.ANY_EVENT]||[];return this.eventMap[t]&&(i=i.concat(this.eventMap[t])),i.forEach(e=>{if(e.suspended)return;let t=[...n];Array.isArray(e.arguments)&&(t=t.concat(e.arguments)),e.remaining>0&&(r.push(e.callback.apply(e.context,t)),e.count++),--e.remaining<1&&e.remove()}),r}removeListener(e,t,n={}){if(void 0===e)return void(this.eventMap={});if(!this.eventMap[e])return;let r=this.eventMap[e].filter(e=>t&&e.callback!==t||n.remaining&&n.remaining!==e.remaining||n.context&&n.context!==e.context);r.length?this.eventMap[e]=r:delete this.eventMap[e]}async waitFor(e,t={}){return t.duration=parseInt(t.duration),(isNaN(t.duration)||t.duration<=0)&&(t.duration=1/0),new Promise((n,r)=>{let i,s=this.addListener(e,()=>{clearTimeout(i),n()},{remaining:1});t.duration!==1/0&&(i=setTimeout(()=>{s.remove(),r(\"The duration expired before the event was emitted.\")},t.duration))})}get eventCount(){return Object.keys(this.eventMap).length}}class t{constructor(t,n,r,i={}){if(\"string\"!=typeof t&&!(t instanceof String)&&t!==e.ANY_EVENT)throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");if(!n)throw new ReferenceError(\"The 'target' parameter is mandatory.\");if(\"function\"!=typeof r)throw new TypeError(\"The 'callback' must be a function.\");void 0===i.arguments||Array.isArray(i.arguments)||(i.arguments=[i.arguments]),(i=Object.assign({context:n,remaining:1/0,arguments:void 0,duration:1/0},i)).duration!==1/0&&setTimeout(()=>this.remove(),i.duration),this.event=t,this.target=n,this.callback=r,this.context=i.context,this.remaining=parseInt(i.remaining)>=1?parseInt(i.remaining):1/0,this.count=0,this.arguments=i.arguments,this.suspended=!1}remove(){this.target.removeListener(this.event,this.callback,{context:this.context,remaining:this.remaining})}}export{e as EventEmitter,t as Listener};\n//# sourceMappingURL=djipevents.esm.min.js.map\n","import {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/**\n * The `Note` class represents a single musical note such as `\"D3\"`, `\"G#4\"`, `\"F-1\"`, `\"Gb7\"`, etc.\n *\n * `Note` objects can be played back on a single channel by calling\n * [OutputChannel.playNote()]{@link OutputChannel#playNote} or on multiple channels of the same\n * output by calling [Output.playNote()]{@link Output#playNote}.\n *\n * The note has attack and release velocities set at 0.5 by default. These can be changed by passing\n * in the appropriate option. It is also possible to set a system-wide default for attack and\n * release velocities by using the `WebMidi.defaults` property.\n *\n * The note may have a duration. If it does, playback will be automatically stopped when the\n * duration has elapsed by sending a **noteoff** event. By default, the duration is set to\n * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a\n * method such as [OutputChannel.stopNote()]{@link OutputChannel#stopNote},\n * [Output.stopNote()]{@link Output#stopNote} or similar.\n *\n * @param value {string|number} The value used to create the note. If an identifier string is used,\n * it must start with the note letter, optionally followed by an accidental and followed by the\n * octave number (`\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`, etc.). If a number is used, it must be an\n * integer between 0 and 127. In this case, middle C is considered to be C4 (note number 60).\n *\n * @param {Object} [options={}]\n *\n * @param {number} [options.duration=Infinity] The number of milliseconds before the note should be\n * explicitly stopped.\n *\n * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n * `attack` and `rawAttack` are specified, the latter has precedence.\n *\n * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n * `release` and `rawRelease` are specified, the latter has precedence.\n *\n * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n * `attack` and `rawAttack` are specified, the latter has precedence.\n *\n * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n * `release` and `rawRelease` are specified, the latter has precedence.\n *\n * @throws {Error} Invalid note identifier\n * @throws {RangeError} Invalid name value\n * @throws {RangeError} Invalid accidental value\n * @throws {RangeError} Invalid octave value\n * @throws {RangeError} Invalid duration value\n * @throws {RangeError} Invalid attack value\n * @throws {RangeError} Invalid release value\n *\n * @since 3.0.0\n */\nexport class Note {\n\n  constructor(value, options = {}) {\n\n    // Assign property defaults\n    this.duration = WebMidi.defaults.note.duration;\n    this.attack = WebMidi.defaults.note.attack;\n    this.release = WebMidi.defaults.note.release;\n\n    // Assign property values from options (validation occurs in setter)\n    if (options.duration != undefined) this.duration = options.duration;\n    if (options.attack != undefined) this.attack = options.attack;\n    if (options.rawAttack != undefined) this.attack = Utilities.toNormalized(options.rawAttack);\n    if (options.release != undefined) this.release = options.release;\n    if (options.rawRelease != undefined) this.release = Utilities.toNormalized(options.rawRelease);\n\n    // Assign note depending on the way it was specified (name or number)\n    if (Number.isInteger(value)) {\n      this.identifier = Utilities.toNoteIdentifier(value);\n    } else {\n      this.identifier = value;\n    }\n\n  }\n\n  /**\n   * The name, optional accidental and octave of the note, as a string.\n   * @type {string}\n   * @since 3.0.0\n   */\n  get identifier() {\n    return this._name + (this._accidental || \"\") + this._octave;\n  }\n  set identifier(value) {\n\n    const fragments = Utilities.getNoteDetails(value);\n\n    if (WebMidi.validation) {\n      if (!value) throw new Error(\"Invalid note identifier\");\n    }\n\n    this._name = fragments.name;\n    this._accidental = fragments.accidental;\n    this._octave = fragments.octave;\n\n  }\n\n  /**\n   * The name (letter) of the note\n   * @type {string}\n   * @since 3.0.0\n   */\n  get name() {\n    return this._name;\n  }\n  set name(value) {\n\n    if (WebMidi.validation) {\n      value = value.toUpperCase();\n      if (![\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"].includes(value)) {\n        throw new Error(\"Invalid name value\");\n      }\n    }\n\n    this._name = value;\n\n  }\n\n  /**\n   * The accidental (#, ##, b or bb) of the note\n   * @type {string}\n   * @since 3.0.0\n   */\n  get accidental() {\n    return this._accidental;\n  }\n  set accidental(value) {\n\n    if (WebMidi.validation) {\n      value = value.toLowerCase();\n      if (![\"#\", \"##\", \"b\", \"bb\"].includes(value)) throw new Error(\"Invalid accidental value\");\n    }\n\n    this._accidental = value;\n\n  }\n\n  /**\n   * The octave of the note\n   * @type {number}\n   * @since 3.0.0\n   */\n  get octave() {\n    return this._octave;\n  }\n  set octave(value) {\n\n    if (WebMidi.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new Error(\"Invalid octave value\");\n    }\n\n    this._octave = value;\n\n  }\n\n  /**\n   * The duration of the note as a positive decimal number representing the number of milliseconds\n   * that the note should play for.\n   *\n   * @type {number}\n   * @since 3.0.0\n   */\n  get duration() {\n    return this._duration;\n  }\n  set duration(value) {\n\n    if (WebMidi.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || value === null || value < 0) {\n        throw new RangeError(\"Invalid duration value.\");\n      }\n    }\n\n    this._duration = value;\n\n  }\n\n  /**\n   * The attack velocity of the note as an integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get attack() {\n    return this._attack;\n  }\n  set attack(value) {\n    if (WebMidi.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || !(value >= 0 && value <= 1)) {\n        throw new RangeError(\"Invalid attack value.\");\n      }\n    }\n\n    this._attack = value;\n\n  }\n\n  /**\n   * The release velocity of the note as an integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get release() {\n    return this._release;\n  }\n  set release(value) {\n\n    if (WebMidi.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || !(value >= 0 && value <= 1)) {\n        throw new RangeError(\"Invalid release value.\");\n      }\n    }\n\n    this._release = value;\n\n  }\n\n  /**\n   * The attack velocity of the note as a positive integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get rawAttack() {\n    return Utilities.to7Bit(this._attack);\n  }\n\n  /**\n   * The release velocity of the note as a positive integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get rawRelease() {\n    return Utilities.to7Bit(this._release);\n  }\n\n  /**\n   * The MIDI number of the note. This number is derived from the note identifier using C4 as a\n   * reference for middle C.\n   *\n   * @type {number}\n   * @since 3.0.0\n   */\n  get number() {\n    return Utilities.toNoteNumber(this.identifier);\n  }\n\n  /**\n   * Returns a MIDI note number offset by the integer specified in the parameter. If the calculated\n   * value is less than 0, 0 will be returned. If the calculated value is more than 127, 127 will be\n   * returned. If an invalid value is supplied, 0 will be used.\n   *\n   * @param offset\n   * @returns {number} An integer between 0 and 127\n   */\n  getOffsetNumber(octaveOffset = 0, semitoneOffset = 0) {\n\n    if (WebMidi.validation) {\n      octaveOffset = parseInt(octaveOffset) || 0;\n      semitoneOffset = parseInt(semitoneOffset) || 0;\n    }\n\n    return Math.min(Math.max(this.number + (octaveOffset * 12) + semitoneOffset, 0), 127);\n\n  }\n\n}\n","import {Note} from \"./Note.js\";\nimport {WebMidi} from \"./WebMidi.js\";\n\n/**\n * The `Utilities` class contains general-purpose utility functions. The class is a singleton with\n * static methode and is not meant to be instantiated.\n *\n * @since 3.0.0\n */\nclass Utilities {\n\n  /**\n   * Returns a MIDI note number matching the identifier passed in the form of a string. The\n   * identifier must include the octave number. The identifier also optionally include a sharp (#),\n   * a double sharp (##), a flat (b) or a double flat (bb) symbol. For example, these are all valid\n   * identifiers: C5, G4, D#-1, F0, Gb7, Eb-1, Abb4, B##6, etc.\n   *\n   * When converting note identifiers to numbers, C4 is considered to be middle C (MIDI note number\n   * 60) as per the scientific pitch notation standard.\n   *\n   * The resulting note number can be offset by using the `octaveOffset` parameter.\n   *\n   * @param identifier {string} The identifier in the form of a letter, followed by an optional \"#\",\n   * \"##\", \"b\" or \"bb\" followed by the octave number. For exemple: C5, G4, D#-1, F0, Gb7, Eb-1,\n   * Abb4, B##6, etc.\n   *\n   * @param {number} [octaveOffset=0] A integer to offset the octave by.\n   *\n   * @returns {number} The MIDI note number (an integer between 0 and 127).\n   *\n   * @throws RangeError Invalid 'octaveOffset' value\n   *\n   * @throws TypeError Invalid note identifier\n   *\n   * @since 3.0.0\n   */\n  toNoteNumber(identifier, octaveOffset = 0) {\n\n    // Validation\n    octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n    if (isNaN(octaveOffset)) throw new RangeError(\"Invalid 'octaveOffset' value\");\n    if (typeof identifier !== \"string\") identifier = \"\";\n\n    const fragments = this.getNoteDetails(identifier);\n    if (!fragments) throw new TypeError(\"Invalid note identifier\");\n\n    const notes = { C: 0, D: 2, E: 4, F: 5, G: 7, A: 9, B: 11 };\n    let result = (fragments.octave + 1 + octaveOffset) * 12;\n    result += notes[fragments.name];\n\n    if (fragments.accidental) {\n      if (fragments.accidental.startsWith(\"b\")) {\n        result -= fragments.accidental.length;\n      } else {\n        result += fragments.accidental.length;\n      }\n    }\n\n    if (result < 0 || result > 127) throw new RangeError(\"Invalid octaveOffset value\");\n\n    return result;\n\n  }\n\n  /**\n   * Given a proper note identifier (\"C#4\", \"Gb-1\", etc.) or a valid MIDI note number (9-127), this\n   * method returns an object containing broken down details about the specified note (uppercase\n   * letter, accidental and octave).\n   *\n   * When a number is specified, the translation to note is done using a value of 60 for middle C\n   * (C4 = middle C).\n   *\n   * @param value {string|number} A note identifier A  atring (\"C#4\", \"Gb-1\", etc.) or a MIDI note\n   * number (0-127).\n   *\n   * @returns {{octave: number, letter: string, accidental: string}}\n   *\n   * @throws TypeError Invalid note identifier\n   *\n   * @since 3.0.0\n   */\n  getNoteDetails(value) {\n\n    if (Number.isInteger(value)) value = this.toNoteIdentifier(value);\n\n    const matches = value.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\\d+)$/i);\n    if (!matches) throw new TypeError(\"Invalid note identifier\");\n\n    const name = matches[1].toUpperCase();\n    const octave = parseInt(matches[3]);\n    let accidental = matches[2].toLowerCase();\n    accidental = accidental === \"\" ? undefined : accidental;\n\n    const fragments = {\n      name: name,\n      accidental: accidental,\n      octave: octave,\n      identifier: name + (accidental || \"\") + octave\n    };\n\n    return fragments;\n\n  }\n\n  /**\n   * Returns a sanitized array of valid MIDI channel numbers (1-16). The parameter should be a\n   * single integer or an array of integers.\n   *\n   * For backwards-compatibility, passing `undefined` as a parameter to this method results in all\n   * channels being returned (1-16). Otherwise, parameters that cannot successfully be parsed to\n   * integers between 1 and 16 are silently ignored.\n   *\n   * @param [channel] {number|number[]} An integer or an array of integers to parse as channel\n   * numbers.\n   *\n   * @returns {Array} An array of 0 or more valid MIDI channel numbers.\n   *\n   * @since 3.0.0\n   */\n  sanitizeChannels(channel) {\n\n    let channels;\n\n    if (this.validation) {\n\n      if (channel === \"all\") { // backwards-compatibility\n        channels = [\"all\"];\n      } else if (channel === \"none\") { // backwards-compatibility\n        return [];\n      }\n\n    }\n\n    if (!Array.isArray(channel)) {\n      channels = [channel];\n    } else {\n      channels = channel;\n    }\n\n    // In order to preserve backwards-compatibility, we let this assignment as it is.\n    if (channels.indexOf(\"all\") > -1) {\n      channels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    }\n\n    return channels\n      .map(function(ch) {\n        return parseInt(ch);\n      })\n      .filter(function(ch) {\n        return (ch >= 1 && ch <= 16);\n      });\n\n  }\n\n  /**\n   * Returns a valid timestamp, relative to the navigation start of the document, derived from the\n   * `time` parameter. If the parameter is a string starting with the \"+\" sign and followed by a\n   * number, the resulting timestamp will be the sum of the current timestamp plus that number. If\n   * the parameter is a positive number, it will be returned as is. Otherwise, false will be\n   * returned.\n   *\n   * @param [time] {number|string} The time string (e.g. `\"+2000\"`) or number to parse\n   * @return {number|false} A positive number or `false` (if the time cannot be converted)\n   *\n   * @since 3.0.0\n   */\n  toTimestamp(time) {\n\n    let value = false;\n\n    const parsed = parseFloat(time);\n    if (isNaN(parsed)) return false;\n\n    if (typeof time === \"string\" && time.substring(0, 1) === \"+\") {\n      if (parsed >= 0) value = WebMidi.time + parsed;\n    } else {\n      if (parsed >= 0) value = parsed;\n    }\n\n    return value;\n\n  }\n\n  /**\n   * Returns a valid MIDI note number (0-127) given the specified input. The input usually is a\n   * string containing a note identifier (`\"C3\"`, `\"F#4\"`, `\"D-2\"`, `\"G8\"`, etc.). If an integer\n   * between 0 and 127 is passed, it will simply be returned as is (for convenience). Other strings\n   * will be parsed for integer value, if possible.\n   *\n   * If the input is an identifier, the resulting note number is offset by the `octaveOffset`\n   * parameter. For example, if you pass in \"C4\" (note number 60) and the `octaveOffset` value is\n   * -2, the resulting MIDI note number will be 36.\n   *\n   * @param input {string|number} A string or number to extract the MIDI note number from.\n   *\n   * @returns {number|false} A valid MIDI note number (0-127) or `false` if the input could not\n   * successfully be parsed to a note number.\n   *\n   * @since 3.0.0\n   */\n  guessNoteNumber(input, octaveOffset) {\n\n    // Validate and, if necessary, assign default\n    octaveOffset = parseInt(octaveOffset) || 0;\n\n    let output = false;\n\n    // Check input type\n    if (Number.isInteger(input) && input >= 0 && input <= 127) {        // uint\n      output = parseInt(input);\n    } else if (parseInt(input) >= 0 && parseInt(input) <= 127) {        // float or uint as string\n      output = parseInt(input);\n    } else if (typeof input === \"string\" || input instanceof String) {  // string\n      try {\n        output = this.toNoteNumber(input.trim(), octaveOffset);\n      } catch (e) {\n        return false;\n      }\n    }\n\n    return output;\n\n  }\n\n  /**\n   * Returns an identifier string representing a note name (with optional accidental) followed by an\n   * octave number. The octave can be offset by using the `octaveOffset` parameter.\n   *\n   * @param {number} The MIDI note number to convert to a note identifier\n   * @param {octaveOffset} An offset to apply to the resulting octave\n   *\n   * @returns {string}\n   *\n   * @throws RangeError Invalid note number\n   * @throws RangeError Invalid octaveOffset value\n   *\n   * @since 3.0.0\n   */\n  toNoteIdentifier(number, octaveOffset) {\n\n    number = parseInt(number);\n    if (isNaN(number) || number < 0 || number > 127) throw new RangeError(\"Invalid note number\");\n\n    octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n    if (isNaN(octaveOffset)) throw new RangeError(\"Invalid octaveOffset value\");\n\n    const octave = Math.floor(number / 12 - 1) + octaveOffset;\n    return WebMidi.NOTES[number % 12] + octave.toString();\n\n  }\n\n  /**\n   * Converts the `input` parameter to a valid {@link Note} object. The input usually is an unsigned\n   * integer (0-127) or a note identifier (`\"C4\"`, `\"G#5\"`, etc.). If the input is a {@link Note}\n   * object, it will be returned as is.\n   *\n   * If the input is a note number or identifier, it is possible to specify options by providing the\n   * `options` parameter.\n   *\n   * @param [input] {number|string|Note}\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n   * be explicitly stopped.\n   *\n   * @param {number} [options.attack=64] The note's attack velocity as an integer between 0 and 127.\n   *\n   * @param {number} [options.release=64] The note's release velocity as an integer between 0 and\n   * 127.\n   *\n   * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n   * used when the input value is a note identifier.**\n   *\n   * @returns {Note}\n   *\n   * @throws TypeError The input could not be parsed to a note\n   *\n   * @since version 3.0.0\n   */\n  buildNote(input, options= {}) {\n\n    options.octaveOffset = parseInt(options.octaveOffset) || 0;\n\n    // If it's already a Note, we're done\n    if (input instanceof Note) return input;\n\n    let number = this.guessNoteNumber(input, options.octaveOffset);\n\n    if (number === false) { // We use a comparison b/c the note can be 0 (which equates to false)\n      throw new TypeError(`The input could not be parsed as a note (${input})`);\n    }\n\n    // If we got here, we have a proper note number. Before creating the new note, we strip out\n    // 'octaveOffset' because it has already been factored in when calling guessNoteNumber().\n    options.octaveOffset = undefined;\n    return new Note(number, options);\n\n  }\n\n  /**\n   * Converts an input value, which can be an unsigned integer (0-127), a note identifier, a\n   * {@link Note} object or an array of the previous types, to an array of {@link Note} objects.\n   *\n   * {@link Note} objects are returned as is. For note numbers and identifiers, a {@link Note}\n   * object is created with the options specified. An error will be thrown when encountering invalid\n   * input.\n   *\n   * @param [notes] {number|string|Note|number[]|string[]|Note[]}\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n   * be explicitly stopped.\n   *\n   * @param {number} [options.attack=0.5] The note's attack velocity as a decimal number between 0\n   * and 1.\n   *\n   * @param {number} [options.release=0.5] The note's release velocity as a decimal number between 0\n   * and 1.\n   *\n   * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n   * 127.\n   *\n   * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n   * 127.\n   *\n   * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n   * used when the input value is a note identifier.**\n   *\n   * @returns {Note[]}\n   *\n   * @throws TypeError An element could not be parsed as a note.\n   *\n   * @since 3.0.0\n   */\n  buildNoteArray(notes, options = {}) {\n\n    let result = [];\n    if (!Array.isArray(notes)) notes = [notes];\n\n    notes.forEach(note => {\n      result.push(this.buildNote(note, options));\n    });\n\n    return result;\n\n  }\n\n  /**\n   * Returns a number between 0 and 1 representing the ratio of the input value divided by 127 (7\n   * bit). The returned value is restricted between 0 and 1 even if the input is greater than 127 or\n   * smaller than 0.\n   *\n   * Passing `Infinity` will return `1` and passing `-Infinity` will return `0`. Otherwise, when the\n   * input value cannot be converted to an integer, the method returns 0.\n   *\n   * @param value A positive integer between 0 and 127 (inclusive)\n   * @returns {number} A number between 0 and 1 (inclusive)\n   */\n  toNormalized(value) {\n    if (value === Infinity) value = 127;\n    value = parseInt(value) || 0;\n    return Math.min(Math.max(value / 127, 0), 1);\n  }\n\n  /**\n   * Returns a number between 0 and 127 which is the result of multiplying the input value by 127.\n   * The input value should be number between 0 and 1 (inclusively). The returned value is\n   * restricted between 0 and 127 even if the input is greater than 1 or smaller than 0.\n   *\n   * Passing `Infinity` will return `127` and passing `-Infinity` will return `0`. Otherwise, when\n   * the input value cannot be converted to a number, the method returns 0.\n   *\n   * @param value A positive integer between 0 and 127 (inclusive)\n   * @returns {number} A number between 0 and 1 (inclusive)\n   */\n  to7Bit(value) {\n    if (value === Infinity) value = 1;\n    value = parseFloat(value) || 0;\n    return Math.min(Math.max(Math.round(value * 127), 0), 127);\n  }\n\n  /**\n   * Returns an object inside which the three bytes have been broken up into `command`, `data1` and\n   * `data2` properties.\n   *\n   * @param data A MIDI message\n   * @returns {{data2: (number|undefined), data1: (number|undefined), command: number}}\n   */\n  getMessage(data) {\n\n    return {\n      command: data[0] >> 4,\n      data1: data.length > 1 ? data[1] : undefined,\n      data2: data.length > 2 ? data[2] : undefined\n    };\n\n  }\n\n  /**\n   * Returns the supplied MIDI note number offset by the requested octave and semitone values. If\n   * the calculated value is less than 0, 0 will be returned. If the calculated value is more than\n   * 127, 127 will be returned. If an invalid offset value is supplied, 0 will be used.\n   *\n   * @param offset\n   * @returns {number} An integer between 0 and 127\n   *\n   * @throws {Error} Invalid note number\n   */\n  offsetNumber(number, octaveOffset = 0, semitoneOffset = 0) {\n\n    if (WebMidi.validation) {\n      number = parseInt(number);\n      if (isNaN(number)) throw new Error(\"Invalid note number\");\n      octaveOffset = parseInt(octaveOffset) || 0;\n      semitoneOffset = parseInt(semitoneOffset) || 0;\n    }\n\n    return Math.min(Math.max(number + (octaveOffset * 12) + semitoneOffset, 0), 127);\n\n  }\n\n  getKeyByValue(object, value) {\n    return Object.keys(object).find(key => object[key] === value);\n  }\n\n}\n\n// Export singleton instance of Utilities class. The 'constructor' is nulled so that it cannot be\n// used to instantiate a new Utilities object or extend it. However, it is not freezed so it remains\n// extensible (properties can be added at will).\nconst utils = new Utilities();\nutils.constructor = null;\nexport {utils as Utilities};\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\nimport {Note} from \"./Note.js\";\n\n/**\n * The `InputChannel` class represents a MIDI input channel (1-16) from a single input device. This\n * object is derived from the host's MIDI subsystem and cannot be instantiated directly.\n *\n * All 16 `InputChannel` objects can be found inside the input's [channels]{@link Input#channels}\n * property.\n *\n * The `InputChannel` class extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [addListener()](https://djipco.github.io/djipevents/EventEmitter.html#addListener),\n * [removeListener()](https://djipco.github.io/djipevents/EventEmitter.html#removeListener),\n * [hasListener()](https://djipco.github.io/djipevents/EventEmitter.html#hasListener) and several\n * others. Check out the\n * [documentation for EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) for more\n * details.\n *\n * @param {Input} input The `Input` object this channel belongs to\n * @param {number} number The MIDI channel's number (1-16)\n *\n * @fires InputChannel#midimessage\n *\n * @fires InputChannel#noteoff\n * @fires InputChannel#noteon\n * @fires InputChannel#keyaftertouch\n * @fires InputChannel#controlchange\n * @fires InputChannel#channelmode\n * @fires InputChannel#programchange\n * @fires InputChannel#channelaftertouch\n * @fires InputChannel#pitchbend\n *\n * @fires InputChannel#allnotesoff\n * @fires InputChannel#allsoundoff\n * @fires InputChannel#localcontrol\n * @fires InputChannel#monomode\n * @fires InputChannel#omnimode\n * @fires InputChannel#resetallcontrollers\n *\n * @since 3.0.0\n */\nexport class InputChannel extends EventEmitter {\n\n  constructor(input, number) {\n\n    super();\n\n    /**\n     * @type {Input}\n     * @private\n     */\n    this._input = input;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._number = number;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    // /**\n    //  * An array of the current NRPNs being constructed for this channel\n    //  *\n    //  * @private\n    //  *\n    //  * @type {string[]}\n    //  */\n    // this._nrpnBuffer = [];\n    //\n    // // Enable NRPN events by default\n    // this.nrpnEventsEnabled = true;\n\n  }\n\n  /**\n   * Destroys the `Input` by removing all listeners and severing the link with the MIDI subsystem's\n   * input.\n   */\n  destroy() {\n    this._input = null;\n    this._number = null;\n    this._octaveOffset = 0;\n    // this._nrpnBuffer = null;\n    // this._nrpnEventsEnabled = false;\n    this.removeListener();\n  }\n\n  /**\n   * @param e MIDIMessageEvent\n   * @private\n   */\n  _processMidiMessageEvent(e) {\n\n    // Create and emit a new 'midimessage' event based on the incoming one\n    const event = Object.assign({}, e);\n    event.target = this;\n    event.type = \"midimessage\";\n\n    /**\n     * Event emitted when a MIDI message of any kind is received by an `InputChannel`\n     *\n     * @event InputChannel#midimessage\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `InputChannel` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"midimessage\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     * @property {number} event.statusByte The message's status byte  (deprecated, use the `message`\n     * object instead).\n     * @property {?number[]} event.dataBytes The message's data bytes as an array of 0, 1 or 2\n     * integers. This will be null for `sysex` messages (deprecated, use the `message` object\n     * instead).\n     */\n    this.emit(event.type, event);\n\n    // Parse the inbound event for regular messages\n    this._parseEventForStandardMessages(event);\n\n    // Parse the event to see if its part of an NRPN sequence\n    // this._parseEventForNrpnMessage(e);\n\n  }\n\n  /**\n   * Parses incoming channel events and emit standard MIDI message events (noteon, noteoff, etc.)\n   * @param e Event\n   * @private\n   */\n  _parseEventForStandardMessages(e) {\n\n    const event = Object.assign({}, e);\n    event.type = event.message.type || \"unknownmidimessage\";\n\n    const data1 = e.message.dataBytes[0];\n    const data2 = e.message.dataBytes[1];\n\n    console.log(event.message);\n\n    if ( event.type === \"noteoff\" || (event.type === \"noteon\" && data2 === 0) ) {\n\n      /**\n       * Event emitted when a **note off** MIDI message has been received on the channel.\n       *\n       * @event InputChannel#noteoff\n       *\n       * @type {Object}\n       * @property {string} type `\"noteoff\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {Object} note A {@link Note} object containing information such as note name,\n       * octave and release velocity.\n       * @property {number} value The release velocity amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The release velocity amount expressed as an integer (between 0\n       * and 127).\n       */\n\n      // The object created when a noteoff event arrives is a Note with an attack velocity of 0.\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + WebMidi.octaveOffset\n        ),\n        {\n          rawAttack: 0,\n          rawRelease: data2,\n        }\n      );\n\n      event.value = Utilities.toNormalized(data2);\n      event.rawValue = data2;\n\n      // Those are kept for backwards-compatibility but are gone from the documentation. They will\n      // be removed in future versions (@deprecated).\n      event.velocity = event.note.release;\n      event.rawVelocity = event.note.rawRelease;\n\n    } else if (event.type === \"noteon\") {\n\n      /**\n       * Event emitted when a **note on** MIDI message has been received.\n       *\n       * @event InputChannel#noteon\n       *\n       * @type {Object}\n       * @property {string} type `\"noteon\"`\n       *\n       * @property {InputChannel} channel The `InputChannel` object that triggered the event.\n       * @property {Array} event.data The MIDI message as an array of 8 bit values.\n       * @property {InputChannel} input The `Input` object where through which the message was\n       * received.\n       * @property {Uint8Array} event.rawData The raw MIDI message as a `Uint8Array`.\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {Object} note A {@link Note} object containing information such as note name,\n       * octave and attack velocity.\n       *\n       * @property {number} value The attack velocity amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The attack velocity amount expressed as an integer (between 0\n       * and 127).\n       */\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + WebMidi.octaveOffset\n        ),\n        { rawAttack: data2 }\n      );\n\n      event.value = Utilities.toNormalized(data2);\n      event.rawValue = data2;\n\n      // Those are kept for backwards-compatibility but are gone from the documentation. They will\n      // be removed in future versions (@deprecated).\n      event.velocity = event.note.attack;\n      event.rawVelocity = event.note.rawAttack;\n\n    } else if (event.type === \"keyaftertouch\") {\n\n      /**\n       * Event emitted when a **key-specific aftertouch** MIDI message has been received.\n       *\n       * @event InputChannel#keyaftertouch\n       *\n       * @type {Object}\n       * @property {string} type `\"keyaftertouch\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {string} identifier The note identifier of the key to apply the aftertouch to.\n       * This includes any octave offset applied at the channel, input or global level.\n       * @property {number} key The MIDI note number of the key to apply the aftertouch to. This\n       * includes any octave offset applied at the channel, input or global level.\n       * @property {number} rawKey The MIDI note number of the key to apply the aftertouch to. This\n       * excludes any octave offset defined at the channel, input or global level.\n       * @property {number} value The aftertouch amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The aftertouch amount expressed as an integer (between 0 and\n       * 127).\n       */\n      event.identifier = Utilities.toNoteIdentifier(\n        data1, WebMidi.octaveOffset + this.input.octaveOffset + this.octaveOffset\n      );\n\n      event.key = Utilities.toNoteNumber(event.identifier);\n      event.rawKey = data1;\n\n      event.value = Utilities.toNormalized(data2);\n      event.rawValue = data2;\n\n      // This is kept for backwards-compatibility but is gone from the documentation. It will be\n      // removed from future versions (@deprecated).\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + WebMidi.octaveOffset\n        )\n      );\n\n    } else if (event.type === \"controlchange\" && !event.message.channelModeMessage) {\n\n      /**\n       * Event emitted when a **control change** MIDI message has been received.\n       *\n       * @event InputChannel#controlchange\n       *\n       * @type {Object}\n       * @property {string} type `\"controlchange\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {Object} controller\n       * @property {Object} controller.number The number of the controller.\n       * @property {Object} controller.name The usual name or function of the controller.\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      event.controller = {\n        number: data1,\n        name: this.getCcNameByNumber(data1)\n      };\n\n      event.value = Utilities.toNormalized(data2);\n      event.rawValue = data2;\n\n    } else if (event.message.channelModeMessage) {\n\n      /**\n       * Event emitted when any **channel mode** MIDI message has been received.\n       *\n       * @event InputChannel#channelmode\n       *\n       * @type {Object}\n       * @property {string} type `\"channelmode\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {Object} controller\n       * @property {Object} controller.number The number of the controller.\n       * @property {Object} controller.name The usual name or function of the controller.\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      event.controller = {\n        number: data1,\n        name: this.getChannelModeByNumber(data1)\n      };\n\n      // Channel mode messages are 'control change\" messages, so we need to change the type before\n      // sending it out.\n      event.type = \"channelmode\";\n      event.value = Utilities.toNormalized(data2);\n      event.rawValue = data2;\n\n      // Also dispatch specific channel mode events\n      this._parseChannelModeMessage(event);\n\n    } else if (event.type === \"programchange\") {\n\n      /**\n       * Event emitted when a **program change** MIDI message has been received.\n       *\n       * @event InputChannel#programchange\n       *\n       * @type {Object}\n       * @property {string} type `\"programchange\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as an integer between 1 and 128.\n       * @property {number} rawValue The value expressed as an integer between 0 and 127..\n       */\n      event.value = data1 + 1;\n      event.rawValue = data1;\n\n    } else if (event.type === \"channelaftertouch\") {\n\n      /**\n       * Event emitted when a control change MIDI message has been received.\n       *\n       * @event InputChannel#channelaftertouch\n       *\n       * @type {Object}\n       * @property {string} type `\"channelaftertouch\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      event.value = Utilities.toNormalized(data1);\n      event.rawValue = data1;\n\n    } else if (event.type === \"pitchbend\") {\n\n      /**\n       * Event emitted when a pitch bend MIDI message has been received.\n       *\n       * @event InputChannel#pitchbend\n       *\n       * @type {Object}\n       * @property {string} type `\"pitchbend\"`\n       *\n       * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n       * object).\n       * @property {Message} message A `Message` object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 16383).\n       */\n      event.value = ((data2 << 7) + data1 - 8192) / 8192;\n      event.rawValue = (data2 << 7) + data1;\n\n    } else {\n      event.type = \"unknownmessage\";\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Returns the channel mode name matching the specified number. If no match is found, the function\n   * returns `false`.\n   *\n   * @param {number} number An integer representing the channel mode message.\n   * @returns {string|false} The name of the matching channel mode or `false` if not match could be\n   * found.\n   *\n   * @since 2.0.0\n   */\n  getChannelModeByNumber(number) {\n\n    if (WebMidi.validation) {\n      number = Math.floor(number);\n    }\n\n    if ( !(number >= 120 && number <= 127) ) return false;\n\n    for (let cm in WebMidi.MIDI_CHANNEL_MODE_MESSAGES) {\n\n      if (\n        WebMidi.MIDI_CHANNEL_MODE_MESSAGES.hasOwnProperty(cm) &&\n        number === WebMidi.MIDI_CHANNEL_MODE_MESSAGES[cm]\n      ) {\n        return cm;\n      }\n\n    }\n\n    return false;\n\n  }\n\n  _parseChannelModeMessage(e) {\n\n    // Make a shallow copy of the incoming event so we can use it as the new event.\n    const event = Object.assign({}, e);\n    event.type = event.message.type;\n\n    /**\n     * Event emitted when an \"all sound off\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#allsoundoff\n     *\n     * @type {Object}\n     * @property {string} type `\"allsoundoff\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when a \"reset all controllers\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#resetallcontrollers\n     *\n     * @type {Object}\n     * @property {string} type `\"resetallcontrollers\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when a \"local control\" channel-mode MIDI message has been received. The value\n     * property of the event is set to either `true` (local control on) of `false` (local control\n     * off).\n     *\n     * @event InputChannel#localcontrol\n     *\n     * @type {Object}\n     * @property {string} type `\"localcontrol\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value For local control on, the value is `true`. For local control off,\n     * the value is `false`.\n     */\n    if (event.type === \"localcontrol\") {\n      event.value = event.message.data[2] === 127 ? true : false;\n    }\n\n    /**\n     * Event emitted when an \"all notes off\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#allnotesoff\n     *\n     * @type {Object}\n     * @property {string} type `\"allnotesoff\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when an \"omni mode\" channel-mode MIDI message has been received. The value\n     * property of the event is set to either `true` (omni mode on) of `false` (omni mode off).\n     *\n     * @event InputChannel#omnimode\n     *\n     * @type {Object}\n     * @property {string} type `\"omnimode\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n     */\n    if (event.type === \"omnimodeon\") {\n      event.type = \"omnimode\";\n      event.value = true;\n    } else if (event.type === \"omnimodeoff\") {\n      event.type = \"omnimode\";\n      event.value = false;\n    }\n\n    /**\n     * Event emitted when a \"mono/poly mode\" MIDI message has been received. The value property of\n     * the event is set to either `true` (mono mode on / poly mode off) or `false` (mono mode off /\n     * poly mode on).\n     *\n     * @event InputChannel#monomode\n     *\n     * @type {Object}\n     * @property {string} type `\"monomode\"`\n     *\n     * @property {InputChannel} target The object that triggered the event (the `InputChannel`\n     * object).\n     * @property {Message} message A `Message` object containing information about the incoming\n     * MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n     */\n    if (event.type === \"monomodeon\") {\n      event.type = \"monomode\";\n      event.value = true;\n    } else if (event.type === \"polymodeon\") {\n      event.type = \"monomode\";\n      event.value = false;\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  // /**\n  //  * Parses channel events and constructs NRPN message parts in valid sequences.\n  //  * Keeps a separate NRPN buffer for each channel.\n  //  * Emits an event after it receives the final CC parts msb 127 lsb 127.\n  //  * If a message is incomplete and other messages are received before\n  //  * the final 127 bytes, the incomplete message is cleared.\n  //  * @param e Event\n  //  * @private\n  //  *\n  //  *\n  //  * Uint8Array [ 176, 99, 12 ]\n  //  * Uint8Array [ 176, 98, 34 ]\n  //  * Uint8Array [ 176, 6, 56 ]\n  //  * Uint8Array [ 176, 38, 78 ]\n  //  * Uint8Array [ 176, 101, 127 ]\n  //  * Uint8Array [ 176, 100, 127 ]\n  //  */\n  // _parseEventForNrpnMessage(e) {\n  //\n  //   if (!this.nrpnEventsEnabled) return;\n  //\n  //   // Extract basic data\n  //   let command = e.data[0] >> 4;\n  //   let channel = (e.data[0] & 0xf) + 1;\n  //   let data1;\n  //   let data2;\n  //\n  //   if (e.data.length > 1) {\n  //     data1 = e.data[1];\n  //     data2 = e.data.length > 2 ? e.data[2] : undefined;\n  //   }\n  //\n  //   // Message not valid for NRPN\n  //   if (\n  //     !(\n  //       command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.controlchange &&\n  //       (\n  //         (\n  //           data1 >= WebMidi.MIDI_NRPN_MESSAGES.increment &&\n  //           data1 <= WebMidi.MIDI_NRPN_MESSAGES.parammsb\n  //         ) ||\n  //         data1 === WebMidi.MIDI_NRPN_MESSAGES.entrymsb ||\n  //         data1 === WebMidi.MIDI_NRPN_MESSAGES.entrylsb\n  //       )\n  //     )\n  //   ) {\n  //     return;\n  //   }\n  //\n  //   // set up a CC event to parse as NRPN part\n  //   let ccEvent = {\n  //     target: this,\n  //     type: \"controlchange\",\n  //     data: Array.from(e.data),\n  //     rawData: e.data,\n  //     timestamp: e.timeStamp,\n  //     channel: channel,\n  //     controller: {\n  //       number: data1,\n  //       name: this.getCcNameByNumber(data1)\n  //     },\n  //     value: data2\n  //   };\n  //\n  //   if (\n  //     // if we get a starting MSB (CC99 - 0-126) vs an end MSB (CC99 - 127), destroy incomplete\n  //     // NRPN and begin building again\n  //     ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.parammsb &&\n  //     ccEvent.value != WebMidi.MIDI_NRPN_MESSAGES.nullactiveparameter\n  //   ) {\n  //     this._nrpnBuffer = [];\n  //     this._nrpnBuffer[0] = ccEvent;\n  //   } else if(\n  //     // add the param LSB\n  //     this._nrpnBuffer.length === 1 &&\n  //     ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.paramlsb\n  //   ) {\n  //     this._nrpnBuffer.push(ccEvent);\n  //\n  //   } else if(\n  //     // add data inc/dec or value MSB for 14bit\n  //     this._nrpnBuffer.length === 2 &&\n  //     (ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.increment ||\n  //       ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.decrement ||\n  //       ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.entrymsb)\n  //   ) {\n  //     this._nrpnBuffer.push(ccEvent);\n  //   } else if(\n  //     // if we have a value MSB, only add an LSB to pair with that\n  //     this._nrpnBuffer.length === 3 &&\n  //     this._nrpnBuffer[2].number === WebMidi.MIDI_NRPN_MESSAGES.entrymsb &&\n  //     ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.entrylsb\n  //   ) {\n  //     this._nrpnBuffer.push(ccEvent);\n  //\n  //   } else if(\n  //     // add an end MSB (CC99 - 127)\n  //     this._nrpnBuffer.length >= 3 &&\n  //     this._nrpnBuffer.length <= 4 &&\n  //     ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.parammsb &&\n  //     ccEvent.value === WebMidi.MIDI_NRPN_MESSAGES.nullactiveparameter\n  //   ) {\n  //     this._nrpnBuffer.push(ccEvent);\n  //   } else if(\n  //     // add an end LSB (CC99 - 127)\n  //     this._nrpnBuffer.length >= 4 &&\n  //     this._nrpnBuffer.length <= 5 &&\n  //     ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.paramlsb &&\n  //     ccEvent.value === WebMidi.MIDI_NRPN_MESSAGES.nullactiveparameter\n  //   ) {\n  //     this._nrpnBuffer.push(ccEvent);\n  //     // now we have a full inc or dec NRPN message, lets create that event!\n  //\n  //     let rawData = [];\n  //\n  //     this._nrpnBuffer.forEach(ev => rawData.push(ev.data));\n  //\n  //     let nrpnNumber = (this._nrpnBuffer[0].value<<7) | (this._nrpnBuffer[1].value);\n  //     let nrpnValue = this._nrpnBuffer[2].value;\n  //     if (this._nrpnBuffer.length === 6) {\n  //       nrpnValue = (this._nrpnBuffer[2].value<<7) | (this._nrpnBuffer[3].value);\n  //     }\n  //\n  //     let nrpnControllerType = \"\";\n  //\n  //     switch (this._nrpnBuffer[2].controller.number) {\n  //     case WebMidi.MIDI_NRPN_MESSAGES.entrymsb:\n  //       nrpnControllerType = InputChannel.NRPN_TYPES[0];\n  //       break;\n  //     case WebMidi.MIDI_NRPN_MESSAGES.increment:\n  //       nrpnControllerType = InputChannel.NRPN_TYPES[1];\n  //       break;\n  //     case WebMidi.MIDI_NRPN_MESSAGES.decrement:\n  //       nrpnControllerType = InputChannel.NRPN_TYPES[2];\n  //       break;\n  //     default:\n  //       throw new Error(\"The NPRN type was unidentifiable.\");\n  //     }\n  //\n  //     // now we are done building an NRPN, so clear the NRPN buffer\n  //     this._nrpnBuffer = [];\n  //\n  //     /**\n  //      * Event emitted when a valid NRPN message sequence has been received.\n  //      *\n  //      * @event InputChannel#nrpn\n  //      * @type {Object}\n  //      * @property {InputChannel} target The `InputChannel` that triggered the event.\n  //      * @property {Array} event.data The MIDI message as an array of 8 bit values.\n  //      * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array.\n  //      * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n  //      * (in milliseconds since the navigation start of the document).\n  //      * @property {string} type `\"nrpn\"`\n  //      * @property {Object} controller\n  //      * @property {Object} controller.number The number of the NRPN.\n  //      * @property {Object} controller.name The usual name or function of the controller.\n  //      * @property {number} value The aftertouch amount expressed as a float between 0 and 1.\n  //      * @property {number} rawValue The aftertouch amount expressed as an integer (between 0 and\n  //      * 65535).\n  //      */\n  //     let nrpnEvent = {\n  //       timestamp: ccEvent.timestamp,\n  //       channel: ccEvent.channel,\n  //       type: \"nrpn\",\n  //       data: Array.from(rawData),\n  //       rawData: rawData,\n  //       controller: {\n  //         number: nrpnNumber,\n  //         type: nrpnControllerType,\n  //         name: \"Non-Registered Parameter \" + nrpnNumber\n  //       },\n  //       value: nrpnValue / 65535,\n  //       rawValue: nrpnValue\n  //     };\n  //\n  //     this.emit(nrpnEvent.type, nrpnEvent);\n  //\n  //   } else {\n  //     // something didn't match, clear the incomplete NRPN message buffer\n  //     this._nrpnBuffer = [];\n  //   }\n  // }\n\n  /**\n   * Returns the name of a control change message matching the specified number. Some valid control\n   * change numbers do not have a specific name or purpose assigned in the MIDI\n   * [spec](https://midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2).\n   * In this case, the method returns `false`.\n   *\n   * @param {number} number An integer representing the control change message\n   * @returns {string|undefined} The matching control change name or `undefined` if not match was\n   * found.\n   *\n   * @throws {RangeError} Invalid control change number.\n   *\n   * @since 2.0.0\n   */\n  getCcNameByNumber(number) {\n\n    if (WebMidi.validation) {\n      number = parseInt(number);\n      if ( !(number >= 0 && number <= 119) ) throw new RangeError(\"Invalid control change number.\");\n    }\n\n    for (let cc in WebMidi.MIDI_CONTROL_CHANGE_MESSAGES) {\n\n      if (\n        WebMidi.MIDI_CONTROL_CHANGE_MESSAGES.hasOwnProperty(cc) &&\n        number === WebMidi.MIDI_CONTROL_CHANGE_MESSAGES[cc]\n      ) {\n        return cc;\n      }\n\n    }\n\n    return undefined;\n\n  }\n\n  /**\n   * An integer to offset the reported octave of incoming note-specific messages (`noteon`,\n   * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n   * octave (C4).\n   *\n   * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n   * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n   *\n   * Note that this value is combined with the global offset value defined on the `WebMidi` object\n   * and with the value defined on the parent `Input` object.\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * The {@link Input} this channel belongs to\n   * @type {Input}\n   * @since 3.0\n   */\n  get input() {\n    return this._input;\n  }\n\n  /**\n   * This channel's MIDI number (1-16)\n   * @type {number}\n   * @since 3.0\n   */\n  get number() {\n    return this._number;\n  }\n\n  // /**\n  //  * An `OutputChannel` object (or a list of `OutputChannel` objects) to send a copy of all\n  //  * inbound messages to. This is inspired by the THRU port on numerous MIDI devices.\n  //  *\n  //  * To stop forwarding messages, simply set `forwardTo` to `undefined` or `null`.\n  //  *\n  //  * If you want to forward messages from all channels of an input, you should instead use the\n  //  * input's [forwardTo]{@link Input#forwardTo} property.\n  //  *\n  //  * @type {OutputChannel|[OutputChannel]}\n  //  * @readonly\n  //  */\n  // get forwardTo() {\n  //   return this._forwardTo;\n  // }\n  // set forwardTo(value) {\n  //\n  //   // @todo THIS NEEDS TO BE COMPLETED!!!\n  //\n  //   if (value === undefined || value === null) {\n  //     this._forwardTo = undefined;\n  //     return;\n  //   }\n  //\n  //   if (!Array.isArray(value)) value = [value];\n  //\n  //   if (this.validation) {\n  //     value.forEach(v => {\n  //       // if (typeof v)\n  //       console.log(typeof v);\n  //     });\n  //   }\n  //\n  //   this._forwardTo = value;\n  //\n  // }\n\n  // /**\n  //  * Indicates whether events for **Non-Registered Parameter Number** should be dispatched. NRPNs\n  //  * are composed of a sequence of specific **control change** messages. When a valid sequence of\n  //  * such control change messages is received, an `nrpn` event will fire. If an invalid or out of\n  //  * order control change message is received, it will fall through the collector logic and all\n  //  * buffered control change messages will be discarded as incomplete.\n  //  *\n  //  * @type Boolean\n  //  */\n  // get nrpnEventsEnabled() {\n  //   return this._nrpnEventsEnabled;\n  // }\n  // set nrpnEventsEnabled(enabled) {\n  //   this._nrpnEventsEnabled = !!enabled;\n  // }\n\n  // /**\n  //  * Array of valid **non-registered parameter number** (NRPNs) types.\n  //  *\n  //  * @type {string[]}\n  //  * @readonly\n  //  */\n  // static get NRPN_TYPES() {\n  //   return [\"entry\", \"increment\", \"decrement\"];\n  // }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {Message, WebMidi} from \"./WebMidi.js\";\nimport {InputChannel} from \"./InputChannel.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/**\n * The `Input` class represents a single MIDI input port. This object is derived from the host's\n * MIDI subsystem and cannot be instantiated directly.\n *\n * You can find a list of all currently available `Input` objects in the {@link WebMidi#inputs}\n * array.\n *\n * The `Input` class extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [getListeners()](https://djipco.github.io/djipevents/EventEmitter.html#getListeners),\n * [emit()](https://djipco.github.io/djipevents/EventEmitter.html#emit),\n * [suspendEvent()](https://djipco.github.io/djipevents/EventEmitter.html#suspendEvent) and several\n * others.\n *\n * @param {MIDIInput} midiInput `MIDIInput` object as provided by the MIDI subsystem (Web MIDI API).\n *\n * @fires Input#opened\n * @fires Input#disconnected\n * @fires Input#closed\n * @fires Input#midimessage\n * @fires Input#sysex\n * @fires Input#timecode\n * @fires Input#songposition\n * @fires Input#songselect\n * @fires Input#tunerequest\n * @fires Input#clock\n * @fires Input#start\n * @fires Input#continue\n * @fires Input#stop\n * @fires Input#activesensing\n * @fires Input#reset\n * @fires Input#midimessage\n * @fires Input#unknownmidimessage\n */\nexport class Input extends EventEmitter {\n\n  constructor(midiInput) {\n\n    super();\n\n    /**\n     * Reference to the actual MIDIInput object\n     * @private\n     */\n    this._midiInput = midiInput;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * Array containing the 16 {@link InputChannel} objects available for this `Input`. The\n     * channels are numbered 1 through 16.\n     *\n     * @type {InputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new InputChannel(this, i);\n\n    // Setup listeners\n    this._midiInput.onstatechange = this._onStateChange.bind(this);\n    this._midiInput.onmidimessage = this._onMidiMessage.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Input` by remove all listeners, emptying the `channels` array and unlinking the\n   * MIDI subsystem.\n   *\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    this._midiInput.onstatechange = null;\n    this._midiInput.onmidimessage = null;\n    await this.close();\n    this._midiInput = null;\n  }\n\n  /**\n   * Executed when a `\"statechange\"` event occurs.\n   *\n   * @param e\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: WebMidi.time,\n      target: this\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the {@link Input} has been opened by calling the {@link Input#open}\n       * method.\n       *\n       * @event Input#opened\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"opened\"`\n       * @property {Input} target The object that triggered the event\n       */\n      event.type = \"opened\";\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the {@link Input} has been closed by calling the {@link Input#close}\n       * method.\n       *\n       * @event Input#closed\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"closed\"`\n       * @property {Input} target The object that triggered the event\n       */\n      event.type = \"closed\";\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the {@link Input} becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Input#disconnected\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"disconnected\"`\n       * @property {Object} target Object with properties describing the {@link Input} that\n       * triggered the event. This is not the actual `Input` as it is no longer available.\n       * @property {string} target.connection `\"closed\"`\n       * @property {string} target.id ID of the input\n       * @property {string} target.manufacturer Manufacturer of the device that provided the input\n       * @property {string} target.name Name of the device that provided the input\n       * @property {string} target.state `\"disconnected\"`\n       * @property {string} target.type `\"input\"`\n       */\n      event.type = \"disconnected\";\n      event.target = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") {\n      // I don't see the need to forward that...\n    } else {\n      console.warn(\"This statechange event was not caught: \", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Executed when a `\"midimessage\"` event is received\n   * @param e\n   * @private\n   */\n  _onMidiMessage(e) {\n\n    // Create Message object from MIDI data\n    const message = new Message(e.data);\n\n    /**\n     * Event emitted when any MIDI message is received on an `Input`\n     *\n     * @event Input#midimessage\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"midimessage\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array (deprecated, use\n     * the `message` object instead).\n     * @property {number} event.statusByte The message's status byte  (deprecated, use the `message`\n     * object instead).\n     * @property {?number[]} event.dataBytes The message's data bytes as an array of 0, 1 or 2\n     * integers. This will be null for `sysex` messages (deprecated, use the `message` object\n     * instead).\n     *\n     * @since 2.1\n     */\n    const event = {\n      target: this,\n      message: message,\n      timestamp: e.timeStamp,\n      type: \"midimessage\",\n\n      data: message.data,           // @deprecated (will be removed in v4)\n      rawData: message.data,        // @deprecated (will be removed in v4)\n      statusByte: message.data[0],  // @deprecated (will be removed in v4)\n      dataBytes: message.dataBytes  // @deprecated (will be removed in v4)\n    };\n\n    this.emit(\"midimessage\", event);\n\n    // Messages are forwarded to InputChannel if they are channel messages or parsed locally for\n    // system messages.\n    if (message.systemMessage) {                                              // system messages\n      this._parseEvent(event);\n    } else if (message.channelModeMessage || message.channelMessage) {   // channel messages\n      this.channels[message.channel]._processMidiMessageEvent(event);\n    }\n\n  }\n\n  /**\n   * @private\n   */\n  _parseEvent(e) {\n\n    // Make a shallow copy of the incoming event so we can use it as the new event.\n    const event = Object.assign({}, e);\n    event.type = event.message.type || \"unknownmidimessage\";\n\n    // Add custom property for 'songselect'\n    if (event.type === \"songselect\") {\n      event.song = e.data[1] + 1;\n    }\n\n    // Emit event\n    this.emit(event.type, event);\n\n    /**\n     * Input-wide (system) event emitted when a **system exclusive** message has been received.\n     * You should note that, to receive `sysex` events, you must call the `WebMidi.enable()`\n     * method with the `sysex` option set to `true`:\n     *\n     * ```js\n     * WebMidi.enable({sysex: true})\n     *  .then(() => console.log(\"WebMidi has been enabled with sysex support.\"))\n     *  .catch(err => console.log(\"WebMidi could not be enabled.\"))\n     * ```\n     *\n     * @event Input#sysex\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"sysex\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values.\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array.\n     */\n\n    /**\n     * Input-wide (system) event emitted when a **time code quarter frame** message has been\n     * received.\n     *\n     * @event Input#timecode\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"timecode\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when a **song position** message has been received.\n     *\n     * @event Input#songposition\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"songposition\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when a **song select** message has been received.\n     *\n     * @event Input#songselect\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"songselect\"`\n     * @property {string} song Song (or sequence) number to select (1-128)\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when a **tune request** message has been received.\n     *\n     * @event Input#tunerequest\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"tunerequest\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when a **timing clock** message has been received.\n     *\n     * @event Input#clock\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"clock\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when a **start** message has been received.\n     *\n     * @event Input#start\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"start\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when a **continue** message has been received.\n     *\n     * @event Input#continue\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"continue\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when a **stop** message has been received.\n     *\n     * @event Input#stop\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"stop\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when an **active sensing** message has been received.\n     *\n     * @event Input#activesensing\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"activesensing\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when a **reset** message has been received.\n     *\n     * @event Input#reset\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"reset\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n    /**\n     * Input-wide (system) event emitted when an unknown MIDI message has been received. It could\n     * be, for example, one of the undefined/reserved messages.\n     *\n     * @event Input#unknownmidimessage\n     *\n     * @type {Object}\n     *\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Message} message A `Message` object containing information about the incoming MIDI\n     * message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"unknownmidimessage\"`\n     *\n     * @property {Array} event.data The MIDI message as an array of 8 bit values (deprecated, use\n     * the `message` object instead).\n     * @property {Uint8Array} event.rawData The raw MIDI message as a Uint8Array  (deprecated, use\n     * the `message` object instead).\n     *\n     * @since 2.1\n     */\n\n  }\n\n  /**\n   * Opens the input for usage. This is usually unnecessary as the port is open automatically when\n   * WebMidi is enabled.\n   *\n   * @returns {Promise<Input>} The promise is fulfilled with the `Input` object\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when assigning a listener to the\n    // `onmidimessage` property of the `MIDIInput`. We do it explicitly so that 'connected' events\n    // are dispatched immediately and that we are ready to listen.\n    try {\n      await this._midiInput.open();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * Closes the input. When an input is closed, it cannot be used to listen to MIDI messages until\n   * the input is opened again by calling [Input.open()]{@link Input#open}.\n   *\n   * @returns {Promise<Input>} The promise is fulfilled with the `Input` object\n   */\n  async close() {\n\n    // We close the port. This triggers a statechange event which, in turn, will emit the 'closed'\n    // event.\n    if (!this._midiInput) return Promise.resolve(this);\n\n    try {\n      await this._midiInput.close();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since v3.0.0 (moved to 'InputChannel' class)\n   */\n  getChannelModeByNumber() {\n    if (WebMidi.validation) {\n      console.warn(\n        \"The 'getChannelModeByNumber()' method has been moved to the 'InputChannel' class.\"\n      );\n    }\n  }\n\n  /**\n   * Adds an event listener that will trigger a function callback when the specified event happens.\n   * The event can be **channel-bound** or **input-wide**. Channel-bound events are dispatched by\n   * {@link InputChannel} objects and are tied to a specific MIDI channel while input-wide events\n   * are dispatched by the {@link Input} object itself and are not tied to a specific channel.\n   *\n   * When listening for an input-wide event, you must specify the event to listen for and the\n   * callback function to trigger when the event happens:\n   *\n   * ```\n   * WebMidi.inputs[0].addListener(\"midimessage\", someFunction);\n   * ```\n   *\n   * To listen for a channel-bound event, you must also specify the event to listen for and the\n   * function to trigger but you have to add the channels you wish to listen on in the `options`\n   * parameter:\n   *\n   * ```\n   * WebMidi.inputs[0].addListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n   * ```\n   *\n   * The code above will add a listener for the `\"noteon\"` event and call `someFunction` when the\n   * event is triggered on MIDI channels `1`, `2` or `3`.\n   *\n   * Note that, when adding events to channels, it is the {@link InputChannel} instance that\n   * actually gets a listener added and not the `{@link Input} instance.\n   *\n   * Note: if you want to add a listener to a single MIDI channel you should probably do so directly\n   * on the {@link InputChannel} object itself.\n   *\n   * There are 6 families of events you can listen to:\n   *\n   * 1. **MIDI System Common** Events (input-wide)\n   *\n   *    * [songposition]{@link Input#event:songposition}\n   *    * [songselect]{@link Input#event:songselect}\n   *    * [sysex]{@link Input#event:sysex}\n   *    * [timecode]{@link Input#event:timecode}\n   *    * [tunerequest]{@link Input#event:tunerequest}\n   *\n   * 2. **MIDI System Real-Time** Events (input-wide)\n   *\n   *    * [clock]{@link Input#event:clock}\n   *    * [start]{@link Input#event:start}\n   *    * [continue]{@link Input#event:continue}\n   *    * [stop]{@link Input#event:stop}\n   *    * [activesensing]{@link Input#event:activesensing}\n   *    * [reset]{@link Input#event:reset}\n   *\n   * 3. **State Change** Events (input-wide)\n   *\n   *    * [opened]{@link Input#event:opened}\n   *    * [closed]{@link Input#event:closed}\n   *    * [disconnected]{@link Input#event:disconnected}\n   *\n   * 4. **Catch-All** Events (input-wide)\n   *\n   *    * [midimessage]{@link Input#event:midimessage}\n   *    * [unknownmidimessage]{@link Input#event:unknownmidimessage}\n   *\n   * 5. **Channel Voice** Events (channel-specific)\n   *\n   *    * [channelaftertouch]{@link InputChannel#event:channelaftertouch}\n   *    * [controlchange]{@link InputChannel#event:controlchange}\n   *    * [keyaftertouch]{@link InputChannel#event:keyaftertouch}\n   *    * [noteoff]{@link InputChannel#event:noteoff}\n   *    * [noteon]{@link InputChannel#event:noteon}\n   *    * [nrpn]{@link InputChannel#event:nrpn}\n   *    * [pitchbend]{@link InputChannel#event:pitchbend}\n   *    * [programchange]{@link InputChannel#event:programchange}\n   *\n   * 6. **Channel Mode** Events (channel-specific)\n   *\n   *    * [channelmode]{@link InputChannel#event:channelmode}\n   *    * To be completed...\n   *\n   * @param event {string} The type of the event.\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object's properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the `arguments` property of the `Listener` object\n   * and can be retrieved or modified as desired.\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to listen on. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {Object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array.\n   *\n   * @param {boolean} [options.remaining=Infinity] The number of times after which the callback\n   * should automatically be removed.\n   *\n   * @throws {Error} For channel-specific events, 'options.channels' must be defined.\n   *\n   * @returns {Listener[]} An array of all `Listener` objects that were created.\n   */\n  addListener(event, listener, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = (listener != undefined) ? [].concat(listener) : undefined; // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n      // Validation\n      if (\n        WebMidi.MIDI_CHANNEL_VOICE_MESSAGES[event] !== undefined &&\n        options.channels === undefined\n      ) {\n        throw new Error(\"For channel-specific events, 'options.channels' must be defined.\");\n      }\n\n    }\n\n    let listeners = [];\n\n    // Check if the event is channel-specific or input-wide\n    if (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES[event] === undefined) {\n      listeners.push(super.addListener(event, listener, options));\n    } else {\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        listeners.push(this.channels[ch].addListener(event, listener, options));\n      });\n    }\n\n    return listeners;\n\n  }\n\n  /**\n   * Adds a one-time event listener that will trigger a function callback when the specified event\n   * happens. The event can be **channel-bound** or **input-wide**. Channel-bound events are\n   * dispatched by {@link InputChannel} objects and are tied to a specific MIDI channel while\n   * input-wide events are dispatched by the {@link Input} object itself and are not tied to a\n   * specific channel.\n   *\n   * When listening for an input-wide event, you must specify the event to listen for and the\n   * callback function to trigger when the event happens:\n   *\n   * ```\n   * WebMidi.inputs[0].addListener(\"midimessage\", someFunction);\n   * ```\n   *\n   * To listen for a channel-bound event, you must also specify the event to listen for and the\n   * function to trigger but you have to add the channels you wish to listen on in the `options`\n   * parameter:\n   *\n   * ```\n   * WebMidi.inputs[0].addListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n   * ```\n   *\n   * The code above will add a listener for the `\"noteon\"` event and call `someFunction` when the\n   * event is triggered on MIDI channels `1`, `2` or `3`.\n   *\n   * Note that, when adding events to channels, it is the {@link InputChannel} instance that\n   * actually gets a listener added and not the `{@link Input} instance.\n   *\n   * Note: if you want to add a listener to a single MIDI channel you should probably do so directly\n   * on the {@link InputChannel} object itself.\n   *\n   * There are 6 families of events you can listen to:\n   *\n   * 1. **MIDI System Common** Events (input-wide)\n   *\n   *    * [songposition]{@link Input#event:songposition}\n   *    * [songselect]{@link Input#event:songselect}\n   *    * [sysex]{@link Input#event:sysex}\n   *    * [timecode]{@link Input#event:timecode}\n   *    * [tunerequest]{@link Input#event:tunerequest}\n   *\n   * 2. **MIDI System Real-Time** Events (input-wide)\n   *\n   *    * [clock]{@link Input#event:clock}\n   *    * [start]{@link Input#event:start}\n   *    * [continue]{@link Input#event:continue}\n   *    * [stop]{@link Input#event:stop}\n   *    * [activesensing]{@link Input#event:activesensing}\n   *    * [reset]{@link Input#event:reset}\n   *\n   * 3. **State Change** Events (input-wide)\n   *\n   *    * [opened]{@link Input#event:opened}\n   *    * [closed]{@link Input#event:closed}\n   *    * [disconnected]{@link Input#event:disconnected}\n   *\n   * 4. **Catch-All** Events (input-wide)\n   *\n   *    * [midimessage]{@link Input#event:midimessage}\n   *    * [unknownmidimessage]{@link Input#event:unknownmidimessage}\n   *\n   * 5. **Channel Voice** Events (channel-specific)\n   *\n   *    * [channelaftertouch]{@link InputChannel#event:channelaftertouch}\n   *    * [controlchange]{@link InputChannel#event:controlchange}\n   *    * [keyaftertouch]{@link InputChannel#event:keyaftertouch}\n   *    * [noteoff]{@link InputChannel#event:noteoff}\n   *    * [noteon]{@link InputChannel#event:noteon}\n   *    * [nrpn]{@link InputChannel#event:nrpn}\n   *    * [pitchbend]{@link InputChannel#event:pitchbend}\n   *    * [programchange]{@link InputChannel#event:programchange}\n   *\n   * 6. **Channel Mode** Events (channel-specific)\n   *\n   *    * [channelmode]{@link InputChannel#event:channelmode}\n   *    * To be completed...\n   *\n   * @param event {string} The type of the event.\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object's properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the `arguments` property of the `Listener` object\n   * and can be retrieved or modified as desired.\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to listen on. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {Object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array.\n   *\n   * @throws {Error} For channel-specific events, 'options.channels' must be defined.\n   *\n   * @returns {Listener[]} An array of all `Listener` objects that were created.\n   */\n  addOneTimeListener(event, listener, options = {}) {\n    options.remaining = 1;\n    return this.addListener(event, listener, options);\n  }\n\n  /**\n   * This is an alias to the [Input.addListener()]{@link Input#addListener} method.\n   * @since 2.0.0\n   * @deprecated since v3.0\n   * @private\n   */\n  on(event, channel, listener, options) {\n    return this.addListener(event, channel, listener, options);\n  }\n\n  /**\n   * Checks if the specified event type is already defined to trigger the listener function. For\n   * channel-specific events, the function will return `true` only if all channels have the listener\n   * defined.\n   *\n   * @param event {string} The type of the event.\n   *\n   * @param listener {function} The callback function to check for.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to check. This parameter is ignored for\n   * input-wide events.\n   *\n   * @returns {Boolean} Boolean value indicating whether or not the channel(s) already have this\n   * listener defined.\n   *\n   * @throws Error For channel-specific events, 'options.channels' must be defined.\n   */\n  hasListener(event, listener, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = [].concat(listener); // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n      // Validation\n      if (\n        WebMidi.MIDI_CHANNEL_VOICE_MESSAGES[event] !== undefined &&\n        options.channels === undefined\n      ) {\n        throw new Error(\"For channel-specific events, 'options.channels' must be defined.\");\n      }\n\n    }\n\n    if (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES[event] !== undefined) {\n\n      return Utilities.sanitizeChannels(options.channels).every(ch => {\n        return this.channels[ch].hasListener(event, listener);\n      });\n\n    } else {\n      return super.hasListener(event, listener);\n    }\n\n  }\n\n  /**\n   * Removes the specified listener for the specified event. If no listener is specified, all\n   * listeners for the specified event will be removed. If no event is specified, all listeners for\n   * the `Input` as well as all listeners for all `InputChannels` will be removed.\n   *\n   * By default, channel-specific listeners will be removed from all channels unless the\n   * `options.channel` narrows it down.\n   *\n   * @param [type] {String} The type of the event.\n   *\n   * @param [listener] {Function} The callback function to check for.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to match. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {*} [options.context] Only remove the listeners that have this exact context.\n   *\n   * @param {number} [options.remaining] Only remove the listener if it has exactly that many\n   * remaining times to be executed.\n   */\n  removeListener(event, listener, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = [].concat(listener); // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n    }\n\n    if (options.channels === undefined) {\n      options.channels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    }\n\n    // If the event is not specified, remove everything (channel-specific and input-wide)!\n    if (event == undefined) {\n      Utilities.sanitizeChannels(\n        options.channels).forEach(ch => this.channels[ch].removeListener()\n      );\n      return super.removeListener();\n    }\n\n    // If the event is specified, check if it's channel-specific or input-wide.\n    if (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES[event] !== undefined) {\n\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].removeListener(event, listener, options);\n      });\n\n    } else {\n\n      super.removeListener(event, listener, options);\n\n    }\n\n  }\n\n  /**\n   * Name of the MIDI input\n   *\n   * @type {string}\n   * @readonly\n   */\n  get name() {\n    return this._midiInput.name;\n  }\n\n  /**\n   * ID string of the MIDI port. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiInput.id;\n  }\n\n  /**\n   * Input port's connection state: `\"pending\"`, `\"open\"` or `\"closed\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiInput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this input port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiInput.manufacturer;\n  }\n\n  /**\n   * An integer to offset the reported octave of incoming notes. By default, middle C (MIDI note\n   * number 60) is placed on the 4th octave (C4).\n   *\n   * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n   * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n   *\n   * Note that this value is combined with the global offset value defined on the `WebMidi` object\n   * (if any).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * State of the input port: `\"connected\"` or `\"disconnected\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiInput.state;\n  }\n\n  /**\n   * Port type. In the case of `Input`, this is always: `\"input\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiInput.type;\n  }\n\n  /**\n   * @type {boolean}\n   * @private\n   * @deprecated since v3.0.0 (moved to 'InputChannel' class)\n   */\n  get nrpnEventsEnabled() {\n    if (WebMidi.validation) {\n      console.warn(\"The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class.\");\n    }\n    return false;\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/**\n * The `OutputChannel` class represents a single output channel (1-16) from an output device. This\n * object is derived from the host's MIDI subsystem and cannot be instantiated directly.\n *\n * All 16 `OutputChannel` objects can be found inside the parent output's\n * [channels]{@link Output#channels} property.\n *\n * The `OutputChannel` class extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [addListener()](https://djipco.github.io/djipevents/EventEmitter.html#addListener),\n * [removeListener()](https://djipco.github.io/djipevents/EventEmitter.html#removeListener),\n * [hasListener()](https://djipco.github.io/djipevents/EventEmitter.html#hasListener) and several\n * others.\n *\n * @param {Output} output The output this channel belongs to\n * @param {number} number The channel number (1-16)\n *\n * @since 3.0.0\n */\nexport class OutputChannel extends EventEmitter {\n\n  constructor(output, number) {\n\n    super();\n\n    /**\n     * @type {Output}\n     * @private\n     */\n    this._output = output;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._number = number;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n  }\n\n  /**\n   * Unlinks the MIDI subsystem, removes all listeners attached to the channel and nulls the channel\n   * number. This method is mostly for internal use. It has not been prefixed with an underscore\n   * since it is called by other objects such as the `Output` object.\n   *\n   * @private\n   */\n  destroy() {\n    this._output = null;\n    this._number = null;\n    this._octaveOffset = 0;\n    this.removeListener();\n  }\n\n  /**\n   * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\n   * sent immediately. The message should be an array of 8 bit unsigned integers (0-225) or a\n   * [Uint8Array]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n   * object.\n   *\n   * Note that **you cannot use a\n   * [Uint8Array]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n   * parameter in the Node.js environment**. This is because the MIDI submodule used in Node.js\n   * ([JZZ.js]{@link https://www.npmjs.com/package/jzz}) does not support it.\n   *\n   * It is usually not necessary to use this method directly as you can use one of the simpler\n   * helper methods such as `playNote()`, `stopNote()`, `sendControlChange()`, etc.\n   *\n   * Details on the format of MIDI messages are available in the summary of\n   * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}\n   * from the MIDI Manufacturers Association.\n   *\n   * @param message {number[]|Uint8Array} An array of 8bit unsigned integers or a `Uint8Array`\n   * object (not available in Node.js) containing the message bytes. Depending on the type of\n   * message, one to three bytes will be used.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a positive\n   * number\n   * ([DOMHighResTimeStamp]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that point time. If `time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.\n   *\n   * @throws {RangeError} Data bytes must be integers between 0 and 255.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  send(message, options = {time: 0}) {\n    this.output.send(message, options);\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **key aftertouch** message at the scheduled time. This is a key-specific\n   * aftertouch. For a channel-wide aftertouch message, use\n   * [setChannelAftertouch()]{@link Output#setChannelAftertouch}.\n   *\n   * The key can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier such as `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`, etc.\n   *\n   * @param target {number|string|number[]|string[]} The key(s) for which you are sending an\n   * aftertouch value. The notes can be specified by using a MIDI note number (0-127), a note\n   * identifier (e.g. C3, G#4, F-1, Db7), or an array of the previous types.\n   *\n   * When using a note identifier, the octave value will be offset by the combined value of\n   * `InputChannel.octaveOffset`, `Input.octaveOffset` and `WebMidi.octaveOffset` (if those values\n   * are not `0`). When using a key number, octaveOffset values are ignored.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure is defined by using an integer between 0 and 127.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.useRawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @return {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @throws RangeError Invalid key aftertouch value.\n   */\n  setKeyAftertouch(target, pressure, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy support\n      if (options.useRawValue) options.rawValue = options.useRawValue;\n\n      if (isNaN(parseFloat(pressure))) {\n        throw new RangeError(\"Invalid key aftertouch value.\");\n      }\n      if (options.rawValue) {\n        if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) {\n          throw new RangeError(\"Key aftertouch raw value must be an integer between 0 and 127.\");\n        }\n      } else {\n        if (!(pressure >= 0 && pressure <= 1)) {\n          throw new RangeError(\"Key aftertouch value must be a float between 0 and 1.\");\n        }\n      }\n\n    }\n\n    // Normalize pressure to integer\n    if (!options.rawValue) pressure = Utilities.to7Bit(pressure);\n\n    // Retrieve key number. If identifier specified, offset by total offset value\n    const offset = WebMidi.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n    if (!Array.isArray(target)) target = [target];\n    target = target.map(item => Utilities.guessNoteNumber(item));\n\n    target.forEach(n => {\n      this.send(\n        [\n          (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.keyaftertouch << 4) + (this.number - 1),\n          Utilities.offsetNumber(n, offset),\n          pressure\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n\n\n\n\n    //\n    // Utilities.buildNoteArray(note, {rawAttack: nVelocity}).forEach(n => {\n    //   this.send(\n    //     [\n    //       (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.noteon << 4) + (this.number - 1),\n    //       n.getOffsetNumber(offset),\n    //       n.rawAttack\n    //     ],\n    //     {time: Utilities.toTimestamp(options.time)}\n    //   );\n    // });\n\n\n  }\n\n  /**\n   * Sends a MIDI **control change** message to the channel at the scheduled time. The control\n   * change message to send can be specified numerically (0 to 119) or by using one of the following\n   * common names:\n   *\n   *  * `bankselectcoarse` (#0)\n   *  * `modulationwheelcoarse` (#1)\n   *  * `breathcontrollercoarse` (#2)\n   *  * `footcontrollercoarse` (#4)\n   *  * `portamentotimecoarse` (#5)\n   *  * `dataentrycoarse` (#6)\n   *  * `volumecoarse` (#7)\n   *  * `balancecoarse` (#8)\n   *  * `pancoarse` (#10)\n   *  * `expressioncoarse` (#11)\n   *  * `effectcontrol1coarse` (#12)\n   *  * `effectcontrol2coarse` (#13)\n   *  * `generalpurposeslider1` (#16)\n   *  * `generalpurposeslider2` (#17)\n   *  * `generalpurposeslider3` (#18)\n   *  * `generalpurposeslider4` (#19)\n   *  * `bankselectfine` (#32)\n   *  * `modulationwheelfine` (#33)\n   *  * `breathcontrollerfine` (#34)\n   *  * `footcontrollerfine` (#36)\n   *  * `portamentotimefine` (#37)\n   *  * `dataentryfine` (#38)\n   *  * `volumefine` (#39)\n   *  * `balancefine` (#40)\n   *  * `panfine` (#42)\n   *  * `expressionfine` (#43)\n   *  * `effectcontrol1fine` (#44)\n   *  * `effectcontrol2fine` (#45)\n   *  * `holdpedal` (#64)\n   *  * `portamento` (#65)\n   *  * `sustenutopedal` (#66)\n   *  * `softpedal` (#67)\n   *  * `legatopedal` (#68)\n   *  * `hold2pedal` (#69)\n   *  * `soundvariation` (#70)\n   *  * `resonance` (#71)\n   *  * `soundreleasetime` (#72)\n   *  * `soundattacktime` (#73)\n   *  * `brightness` (#74)\n   *  * `soundcontrol6` (#75)\n   *  * `soundcontrol7` (#76)\n   *  * `soundcontrol8` (#77)\n   *  * `soundcontrol9` (#78)\n   *  * `soundcontrol10` (#79)\n   *  * `generalpurposebutton1` (#80)\n   *  * `generalpurposebutton2` (#81)\n   *  * `generalpurposebutton3` (#82)\n   *  * `generalpurposebutton4` (#83)\n   *  * `reverblevel` (#91)\n   *  * `tremololevel` (#92)\n   *  * `choruslevel` (#93)\n   *  * `celestelevel` (#94)\n   *  * `phaserlevel` (#95)\n   *  * `databuttonincrement` (#96)\n   *  * `databuttondecrement` (#97)\n   *  * `nonregisteredparametercoarse` (#98)\n   *  * `nonregisteredparameterfine` (#99)\n   *  * `registeredparametercoarse` (#100)\n   *  * `registeredparameterfine` (#101)\n   *\n   * Note: as you can see above, not all control change message have a matching common name. This\n   * does not mean you cannot use the others. It simply means you will need to use their number\n   * (0-119) instead of their name. Numbers 120 to 127 are reserved for *channel mode* messages. See\n   * [sendChannelMode()]{@link OutputChannel#sendChannelMode} method for more info.\n   *\n   * To view a detailed list of all available **control change** messages, please consult \"Table 3 -\n   * Control Change Messages\" from the [MIDI Messages](\n   * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)\n   * specification.\n   *\n   * @param {number|string} controller The MIDI controller name or number (0-119).\n   *\n   * @param {number} value The value to send (0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 119.\n   * @throws {RangeError} Invalid controller name.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendControlChange(controller, value, options = {}) {\n\n    if (typeof controller === \"string\") {\n      controller = WebMidi.MIDI_CONTROL_CHANGE_MESSAGES[controller];\n    }\n\n    if (WebMidi.validation) {\n      if (controller === undefined) {\n        throw new TypeError(\n          \"Control change must be identified with a valid name or an integer between 0 and 119.\"\n        );\n      }\n\n      if (!Number.isInteger(controller) || !(controller >= 0 && controller <= 119)) {\n        throw new TypeError(\"Control change number must be an integer between 0 and 119.\");\n      }\n\n      if (!Number.isInteger(value) || !(value >= 0 && value <= 127)) {\n        throw new TypeError(\"Control change value must be an integer between 0 and 127\");\n      }\n    }\n\n    this.send(\n      [\n        (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.controlchange << 4) + (this.number - 1),\n        controller,\n        value\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Selects a MIDI non-registered parameter so it is affected by upcoming data entry, data\n   * increment and data decrement messages.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes that identify\n   * the registered parameter. The NRPN MSB (99 or 0x63) is a position 0. The NRPN LSB (98 or 0x62)\n   * is at position 1.\n   *\n   * @private\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _selectNonRegisteredParameter(parameter, options = {}) {\n\n    // parameter[0] = Math.floor(parameter[0]);\n    // if (!(parameter[0] >= 0 && parameter[0] <= 127)) {\n    //   throw new RangeError(\"The control63 value must be between 0 and 127.\");\n    // }\n    //\n    // parameter[1] = Math.floor(parameter[1]);\n    // if (!(parameter[1] >= 0 && parameter[1] <= 127)) {\n    //   throw new RangeError(\"The control62 value must be between 0 and 127.\");\n    // }\n\n    this.sendControlChange(0x63, parameter[0], options);\n    this.sendControlChange(0x62, parameter[1], options);\n\n    return this;\n\n  }\n\n  /**\n   * Deselects the currently active MIDI registered parameter so it is no longer affected by data\n   * entry, data increment and data decrement messages.\n   *\n   * Current best practice recommends doing that after each call to\n   * [_setCurrentParameter()]{@link OutputChannel#_setCurrentParameter}.\n   *\n   * @private\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _deselectRegisteredParameter(options = {}) {\n    this.sendControlChange(0x65, 0x7F, options);\n    this.sendControlChange(0x64, 0x7F, options);\n    return this;\n  }\n\n  /**\n   * Deselects the currently active MIDI non-registered parameter so it is no longer affected by\n   * data entry, data increment and data decrement messages.\n   *\n   * @private\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _deselectNonRegisteredParameter(options = {}) {\n    this.sendControlChange(0x65, 0x7F, options);\n    this.sendControlChange(0x64, 0x7F, options);\n    return this;\n  }\n\n  /**\n   * Selects a MIDI registered parameter so it is affected by upcoming data entry, data increment\n   * and data decrement messages.\n   *\n   * @private\n   *\n   * @param parameter {number[]} A two-position array of integers specifying the two control bytes\n   * (0x65, 0x64) that identify the registered parameter. The integers must be between 0 and 127.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _selectRegisteredParameter(parameter, options = {}) {\n    this.sendControlChange(0x65, parameter[0], options);\n    this.sendControlChange(0x64, parameter[1], options);\n    return this;\n  }\n\n  /**\n   * Sets the value of the currently selected MIDI registered parameter.\n   *\n   * @private\n   *\n   * @param data {number|number[]}\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _setCurrentParameter(data, options = {}) {\n\n    data = [].concat(data);\n\n    // MSB\n    // data[0] = parseInt(data[0]);\n    // if (!isNaN(data[0]) && data[0] >= 0 && data[0] <= 127) {\n    this.sendControlChange(0x06, data[0], options);\n    // } else {\n    //   throw new RangeError(\"The msb value must be between 0 and 127.\");\n    // }\n\n    if (data.length < 2) return this;\n\n    // LSB\n    // data[1] = parseInt(data[1]);\n\n    // if (!isNaN(data[1]) && data[1] >= 0 && data[1] <= 127) {\n    this.sendControlChange(0x26, data[1], options);\n    // } else {\n    //   throw new RangeError(\"The lsb value must be between 0 and 127.\");\n    // }\n\n    return this;\n\n  }\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified registered parameter is invalid.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  decrementRegisteredParameter(parameter, options = {}) {\n\n    if (!Array.isArray(parameter)) parameter = WebMidi.MIDI_REGISTERED_PARAMETER[parameter];\n\n    if (WebMidi.validation) {\n      if (parameter === undefined) {\n        throw new TypeError(\"The specified registered parameter is invalid.\");\n      }\n\n      let valid = false;\n\n      Object.getOwnPropertyNames(WebMidi.MIDI_REGISTERED_PARAMETER).forEach(p => {\n        if (\n          WebMidi.MIDI_REGISTERED_PARAMETER[p][0] === parameter[0] &&\n          WebMidi.MIDI_REGISTERED_PARAMETER[p][1] === parameter[1]\n        ) {\n          valid = true;\n        }\n      });\n\n      if (!valid) throw new TypeError(\"The specified registered parameter is invalid.\");\n    }\n\n    this._selectRegisteredParameter(parameter, options);\n    this.sendControlChange(0x61, 0, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified registered parameter is invalid.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  incrementRegisteredParameter(parameter, options = {}) {\n\n    if (!Array.isArray(parameter)) parameter = WebMidi.MIDI_REGISTERED_PARAMETER[parameter];\n\n    if (WebMidi.validation) {\n      if (parameter === undefined) {\n        throw new TypeError(\"The specified registered parameter is invalid.\");\n      }\n\n      let valid = false;\n\n      Object.getOwnPropertyNames(WebMidi.MIDI_REGISTERED_PARAMETER).forEach(p => {\n        if (\n          WebMidi.MIDI_REGISTERED_PARAMETER[p][0] === parameter[0] &&\n          WebMidi.MIDI_REGISTERED_PARAMETER[p][1] === parameter[1]\n        ) {\n          valid = true;\n        }\n      });\n\n      if (!valid) throw new TypeError(\"The specified registered parameter is invalid.\");\n    }\n\n    this._selectRegisteredParameter(parameter, options);\n    this.sendControlChange(0x60, 0, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Plays a note or an array of notes on the channel. The first parameter is the note to play. It\n   * can be a single value or an array of the following valid values:\n   *\n   *  - A {@link Note} object\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *\n   * The `playNote()` method sends a **note on** MIDI message for all specified notes on all\n   * specified channels. If a `duration` is set in the `options` parameter or in the {@link Note}\n   * object's [duration]{@link Note#duration} property, it will also schedule a **note off** message\n   * to end the note after said duration. If no `duration` is set, the note will simply play until\n   * a matching **note off** message is sent with [stopNote()]{@link OutputChannel#stopNote} or\n   * [sendNoteOff()]{@link OutputChannel#sendNoteOff}.\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the durations and velocities defined in the {@link Note}\n   * objects have precedence over the ones specified via the method's `options` parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number} [options.duration] A positive number larger than 0 representing the number of\n   * milliseconds to wait before sending a **note off** message. If invalid or left undefined, only\n   * a **note on** message will be sent.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity\n   * value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=0.5] The attack velocity at which to play the note (between\n   * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will\n   * silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`. This is only used with the\n   * **note off** event triggered when `options.duration` is set.\n   *\n   * @param {number} [options.rawRelease=0.5] The velocity at which to release the note (between `0`\n   * and `127`). This has priority over the `release` property. An invalid velocity value will\n   * silently trigger the default of `0.5`. This is only used with the **note off** event triggered\n   * when `options.duration` is set.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  playNote(note, options = {}) {\n\n    // Send note on and, optionally, note off message (if duration is a positive number)\n    this.sendNoteOn(note, options);\n\n    // https://stackoverflow.com/questions/600763#answer-601877\n    if (options.duration > 0 && isFinite(String(options.duration).trim() || NaN)) {\n\n      let noteOffOptions = {\n        time: (Utilities.toTimestamp(options.time) || WebMidi.time) + options.duration,\n        release: options.release,\n        rawRelease: options.rawRelease,\n      };\n\n      this.sendNoteOff(note, noteOffOptions);\n\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified notes on the channel. The first parameter is the\n   * note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   *  The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the release velocity defined in the {@link Note} objects has\n   * precedence over the one specified via the method's `options` parameter.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNoteOff(note, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (\n        options.rawRelease != undefined &&\n        !(options.rawRelease >= 0 && options.rawRelease <= 127)\n      ) {\n        throw new RangeError(\"The 'rawRelease' option must be an integer between 0 and 127\");\n      }\n\n      if (options.release != undefined && !(options.release >= 0 && options.release <= 1)) {\n        throw new RangeError(\"The 'release' option must be an number between 0 and 1\");\n      }\n\n      // Legacy compatibility warnings\n      if (options.rawVelocity) {\n        options.rawRelease = options.velocity;\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.\");\n      }\n      if (options.velocity) {\n        options.release = options.velocity;\n        console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n      }\n\n    }\n\n    let nVelocity = 64;\n\n    if (options.rawRelease != undefined) {\n      nVelocity = options.rawRelease;\n    } else {\n      if (!isNaN(options.release)) nVelocity = Math.round(options.release * 127);\n    }\n\n    // Plot total octave offset\n    const offset = WebMidi.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n\n    Utilities.buildNoteArray(note, {rawRelease: parseInt(nVelocity)}).forEach(n => {\n      this.send(\n        [\n          (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.noteoff << 4) + (this.number - 1),\n          n.getOffsetNumber(offset),\n          n.rawRelease,\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * This is an alias to the [sendNoteOff()]{@link OutputChannel#sendNoteOff} method.\n   *\n   * @see {@link OutputChannel#sendNoteOff}\n   *\n   * @param note\n   * @param options\n   * @returns {Output}\n   */\n  stopNote(note, options = {}) {\n    return this.sendNoteOff(note, options);\n  }\n\n  /**\n   * Sends a **note on** message for the specified note(s) on the channel. The first parameter is\n   * the note. It can be a single value or an array of the following valid values:\n   *\n   *  - A {@link Note} object\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *\n   *  When passing a {@link Note} object or a note name, the `octaveOffset` will be applied. This is\n   *  not the case when using a note number number. In this case, we assume you know exactly which\n   *  MIDI note number should be sent out.\n   *\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the attack velocity defined in the {@link Note} objects has\n   * precedence over the one specified via the method's `options` parameter. Also, the `duration` is\n   * ignored. If you want to also send a **note off** message, use the\n   * [playNote()]{@link Output#playNote} method instead.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The velocity at which to release the note (between `0`\n   * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `64`.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNoteOn(note, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (options.rawAttack != undefined && !(options.rawAttack >= 0 && options.rawAttack <= 127)) {\n        throw new RangeError(\"The 'rawAttack' option must be an integer between 0 and 127\");\n      }\n\n      if (options.attack != undefined && !(options.attack >= 0 && options.attack <= 1)) {\n        throw new RangeError(\"The 'attack' option must be an number between 0 and 1\");\n      }\n\n      // Legacy compatibility warnings\n      if (options.rawVelocity) {\n        options.rawAttack = options.velocity;\n        options.rawRelease = options.release;\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.\");\n      }\n      if (options.velocity) {\n        options.attack = options.velocity;\n        console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n      }\n\n    }\n\n    let nVelocity = 64;\n\n    if (options.rawAttack != undefined) {\n      nVelocity = options.rawAttack;\n    } else {\n      if (!isNaN(options.attack)) nVelocity = Math.round(options.attack * 127);\n    }\n\n    // Plot total octave offset\n    const offset = WebMidi.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n\n    Utilities.buildNoteArray(note, {rawAttack: nVelocity}).forEach(n => {\n      this.send(\n        [\n          (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.noteon << 4) + (this.number - 1),\n          n.getOffsetNumber(offset),\n          n.rawAttack\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel mode** message. The channel mode message to send can be specified\n   * numerically or by using one of the following common names:\n   *\n   *   * `\"allsoundoff\"` (#120)\n   *   * `\"resetallcontrollers\"` (#121)\n   *   * `\"localcontrol\"` (#122)\n   *   * `\"allnotesoff\"` (#123)\n   *   * `\"omnimodeoff\"` (#124)\n   *   * `\"omnimodeon\"` (#125)\n   *   * `\"monomodeon\"` (#126)\n   *   * `\"polymodeon\"` (#127)\n   *\n   * It should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may\n   * require a value that's not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * To make it easier, all channel mode messages have a matching helper method:\n   *\n   *   - [turnSoundOff()]{@link Output#turnSoundOff}\n   *   - [resetAllControllers()]{@link Output#resetAllControllers}\n   *   - [setLocalControl()]{@link Output#turnSoundOff}\n   *   - [turnNotesOff()]{@link Output#turnNotesOff}\n   *   - [setOmniMode()]{@link Output#setOmniMode}\n   *   - [setPolyphonicMode()]{@link Output#setPolyphonicMode}\n   *\n   * @param command {number|string} The numerical identifier of the channel mode message (integer\n   * between 120-127) or its name as a string.\n   *\n   * @param value {number} The value to send (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendChannelMode(command, value, options = {}) {\n\n    // Normalize command to integer\n    if (typeof command === \"string\") command = WebMidi.MIDI_CHANNEL_MODE_MESSAGES[command];\n\n    if (WebMidi.validation) {\n\n      if (command === undefined) {\n        throw new TypeError(\"Invalid channel mode message name or number.\");\n      }\n\n      if (isNaN(command) || !(command >= 120 && command <= 127)) {\n        throw new TypeError(\"Invalid channel mode message number.\");\n      }\n\n      if (isNaN(parseInt(value)) || value < 0 || value > 127) {\n        throw new RangeError(\"Value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    this.send(\n      [\n        (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.channelmode << 4) + (this.number - 1),\n        command,\n        value\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets OMNI mode to `\"on\"` or `\"off\"`. MIDI's OMNI mode causes the instrument to respond to\n   * messages from all channels.\n   *\n   * It should be noted that support for OMNI mode is not as common as it used to be.\n   *\n   * @param [state=true] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setOmniMode(state, options = {}) {\n\n    if (state === undefined || state) {\n      this.sendChannelMode(\"omnimodeon\", 0, options);\n    } else {\n      this.sendChannelMode(\"omnimodeoff\", 0, options);\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel aftertouch** message. For key-specific aftertouch, you should instead\n   * use [setKeyAftertouch()]{@link Output#setKeyAftertouch}.\n   *\n   * @param [pressure] {number} The pressure level (between 0 and 1). If the `rawValue` option is\n   * set to `true`, the pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @throws RangeError Invalid channel aftertouch value.\n   */\n  setChannelAftertouch(pressure, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (isNaN(parseFloat(pressure))) {\n        throw new RangeError(\"Invalid channel aftertouch value.\");\n      }\n\n      if (options.rawValue) {\n        if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) {\n          throw new RangeError(\n            \"Channel aftertouch raw value must be an integer between 0 and 127.\")\n          ;\n        }\n      } else {\n        if (!(pressure >= 0 && pressure <= 1)) {\n          throw new RangeError(\"Channel aftertouch value must be a float between 0 and 1.\");\n        }\n      }\n\n    }\n\n    this.send(\n      [\n        (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.channelaftertouch << 4) + (this.number - 1),\n        Math.round(pressure * 127)\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **master tuning** message. The value is decimal and must be larger than -65 semitones\n   * and smaller than 64 semitones.\n   *\n   * Because of the way the MIDI specification works, the decimal portion of the value will be\n   * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n   * a **Master Fine Tuning** RPN messages.\n   *\n   * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setMasterTuning(value, options = {}) {\n\n    value = parseFloat(value) || 0.0;\n\n    if (WebMidi.validation) {\n\n      if (!(value > -65 && value < 64)) {\n        throw new RangeError(\n          \"The value must be a decimal number larger than -65 and smaller than 64.\"\n        );\n      }\n\n    }\n\n    let coarse = Math.floor(value) + 64;\n    let fine = value - Math.floor(value);\n\n    // Calculate MSB and LSB for fine adjustment (14bit resolution)\n    fine = Math.round((fine + 1) / 2 * 16383);\n    let msb = (fine >> 7) & 0x7F;\n    let lsb = fine & 0x7F;\n\n    this.setRegisteredParameter(\"channelcoarsetuning\", coarse, options);\n    this.setRegisteredParameter(\"channelfinetuning\", [msb, lsb], options);\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **modulation depth range** message to adjust the depth of the modulation wheel's range.\n   * The range can be specified with the `semitones` parameter, the `cents` parameter or by\n   * specifying both parameters at the same time.\n   *\n   * @param {number} semitones The desired adjustment value in semitones (integer between 0 and\n   * 127).\n   *\n   * @param {number} [cents=0] The desired adjustment value in cents (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setModulationRange(semitones, cents, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) {\n        throw new RangeError(\"The semitones value must be an integer between 0 and 127.\");\n      }\n\n      if (!(cents == undefined) && (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127))) {\n        throw new RangeError(\"If specified, the cents value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    // Default value for cents\n    if (!(cents >= 0 && cents <= 127)) cents = 0;\n\n    this.setRegisteredParameter(\"modulationrange\", [semitones, cents], options);\n\n    return this;\n\n  }\n\n  /**\n   * Sets a non-registered parameter (NRPN) to the specified value. The NRPN is selected by passing\n   * in a two-position array specifying the values of the two control bytes. The value is specified\n   * by passing in a single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you\n   * would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].channels[0].setNonRegisteredParameter([1, 8], 123);\n   * ```\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was 10, you could use:\n   *\n   * ```js\n   * WebMidi.outputs[0].channels[0].setNonRegisteredParameter([2, 63], [0, 10]);\n   * ```\n   *\n   * For further implementation details, refer to the manufacturer's documentation.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes (0x63,\n   * 0x62) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The control value must be between 0 and 127.\n   * @throws {RangeError} The msb value must be between 0 and 127\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setNonRegisteredParameter(nrpn, data, options = {}) {\n\n    data = [].concat(data);\n\n    if (WebMidi.validation) {\n\n      if (!Array.isArray(nrpn) || !Number.isInteger(nrpn[0]) || !Number.isInteger(nrpn[1])) {\n        throw new TypeError(\"The specified NRPN is invalid.\");\n      }\n\n      if (!(nrpn[0] >= 0 && nrpn[0] <= 127)) {\n        throw new RangeError(\"The first byte of the NRPN must be between 0 and 127.\");\n      }\n\n      if (!(nrpn[1] >= 0 && nrpn[1] <= 127)) {\n        throw new RangeError(\"The second byte of the NRPN must be between 0 and 127.\");\n      }\n\n      data.forEach(value => {\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The data bytes of the NRPN must be between 0 and 127.\");\n        }\n      });\n\n    }\n\n    this._selectNonRegisteredParameter(nrpn, options);\n    this._setCurrentParameter(data, options);\n    this._deselectNonRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **pitch bend** message at the scheduled time.\n   *\n   * @param {number|number[]} [value] The intensity of the bend (between -1.0 and 1.0). A value of\n   * zero means no bend. The resulting bend is relative to the pitch bend range that has been\n   * defined. The range can be set with [setPitchBendRange()]{@link OutputChannel#setPitchBendRange}\n   * . So, for example, if the pitch bend range has been set to 12 semitones, using a bend value of\n   * -1 will bend the note 1 octave below its nominal value.\n   *\n   * If the `rawValue` option is set to `true`, the intensity of the bend can be defined by either\n   * using a single integer between 0 and 127 (MSB) or an array of two integers between 0 and 127\n   * representing, respectively, the MSB (most significant byte) and the LSB (least significant\n   * byte). The MSB is expressed in semitones with `64` meaning no bend. A value lower than `64`\n   * bends downwards while a value higher than `64` bends upwards. The LSB is expressed in cents\n   * (1/100 of a semitone). An LSB of `64` also means no bend.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered as a float between -1.0 and 1.0 (default) or as raw integer between 0 and 127 (or\n   * an array of 2 integers if using both MSB and LSB).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setPitchBend(value, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (options.rawValue && Array.isArray(value)) {\n\n        if (!(value[0] >= 0 && value[0] <= 127)) {\n          throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n        }\n        if (!(value[1] >= 0 && value[1] <= 127)) {\n          throw new RangeError(\"The pitch bend LSB must be an integer between 0 and 127.\");\n        }\n\n      } else if (options.rawValue && !Array.isArray(value)) {\n\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n        }\n\n      } else {\n\n        if (isNaN(value) || value === null) {\n          throw new RangeError(\"Invalid pitch bend value.\");\n        }\n\n        if (!(value >= -1 && value <= 1)) {\n          throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n        }\n\n      }\n\n    }\n\n    let msb = 0;\n    let lsb = 0;\n\n    // Calculate MSB and LSB for both scenarios\n    if (options.rawValue && Array.isArray(value)) {\n      msb = value[0];\n      lsb = value[1];\n    } else if (options.rawValue && !Array.isArray(value)) {\n      msb = value;\n    } else {\n      let nLevel = Math.round((value + 1) / 2 * 16383);\n      msb = (nLevel >> 7) & 0x7F;\n      lsb = nLevel & 0x7F;\n    }\n\n    this.send(\n      [\n        (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.pitchbend << 4) + (this.number - 1),\n        lsb,\n        msb\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a pitch bend range message to the specified channel(s) at the scheduled time so that they\n   * adjust the range used by their pitch bend lever. The range is specified by using the\n   * `semitones` and `cents` parameters. For example, setting the `semitones` parameter to `12`\n   * means that the pitch bend range will be 12 semitones above and below the nominal pitch.\n   *\n   * @param semitones {number} The desired adjustment value in semitones (between 0 and 127). While\n   * nothing imposes that in the specification, it is very common for manufacturers to limit the\n   * range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127.\n   * @throws {RangeError} The lsb value must be between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setPitchBendRange(semitones, cents, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) {\n        throw new RangeError(\"The semitones value must be an integer between 0 and 127.\");\n      }\n\n      if (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127)) {\n        throw new RangeError(\"The cents value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    this.setRegisteredParameter(\"pitchbendrange\", [semitones, cents], options);\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **program change** message at the scheduled time.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param [program=1] {number} The MIDI patch (program) number (1-128)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n   * than 0xFF.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   */\n  setProgram(program, options = {}) {\n\n    program = parseInt(program) || 1;\n\n    if (WebMidi.validation) {\n\n      if (!(program >= 1 && program <= 128)) {\n        throw new RangeError(\"The program number must be between 1 and 128.\");\n      }\n\n    }\n\n    this.send(\n      [\n        (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.programchange << 4) + (this.number - 1),\n        program - 1\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data (msb, lsb) that each can go from 0 to 127.\n   *\n   * MIDI\n   * [registered parameters]\n   * (https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n   * limited number of them. Here are the original registered parameters with the identifier that\n   * can be used as the first parameter of this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *\n   * Note that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * Another set of extra parameters have been later added for 3D sound controllers. They are:\n   *\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {string|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n   * registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An single integer or an array of integers with a maximum\n   * length of 2 specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setRegisteredParameter(rpn, data, options = {}) {\n\n    if (!Array.isArray(rpn)) rpn = WebMidi.MIDI_REGISTERED_PARAMETER[rpn];\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(rpn[0]) || !Number.isInteger(rpn[1])) {\n        throw new TypeError(\"The specified NRPN is invalid.\");\n      }\n\n      if (!(rpn[0] >= 0 && rpn[0] <= 127)) {\n        throw new RangeError(\"The first byte of the RPN must be between 0 and 127.\");\n      }\n\n      if (!(rpn[1] >= 0 && rpn[1] <= 127)) {\n        throw new RangeError(\"The second byte of the RPN must be between 0 and 127.\");\n      }\n\n      [].concat(data).forEach(value => {\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The data bytes of the RPN must be between 0 and 127.\");\n        }\n      });\n\n    }\n\n    this._selectRegisteredParameter(rpn, options);\n    this._setCurrentParameter(data, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the bank number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning bank (1-128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 1 and 128.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setTuningBank(value, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(value) || !(value >= 1 && value <= 128)) {\n        throw new RangeError(\"The tuning bank number must be between 1 and 128.\");\n      }\n\n    }\n\n    this.setRegisteredParameter(\"tuningbank\", value - 1, options);\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning program (1-128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 1 and 128.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setTuningProgram(value, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(value) || !(value >= 1 && value <= 128)) {\n        throw new RangeError(\"The tuning program number must be between 1 and 128.\");\n      }\n\n    }\n\n    this.setRegisteredParameter(\"tuningprogram\", value - 1, options);\n    return this;\n\n  }\n\n  /**\n   * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n   * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n   * its out port.\n   *\n   * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n   * (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setLocalControl(state, options = {}) {\n    if (state) {\n      return this.sendChannelMode(\"localcontrol\", 127, options);\n    } else {\n      return this.sendChannelMode(\"localcontrol\", 0, options);\n    }\n  }\n\n  /**\n   * Sends an **all notes off** channel mode message. This will make all currently playing notes\n   * fade out just as if their key had been released. This is different from the\n   * [turnSoundOff()]{@link OutputChannel#turnSoundOff} method which mutes all sounds immediately.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  turnNotesOff(options = {}) {\n    return this.sendChannelMode(\"allnotesoff\", 0, options);\n  }\n\n  /**\n   * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n   * channel but will not prevent new sounds from being triggered.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  turnSoundOff(options = {}) {\n    return this.sendChannelMode(\"allsoundoff\", 0, options);\n  }\n\n  /**\n   * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n   * the pitch bend, to their default value.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  resetAllControllers(options = {}) {\n    return this.sendChannelMode(\"resetallcontrollers\", 0, options);\n  }\n\n  /**\n   * Sets the polyphonic mode. In `\"poly\"` mode (usually the default), multiple notes can be played\n   * and heard at the same time. In `\"mono\"` mode, only one note will be heard at once even if\n   * multiple notes are being played.\n   *\n   * @param {string} [mode=poly] The mode to use: `\"mono\"` or `\"poly\"`.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [WebMidi.time]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the operation\n   * will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setPolyphonicMode(mode, options = {}) {\n    if (mode === \"mono\") {\n      return this.sendChannelMode(\"monomodeon\", 0, options);\n    } else {\n      return this.sendChannelMode(\"polymodeon\", 0, options);\n    }\n  }\n\n  /**\n   * An integer to offset the reported octave of outgoing note-specific messages (`noteon`,\n   * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n   * octave (C4).\n   *\n   * Note that this value is combined with the global offset value defined on the `WebMidi` object\n   * and with the value defined on the parent `Output` object.\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * The parent {@link Output} this channel belongs to\n   * @type {Output}\n   * @since 3.0\n   */\n  get output() {\n    return this._output;\n  }\n\n  /**\n   * This channel's MIDI number (1-16)\n   * @type {number}\n   * @since 3.0\n   */\n  get number() {\n    return this._number;\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {OutputChannel} from \"./OutputChannel.js\";\nimport {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/**\n * The `Output` class represents a MIDI output port. This object is derived from the host's MIDI\n * subsystem and cannot be instantiated directly.\n *\n * You can find a list of all available `Output` objects in the\n * [WebMidi.outputs]{@link WebMidi#outputs} array.\n *\n * The `Output` class extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [addListener()](https://djipco.github.io/djipevents/EventEmitter.html#addListener),\n * [removeListener()](https://djipco.github.io/djipevents/EventEmitter.html#removeListener),\n * [hasListener()](https://djipco.github.io/djipevents/EventEmitter.html#hasListener) and several\n * others.\n *\n * @param {MIDIOutput} midiOutput `MIDIOutput` object as provided by the MIDI subsystem\n *\n * @fires Output#opened\n * @fires Output#disconnected\n * @fires Output#closed\n */\nexport class Output extends EventEmitter {\n\n  constructor(midiOutput) {\n\n    super();\n\n    /**\n     * A reference to the `MIDIOutput` object\n     * @type {MIDIOutput}\n     * @private\n     */\n    this._midiOutput = midiOutput;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * Array containing the 16 {@link OutputChannel} objects available for this `Output`. The\n     * channels are numbered 1 through 16.\n     *\n     * @type {OutputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new OutputChannel(this, i);\n\n    this._midiOutput.onstatechange = this._onStateChange.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Output`. All listeners are removed, all channels are destroyed and the MIDI\n   * subsystem is unlinked.\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    this._midiOutput.onstatechange = null;\n    await this.close();\n    this._midiOutput = null;\n  }\n\n  /**\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: WebMidi.time\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the {@link Output} has been opened by calling the\n       * [open()]{@link Output#open} method.\n       *\n       * @event Output#opened\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"opened\"`\n       * @property {Output} target The object that triggered the event\n       */\n      event.type = \"opened\";\n      event.target = this;\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the {@link Output} has been closed by calling the\n       * [close()]{@link Output#close} method.\n       *\n       * @event Output#closed\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"closed\"`\n       * @property {Output} target The object that triggered the event\n       */\n      event.type = \"closed\";\n      event.target = this;\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the {@link Output} becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Output#disconnected\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp0 when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"disconnected\"`\n       * @property {Object} target Object with properties describing the {@link Output} that\n       * triggered the event. This is not the actual `Output` as it is no longer available.\n       * @property {string} target.connection `\"closed\"`\n       * @property {string} target.id ID of the input\n       * @property {string} target.manufacturer Manufacturer of the device that provided the input\n       * @property {string} target.name Name of the device that provided the input\n       * @property {string} target.state `\"disconnected\"`\n       * @property {string} target.type `\"output\"`\n       */\n      event.type = \"disconnected\";\n      event.target = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") {\n      // I don't see the need to forward that...\n    } else {\n      console.warn(\"This statechange event was not caught:\", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Opens the output for usage.\n   *\n   * @returns {Promise<Output>} The promise is fulfilled with the `Output`\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when calling `send()` on the `MIDIOutput`.\n    // We do it explicitly so that 'connected' events are dispatched immediately and we are ready to\n    // send.\n    try {\n      await this._midiOutput.open();\n      return Promise.resolve(this);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n  }\n\n  /**\n   * Closes the output connection. When an output is closed, it cannot be used to send MIDI messages\n   * until the output is opened again by calling [Output.open()]{@link Output#open}. You can check\n   * the connection status by looking at the [connection]{@link Output#connection} property.\n   *\n   * @returns {Promise<void>}\n   */\n  async close() {\n\n    // We close the port. This triggers a 'statechange' event which we listen to to re-trigger the\n    // 'closed' event.\n    if (this._midiOutput) {\n      await this._midiOutput.close();\n    } else {\n      await Promise.resolve();\n    }\n\n  }\n\n  /**\n   * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\n   * sent immediately. The message should be an array of 8 bit unsigned integers (0-225) or a\n   * [Uint8Array]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n   * object.\n   *\n   * Note that **you cannot use a\n   * [Uint8Array]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n   * parameter in the Node.js environment**. This is because the MIDI submodule used in Node.js\n   * ([JZZ.js]{@link https://www.npmjs.com/package/jzz}) does not support it.\n   *\n   * It is usually not necessary to use this method directly as you can use one of the simpler\n   * helper methods such as [playNote()`, `stopNote()`, `sendControlChange()`, etc.\n   *\n   * Details on the format of MIDI messages are available in the summary of\n   * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}\n   * from the MIDI Manufacturers Association.\n   *\n   * @param message {number[]|Uint8Array} An array of 8bit unsigned integers or a `Uint8Array`\n   * object (not available in Node.js) containing the message bytes. Depending on the type of\n   * message, one to three bytes will be used.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a positive\n   * number\n   * ([DOMHighResTimeStamp]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that point time. If `time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.\n   *\n   * @throws {RangeError} Data bytes must be integers between 0 and 255.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  send(message, options = {time: 0}, legacy = undefined) {\n\n    if (WebMidi.validation) {\n\n      // If message is neither an array nor a Uint8Array, then we are in legacy mode\n      if (!Array.isArray(message) && !(message instanceof Uint8Array)) {\n        message = [message];\n        if (Array.isArray(options)) message = message.concat(options);\n        options = legacy ? {time: legacy} : {time: 0};\n      }\n\n      if (!(parseInt(message[0]) >= 128 && parseInt(message[0]) <= 255)) {\n        throw new RangeError(\"The first byte (status) must be an integer between 128 and 255.\");\n      }\n\n      message.slice(1).forEach(value => {\n        value = parseInt(value);\n        if (!(value >= 0 && value <= 255)) {\n          throw new RangeError(\"Data bytes must be integers between 0 and 255.\");\n        }\n      });\n\n      if (!options) options = {time: 0};\n\n    }\n\n    // Send message and return `Output` for chaining\n    this._midiOutput.send(message, Utilities.toTimestamp(options.time));\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI [system exclusive]{@link\n    * https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages}\n   * (*sysex*) message. The generated message will automatically be prepended with the *sysex byte*\n   * (0xF0) and terminated with the *end of sysex byte* (0xF7).\n   *\n   * To use the `sendSysex()` method, system exclusive message support must have been enabled. To\n   * do so, you must set the `sysex` option to `true` when calling `WebMidi.enable()`:\n   *\n   * ```js\n   * WebMidi.enable({sysex: true})\n   *   .then(() => console.log(\"System exclusive messages are enabled\");\n   * ```\n   *\n   * Note that, depending on browser, version and platform, it is generally necessary to serve the\n   * page over HTTPS to enable sysex support.\n   *\n   * ##### Examples\n   *\n   * If you want to send a sysex message to a Korg device connected to the first output, you would\n   * use the following code:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(0x42, [0x1, 0x2, 0x3, 0x4, 0x5]);\n   * ```\n   *\n   * The parameters can be specified using any number notation (decimal, hex, binary, etc.).\n   * Therefore, the code below is equivalent to the code above:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(66, [1, 2, 3, 4, 5]);\n   * ```\n   *\n   * The above code sends the byte values 1, 2, 3, 4 and 5 to Korg devices (hex 42 is the same as\n   * decimal 66).\n   *\n   * Some manufacturers are identified using 3 bytes. In this case, you would use a 3-position array\n   * as the first parameter. For example, to send the same sysex message to a\n   * *Native Instruments* device:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex([0x00, 0x21, 0x09], [0x1, 0x2, 0x3, 0x4, 0x5]);\n   * ```\n   * There is no limit for the length of the data array. However, it is generally suggested to keep\n   * system exclusive messages to 64Kb or less.\n   *\n   * @param manufacturer {number|number[]} An unsigned integer or an array of three unsigned\n   * integers between 0 and 127 that identify the targeted manufacturer. The *MIDI Manufacturers\n   * Association* maintains a full list of\n   * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers)\n   * .\n   *\n   * @param [data=number[]] {Array} An array of unsigned integers between 0 and 127. This is the\n   * data you wish to transfer.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {DOMException} Failed to execute 'send' on 'MIDIOutput': System exclusive message is\n   * not allowed.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index x is greater\n   * than 0xFF.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendSysex(manufacturer, data, options = {}) {\n\n    // Merging Uint8Arrays\n    // var arrayOne = new Uint8Array([2,4,8]);\n    // var arrayTwo = new Uint8Array([16,32,64]);\n    //\n    // var mergedArray = new Uint8Array(arrayOne.length + arrayTwo.length);\n    // mergedArray.set(arrayOne);\n    // mergedArray.set(arrayTwo, arrayOne.length);\n\n    manufacturer = [].concat(manufacturer);\n\n    data = manufacturer.concat(data, WebMidi.MIDI_SYSTEM_MESSAGES.sysexend);\n    this.send([WebMidi.MIDI_SYSTEM_MESSAGES.sysex].concat(data), {time: options.time});\n\n    return this;\n\n  };\n\n  /**\n   * Clears all messages that have been queued but not yet delivered.\n   *\n   * Warning: this method has been defined in the specification but has not been implemented yet. As\n   * soon as browsers implement it, it will work.\n   *\n   * You can check out the current status of this feature for Chromium (Chrome) here:\n   * https://bugs.chromium.org/p/chromium/issues/detail?id=471798\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  clear() {\n\n    if (this._midiOutput.clear) {\n\n      this._midiOutput.clear();\n\n    } else {\n\n      if (WebMidi.validation) {\n        console.warn(\n          \"The 'clear()' method has not yet been implemented in your environment.\"\n        );\n      }\n\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **timecode quarter frame** message. Please note that no processing is being done\n   * on the data. It is up to the developer to format the data according to the\n   * [MIDI Timecode](https://en.wikipedia.org/wiki/MIDI_timecode) format.\n   *\n   * @param value {number} The quarter frame message content (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendTimecodeQuarterFrame(value, options = {}) {\n\n    if (WebMidi.validation) {\n      value = parseInt(value);\n      if (isNaN(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The value must be an integer between 0 and 127.\");\n      }\n    }\n\n    this.send(\n      [\n        WebMidi.MIDI_SYSTEM_MESSAGES.timecode,\n        value\n      ],\n      {time: options.time}\n    );\n\n    return this;\n\n  };\n\n  /**\n   * Sends a **ong position** MIDI message. The value is expressed in MIDI beats (between 0 and\n   * 16383) which are 16th note. Position 0 is always the start of the song.\n   *\n   * @param [value=0] {number} The MIDI beat to cue to (integer between 0 and 16383).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setSongPosition(value, options = {}) {\n\n    value = Math.floor(value) || 0;\n\n    var msb = (value >> 7) & 0x7F;\n    var lsb = value & 0x7F;\n\n    this.send(\n      [\n        WebMidi.MIDI_SYSTEM_MESSAGES.songposition,\n        msb,\n        lsb\n      ],\n      {time: options.time}\n    );\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendSongPosition(value, options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendSongPosition() method has been deprecated. Use setSongPosition() instead.\"\n      );\n    }\n\n    return this.setSongPosition(value, options);\n\n  }\n\n  /**\n   * Sends a **song select** MIDI message.\n   *\n   * **Note**: since version 3.0, the song number is an integer between 1 and 128. In versions 1.0\n   * and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices that\n   * use a numbering scheme starting at 1.\n   *\n   * @param value {number} The number of the song to select (integer between 1 and 128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws The song number must be between 1 and 128.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setSong(value, options = {}) {\n\n    if (WebMidi.validation) {\n\n      value = parseInt(value);\n\n      if (isNaN(value) || !(value >= 1 && value <= 128)) {\n        throw new RangeError(\"The program value must be between 1 and 128\");\n      }\n\n    }\n\n    this.send(\n      [\n        WebMidi.MIDI_SYSTEM_MESSAGES.songselect,\n        value\n      ],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendSongSelect(value, options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendSongSelect() method has been deprecated. Use setSong() instead.\"\n      );\n    }\n\n    return this.setSong(value, options);\n\n  }\n\n  /**\n   * Sends a MIDI **tune request** real-time message.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendTuneRequest(options = {}) {\n\n    this.send(\n      [WebMidi.MIDI_SYSTEM_MESSAGES.tunerequest],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **clock* real-time message. According to the standard, there are 24 MIDI Clocks\n   * for every quarter note.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendClock(options = {}) {\n\n    this.send(\n      [WebMidi.MIDI_SYSTEM_MESSAGES.clock],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **start** real-time message. A MIDI Start message starts the playback of the current\n   * song at beat 0. To start playback elsewhere in the song, use the\n   * [sendContinue()]{@link Output#sendContinue} method.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendStart(options = {}) {\n\n    this.send(\n      [WebMidi.MIDI_SYSTEM_MESSAGES.start],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **continue** real-time message. This resumes song playback where it was previously\n   * stopped or where it was last cued with a song position message. To start playback from the\n   * start, use the [sendStart()]{@link Output#sendStart}` method.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendContinue(options = {}) {\n\n    this.send(\n      [WebMidi.MIDI_SYSTEM_MESSAGES.continue],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **stop** real-time message. This tells the device connected to this output to stop\n   * playback immediately (or at the scheduled time).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendStop(options = {}) {\n\n    this.send(\n      [WebMidi.MIDI_SYSTEM_MESSAGES.stop],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **active sensing** real-time message. This tells the device connected to this port\n   * that the connection is still good. Active sensing messages should be sent every 300 ms if there\n   * was no other activity on the MIDI port.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendActiveSensing(options = {}) {\n\n    this.send(\n      [WebMidi.MIDI_SYSTEM_MESSAGES.activesensing],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **reset** real-time message. This tells the device connected to this output that it\n   * should reset itself to a default state.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendReset(options = {}) {\n\n    this.send(\n      [WebMidi.MIDI_SYSTEM_MESSAGES.reset],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendTuningRequest(options = {}) {\n\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead.\"\n      );\n    }\n\n    return this.sendTuneRequest(options);\n\n  }\n\n  /**\n   * Sends a MIDI **key aftertouch** message to the specified channel(s) at the scheduled time. This\n   * is a key-specific aftertouch. For a channel-wide aftertouch message, use\n   * [setChannelAftertouch()]{@link Output#setChannelAftertouch}.\n   *\n   * @param note {number|string|Array}  The note for which you are sending an aftertouch value. The\n   * notes can be specified in one of two ways. The first way is by using the MIDI note number (an\n   * integer between 0 and 127). The second way is by using the note name followed by the octave\n   * (C3, G#4, F-1, Db7). The octave range should be between -1 and 9. The lowest note is C-1 (MIDI\n   * note number 0) and the highest note is G9 (MIDI note number 127). It is also possible to use\n   * an array of note names and/or numbers.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setKeyAftertouch(note, pressure, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(pressure) || Number.isInteger(pressure) || pressure === \"all\") {\n        let channels = pressure;\n        pressure = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setKeyAftertouch(note, pressure, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendKeyAftertouch(note, channel, pressure, options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendKeyAftertouch() method has been deprecated. Use setKeyAftertouch() instead.\"\n      );\n    }\n\n    options.channels = channel;\n    return this.setKeyAftertouch(note, pressure, options);\n\n  }\n\n  /**\n   * Sends a MIDI **control change** message to the specified channel(s) at the scheduled time. The\n   * control change message to send can be specified numerically or by using one of the following\n   * common names:\n   *\n   *  * `bankselectcoarse` (#0)\n   *  * `modulationwheelcoarse` (#1)\n   *  * `breathcontrollercoarse` (#2)\n   *  * `footcontrollercoarse` (#4)\n   *  * `portamentotimecoarse` (#5)\n   *  * `dataentrycoarse` (#6)\n   *  * `volumecoarse` (#7)\n   *  * `balancecoarse` (#8)\n   *  * `pancoarse` (#10)\n   *  * `expressioncoarse` (#11)\n   *  * `effectcontrol1coarse` (#12)\n   *  * `effectcontrol2coarse` (#13)\n   *  * `generalpurposeslider1` (#16)\n   *  * `generalpurposeslider2` (#17)\n   *  * `generalpurposeslider3` (#18)\n   *  * `generalpurposeslider4` (#19)\n   *  * `bankselectfine` (#32)\n   *  * `modulationwheelfine` (#33)\n   *  * `breathcontrollerfine` (#34)\n   *  * `footcontrollerfine` (#36)\n   *  * `portamentotimefine` (#37)\n   *  * `dataentryfine` (#38)\n   *  * `volumefine` (#39)\n   *  * `balancefine` (#40)\n   *  * `panfine` (#42)\n   *  * `expressionfine` (#43)\n   *  * `effectcontrol1fine` (#44)\n   *  * `effectcontrol2fine` (#45)\n   *  * `holdpedal` (#64)\n   *  * `portamento` (#65)\n   *  * `sustenutopedal` (#66)\n   *  * `softpedal` (#67)\n   *  * `legatopedal` (#68)\n   *  * `hold2pedal` (#69)\n   *  * `soundvariation` (#70)\n   *  * `resonance` (#71)\n   *  * `soundreleasetime` (#72)\n   *  * `soundattacktime` (#73)\n   *  * `brightness` (#74)\n   *  * `soundcontrol6` (#75)\n   *  * `soundcontrol7` (#76)\n   *  * `soundcontrol8` (#77)\n   *  * `soundcontrol9` (#78)\n   *  * `soundcontrol10` (#79)\n   *  * `generalpurposebutton1` (#80)\n   *  * `generalpurposebutton2` (#81)\n   *  * `generalpurposebutton3` (#82)\n   *  * `generalpurposebutton4` (#83)\n   *  * `reverblevel` (#91)\n   *  * `tremololevel` (#92)\n   *  * `choruslevel` (#93)\n   *  * `celestelevel` (#94)\n   *  * `phaserlevel` (#95)\n   *  * `databuttonincrement` (#96)\n   *  * `databuttondecrement` (#97)\n   *  * `nonregisteredparametercoarse` (#98)\n   *  * `nonregisteredparameterfine` (#99)\n   *  * `registeredparametercoarse` (#100)\n   *  * `registeredparameterfine` (#101)\n   *\n   * Note: as you can see above, not all control change message have a matching common name. This\n   * does not mean you cannot use the others. It simply means you will need to use their number\n   * (0-119) instead of their name. Numbers 120 to 127 are reserved for *channel mode* messages. See\n   * [sendChannelMode()]{@link Output#sendChannelMode} method for more info.\n   *\n   * To view a list of all available `control change` messages, please consult \"Table 3 - Control\n   * Change Messages\" from the [MIDI Messages](\n   * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)\n   * specification.\n   *\n   * @param controller {number|string} The MIDI controller name or number (0-119).\n   *\n   * @param [value=0] {number} The value to send (0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 119.\n   * @throws {RangeError} Invalid controller name.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendControlChange(controller, value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendControlChange(controller, value, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a pitch bend range message to the specified channel(s) at the scheduled time so that they\n   * adjust the range used by their pitch bend lever. The range is specified by using the\n   * `semitones` and `cents` parameters. For example, setting the `semitones` parameter to `12`\n   * means that the pitch bend range will be 12 semitones above and below the nominal pitch.\n   *\n   * @param semitones {number} The desired adjustment value in semitones (between 0 and 127). While\n   * nothing imposes that in the specification, it is very common for manufacturers to limit the\n   * range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127.\n   * @throws {RangeError} The lsb value must be between 0 and 127.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setPitchBendRange(semitones, cents, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setPitchBendRange(semitones, cents, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data (msb, lsb) that each can go from 0 to 127.\n   *\n   * MIDI\n   * [registered parameters]\n   * (https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n   * limited number of them. Here are the original registered parameters with the identifier that\n   * can be used as the first parameter of this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *\n   * Note that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * Another set of extra parameters have been later added for 3D sound controllers. They are:\n   *\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {string|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n   * registered parameter.\n   *\n   * @param [data=[]] {number|number[]} A single integer or an array of integers with a maximum\n   * length of 2 specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  setRegisteredParameter(parameter, data, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setRegisteredParameter(parameter, data, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel aftertouch** message to the specified channel(s). For key-specific\n   * aftertouch, you should instead use [setKeyAftertouch()]{@link Output#setKeyAftertouch}.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   * @since 3.0.0\n   */\n  setChannelAftertouch(pressure, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setChannelAftertouch(pressure, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendChannelAftertouch(pressure, channel, options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendChannelAftertouch() method has been deprecated. Use setChannelAftertouch().\"\n      );\n    }\n\n    options.channels = channel;\n    return this.setChannelAftertouch(pressure, options);\n\n  }\n\n  /**\n   * Sends a MIDI **pitch bend** message to the specified channel(s) at the scheduled time.\n   *\n   * @param {number|number[]} value The intensity of the bend (between -1.0 and 1.0). A value of\n   * zero means no bend. The resulting bend is relative to the pitch bend range that has been\n   * defined. The range can be set with [setPitchBendRange()]{@link OutputChannel#setPitchBendRange}\n   * . So, for example, if the pitch bend range has been set to 12 semitones, using a bend value of\n   * -1 will bend the note 1 octave below its nominal value.\n   *\n   * If an invalid value is specified, the nearest valid value will be used instead.\n   *\n   * If the `rawValue` option is set to `true`, the intensity of the bend can be defined by either\n   * using a single integer between 0 and 127 (MSB) or an array of two integers between 0 and 127\n   * representing, respectively, the MSB (most significant byte) and the LSB (least significant\n   * byte). The MSB is expressed in semitones with `64` meaning no bend. A value lower than `64`\n   * bends downwards while a value higher than `64` bends upwards. The LSB is expressed in cents\n   * (1/100 of a semitone). An LSB of `64` also means no bend.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered as a float between -1.0 and 1.0 (default) or as raw integer between 0 and 127 (or\n   * an array of 2 integers if using both MSB and LSB).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setPitchBend(value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setPitchBend(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendPitchBend(bend, channel, options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendPitchBend() method has been deprecated. Use setPitchBend() instead.\"\n      );\n    }\n\n    options.channels = channel;\n    return this.setPitchBend(bend, options);\n\n  }\n\n  /**\n   * Sends a MIDI **program change** message to the specified channel(s) at the scheduled time.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param [program=1] {number} The MIDI patch (program) number (1-128)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n   * than 0xFF.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setProgram(program, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setProgram(program, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendProgramChange(program, channel, options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendProgramChange() method has been deprecated. Use setProgram() instead.\"\n      );\n    }\n\n    options.channels = channel;\n    return this.setProgram(program, options);\n\n  }\n\n  /**\n   * Sends a **modulation depth range** message to the specified channel(s) so that they adjust the\n   * depth of their modulation wheel's range. The range can be specified with the `semitones`\n   * parameter, the `cents` parameter or by specifying both parameters at the same time.\n   *\n   * @param [semitones=0] {number} The desired adjustment value in semitones (integer between\n   * 0 and 127).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127\n   * @throws {RangeError} The lsb value must be between 0 and 127\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setModulationRange(semitones, cents, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setModulationRange(semitones, cents, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a master tuning message to the specified channel(s). The value is decimal and must be\n   * larger than -65 semitones and smaller than 64 semitones.\n   *\n   * Because of the way the MIDI specification works, the decimal portion of the value will be\n   * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n   * a **Master Fine Tuning** RPN messages.\n   *\n   * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setMasterTuning(value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setMasterTuning(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning program (1-128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 1 and 128.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setTuningProgram(value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setTuningProgram(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the bank number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning bank (1-128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 1 and 128.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setTuningBank(value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setTuningBank(value, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a MIDI **channel mode** message to the specified channel(s). The channel mode message to\n   * send can be specified numerically or by using one of the following common names:\n   *\n   *   * `\"allsoundoff\"` (#120)\n   *   * `\"resetallcontrollers\"` (#121)\n   *   * `\"localcontrol\"` (#122)\n   *   * `\"allnotesoff\"` (#123)\n   *   * `\"omnimodeoff\"` (#124)\n   *   * `\"omnimodeon\"` (#125)\n   *   * `\"monomodeon\"` (#126)\n   *   * `\"polymodeon\"` (#127)\n   *\n   * It should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may\n   * require a value that's not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * To make it easier, all channel mode messages have a matching helper method:\n   *\n   *   - [turnSoundOff()]{@link OutputChannel#turnSoundOff}\n   *   - [resetAllControllers()]{@link OutputChannel#resetAllControllers}\n   *   - [setLocalControl()]{@link OutputChannel#turnSoundOff}\n   *   - [turnNotesOff()]{@link OutputChannel#turnNotesOff}\n   *   - [setOmniMode()]{@link OutputChannel#setOmniMode}\n   *   - [setPolyphonicMode()]{@link OutputChannel#setPolyphonicMode}\n   *\n   * @param command {number|string} The numerical identifier of the channel mode message (integer\n   * between 120-127) or its name as a string.\n   *\n   * @param [value] {number} The value to send (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   */\n  sendChannelMode(command, value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendChannelMode(command, value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n   * channel but will not prevent new sounds from being triggered.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   *\n   * @since 3.0.0\n   */\n  turnSoundOff(options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].turnSoundOff(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **all notes off** channel mode message. This will make all currently playing notes\n   * fade out just as if their key had been released. This is different from the\n   * [turnSoundOff()]{@link Output#turnSoundOff} method which mutes all sounds immediately.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   *\n   * @since 3.0.0\n   */\n  turnNotesOff(options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].turnNotesOff(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n   * the pitch bend, to their default value.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   */\n  resetAllControllers(options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].resetAllControllers(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the polyphonic mode. In `\"poly\"` mode (usually the default), multiple notes can be played\n   * and heard at the same time. In `\"mono\"` mode, only one note will be heard at once even if\n   * multiple notes are being played.\n   *\n   * @param mode {string} The mode to use: `\"mono\"` or `\"poly\"`.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setPolyphonicMode(mode, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setPolyphonicMode(mode, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n   * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n   * its out port.\n   *\n   * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n   * (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setLocalControl(state, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setLocalControl(state, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets OMNI mode to `\"on\"` or `\"off\"` for the specified channel(s). MIDI's OMNI mode causes the\n   * instrument to respond to messages from all channels.\n   *\n   * It should be noted that support for OMNI mode is not as common as it used to be.\n   *\n   * @param [state] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setOmniMode(state, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setOmniMode(state, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets a non-registered parameter to the specified value. The NRPN is selected by passing in a\n   * two-position array specifying the values of the two control bytes. The value is specified by\n   * passing in a single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you\n   * would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].setNonRegisteredParameter([1, 8], 123);\n   * ```\n   *\n   * Obviously, you should select a channel so the message is not sent to all channels. For\n   * instance, to send to channel 1 of the first output port, you would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].setNonRegisteredParameter([1, 8], 123, 1);\n   * ```\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was 10, you could use:\n   *\n   * ```js\n   * WebMidi.outputs[0].setNonRegisteredParameter([2, 63], [0, 10], [1]);\n   * ```\n   *\n   * For further implementation details, refer to the manufacturer\"s documentation.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes (0x63,\n   * 0x62) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The control value must be between 0 and 127.\n   * @throws {RangeError} The msb value must be between 0 and 127\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  setNonRegisteredParameter(parameter, data, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].setNonRegisteredParameter(parameter, data, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this method:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  incrementRegisteredParameter(parameter, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].incrementRegisteredParameter(parameter, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this method:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter\"s name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified parameter is not available.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  decrementRegisteredParameter(parameter, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].decrementRegisteredParameter(parameter, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified notes on the specified channel(s). The first\n   * parameter is the note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   *  The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the release velocity defined in the {@link Note} objects has\n   * precedence over the one specified via the method's `options` parameter.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {boolean} [options.rawValue=false] Controls whether the release velocity is set using\n   * integers between `0` and `127` (`true`) or a decimal number between `0` and `1` (`false`,\n   * default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNoteOff(note, options= {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendNoteOff(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * This is an alias to the [sendNoteOff()]{@link Output#sendNoteOff} method.\n   *\n   * @see {@link Output#sendNoteOff}\n   *\n   * @param note\n   * @param options\n   * @returns {Output}\n   */\n  stopNote(note, options) {\n    return this.sendNoteOff(note, options);\n  }\n\n  /**\n   * Plays a note or an array of notes on one or more channels of this output. The first parameter\n   * is the note to play. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   * The `playNote()` method sends a **note on** MIDI message for all specified notes on all\n   * specified channels. If no channels are specified, it will send to all channels. If a `duration`\n   * is set in the `options` parameter or in the {@link Note} object's\n   * [duration]{@link Note#duration} property, it will also schedule a **note off** message to end\n   * the note after said duration. If no `duration` is set, the note will simply play until a\n   * matching **note off** message is sent with [stopNote()]{@link Output#stopNote} or\n   * [sendNoteOff()]{@link Output#sendNoteOff}.\n   *\n   * The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the durations and velocities defined in the {@link Note}\n   * objects have precedence over the ones specified via the method's `options` parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to play the note on. The special value `\"all\"` can\n   * also be used to use all channels (default).\n   *\n   * @param {number} [options.duration=undefined] The number of milliseconds (integer) after which a\n   * **note off** message will be scheduled. If left undefined, only a **note on** message is sent.\n   *\n   * @param {boolean} [options.rawValue=false] Controls whether the attack and release velocities\n   * are set using integers between `0` and `127` (`true`) or a decimal number between `0` and `1`\n   * (`false`, default).\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   * This is only used with the **note off** event triggered when `options.duration` is set.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The attack velocity to use when playing the note (between\n   * `0` and `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  playNote(note, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy-compatibility warnings\n      if (options.rawVelocity) {\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' instead.\");\n      }\n\n      if (options.velocity) {\n        console.warn(\"The 'velocity' option is deprecated. Use 'velocity' instead.\");\n      }\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].playNote(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note on** message for the specified notes on the specified channel(s). The first\n   * parameter is the note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the attack velocity defined in the {@link Note} objects has\n   * precedence over the one specified via the method's `options` parameter. Also, the `duration` is\n   * ignored. If you want to also send a **note off** message, use the\n   * [playNote()]{@link Output#playNote} method instead.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]|\"all\"} [options.channels=\"all\"] The MIDI channel number (between `1`\n   * and `16`) or an array of channel numbers to use. The special value `\"all\"` can also be used to\n   * use all channels (default).\n   *\n   * @param {boolean} [options.rawValue=false] Controls whether the attack velocity is set using\n   * integers between `0` and `127` (`true`) or a decimal number between `0` and `1` (`false`,\n   * default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNoteOn(note, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        let channels = options;\n        options = legacy;\n        options.channels = channels;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = \"all\";\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendNoteOn(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Name of the MIDI output\n   *\n   * @type {string}\n   * @readonly\n   */\n  get name() {\n    return this._midiOutput.name;\n  }\n\n  /**\n   * ID string of the MIDI output. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiOutput.id;\n  }\n\n  /**\n   * Output port's connection state: `\"pending\"`, `\"open\"` or `\"closed\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiOutput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this output port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiOutput.manufacturer;\n  }\n\n  /**\n   * State of the output port: `\"connected\"` or `\"disconnected\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiOutput.state;\n  }\n\n  /**\n   * Type of the output port (`\"output\"`)\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiOutput.type;\n  }\n\n  /**\n   * An integer to offset the octave of outgoing notes. By default, middle C (MIDI note number 60)\n   * is placed on the 4th octave (C4).\n   *\n   * Note that this value is combined with the global offset value defined on the `WebMidi` object\n   * (if any).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n}\n","import {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/**\n * The `Message` class represents a single MIDI message. It has several properties that make it\n * easy to make sense of the binaru data it contains.\n *\n * @param {Uint8Array} data The raw data of the MIDI message as a Uint8Array of integers between 0\n * and 255.\n *\n * @since 3.0.0\n */\nexport class Message {\n\n  constructor(data) {\n\n    /**\n     * A Uint8Array containing the 1, 2 or 3 byte(s) of the MIDI message. Each byte is an integer\n     * between 0 and 255.\n     * @type {Uint8Array}\n     * @readonly\n     */\n    this.rawData = data;\n\n    /**\n     * An array containing the 1, 2 or 3 unsigned integers of the MIDI message. Each integer is\n     * between 0 and 255.\n     * @type {number[]}\n     * @readonly\n     */\n    this.data = Array.from(this.rawData);\n\n    /**\n     * The MIDI status byte of the message as an integer between 0 and 255.\n     * @type {number}\n     * @readonly\n     */\n    this.statusByte = this.rawData[0];\n\n    /**\n     * An array of 0, 1 or 2 unsigned integer(s) (0-127) representing the data byte(s) of the MIDI\n     * message.\n     * @type {number[]}\n     * @readonly\n     */\n    this.dataBytes = [];\n\n    /**\n     * A boolean indicating whether the MIDI message is a channel-specific message.\n     * @type {boolean}\n     * @readonly\n     */\n    this.channelMessage = false;\n\n    /**\n     * A boolean indicating whether the MIDI message is a channel mode message (a special type of\n     * control message).\n     * @type {boolean}\n     * @readonly\n     */\n    this.channelModeMessage = false;\n\n    /**\n     * A boolean indicating whether the MIDI message is a system message (not specific to a\n     * channel).\n     * @type {boolean}\n     * @readonly\n     */\n    this.systemMessage = false;\n\n    /**\n     * An integer identifying the MIDI command. For channel-specific messages, the value will be\n     * between 8 and 14. For system messages, the value will be between 240 and 255.\n     * @type {number}\n     * @readonly\n     */\n    this.command = undefined;\n\n    /**\n     * The MIDI channel number that the message is targeting. For system messages, this will be\n     * undefined.\n     * @type {number}\n     * @readonly\n     */\n    this.channel = undefined;\n\n\n    // Assign values to property that vary according to whether they are channel-specific or system\n    if (this.statusByte < 240) {\n\n      this.channelMessage = true;\n      this.command = this.statusByte >> 4;\n      this.channel = (this.statusByte & 0b00001111) + 1;\n    console.log(data, this.command);\n\n      if (\n        this.command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.controlchange &&\n        this.dataBytes[0] >= 120\n      ) {\n        this.channelModeMessage = true;\n      }\n\n    } else {\n      this.systemMessage = true;\n      this.command = this.statusByte;\n    }\n\n    // Now that the command is ready, we can extract data bytes for all messages except sysex\n    if (this.command !== WebMidi.MIDI_SYSTEM_MESSAGES.sysex) this.dataBytes = this.data.slice(1);\n\n    // Identify the exact type of message\n    if (this.channelModeMessage) {\n\n      this.type = Utilities.getKeyByValue(WebMidi.MIDI_CHANNEL_MODE_MESSAGES, this.dataBytes[0]);\n\n      // for (let value in WebMidi.MIDI_CHANNEL_MODE_MESSAGES) {\n      //   if (WebMidi.MIDI_CHANNEL_MODE_MESSAGES[value] === this.dataBytes[0]) {\n      //     this.type = value;\n      //     break;\n      //   }\n      // }\n\n    } else if (this.channelMessage) {\n\n      this.type = Utilities.getKeyByValue(WebMidi.MIDI_CHANNEL_VOICE_MESSAGES, this.command);\n\n      // for (let value in WebMidi.MIDI_CHANNEL_VOICE_MESSAGES) {\n      //   if (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES[value] === this.command) {\n      //     this.type = value;\n      //     break;\n      //   }\n      // }\n\n    } else if (this.systemMessage) {\n\n      this.type = Utilities.getKeyByValue(WebMidi.MIDI_SYSTEM_MESSAGES, this.command);\n\n      // for (let value in WebMidi.MIDI_SYSTEM_MESSAGES) {\n      //   if (WebMidi.MIDI_SYSTEM_MESSAGES[value] === this.command) {\n      //     this.type = value;\n      //     break;\n      //   }\n      // }\n\n    }\n\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {Input} from \"./Input.js\";\nimport {Output} from \"./Output.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/*START-NODE.JS*/\n// This block of code is only relevant on Node.js and causes issues with bundlers (such as Webpack)\n// and server-side rendering. This is why it is explicitly being stripped off for the IIFE and ESM\n// distributions.\nglobal[\"performance\"] = require(\"perf_hooks\").performance;\nglobal[\"navigator\"] = require(\"jzz\");\n/*END-NODE.JS*/\n\n/**\n * The `WebMidi` object makes it easier to work with the Web MIDI API. Basically, it simplifies\n * sending outgoing MIDI messages and reacting to incoming MIDI messages.\n *\n * When using the WebMidi.js library, the `WebMidi` class has already been instantiated for you.\n * If you use the **IIFE** version, you should simply use the global object called `WebMidi`. If you\n * use the **CJS** (CommonJS) or **ESM** (ES6 module) version, you get an already-instantiated\n * object. This means there is no need to instantiate a new `WebMidi` object directly.\n *\n * The `WebMidi` object extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [addListener()](https://djipco.github.io/djipevents/EventEmitter.html#addListener),\n * [removeListener()](https://djipco.github.io/djipevents/EventEmitter.html#removeListener),\n * [hasListener()](https://djipco.github.io/djipevents/EventEmitter.html#hasListener) and several\n * others.\n *\n * @fires WebMidi#connected\n * @fires WebMidi#disabled\n * @fires WebMidi#disconnected\n * @fires WebMidi#enabled\n * @fires WebMidi#midiaccessgranted\n *\n * @extends EventEmitter\n */\nclass WebMidi extends EventEmitter {\n\n  constructor() {\n\n    super();\n\n    /**\n     * Object containing system-wide default values that can be changed to customize how the library\n     * works.\n     *\n     * @type {Object}\n     *\n     * @property {object}  defaults.note - Default values relating to note\n     * @property {number}  defaults.note.attack - A number between 0 and 127 representing the\n     * default attack velocity of notes. Initial value is 64.\n     * @property {number}  defaults.note.release - A number between 0 and 127 representing the\n     * default release velocity of notes. Initial value is 64.\n     * @property {number}  defaults.note.duration - A number representing the default duration of\n     * notes (in seconds). Initial value is Infinity.\n     */\n    this.defaults = {\n      note: {\n        attack: Utilities.toNormalized(64),\n        release: Utilities.toNormalized(64),\n        duration: Infinity\n      }\n    };\n\n    /**\n     * The `MIDIAccess` instance used to talk to the Web MIDI API. This should not be used directly\n     * unless you know what you are doing.\n     *\n     * @type {?MIDIAccess}\n     * @readonly\n     */\n    this.interface = null;\n\n    /**\n     * Indicates whether argument validation and backwards-compatibility checks are performed\n     * throughout the WebMidi.js library for object methods and property setters.\n     *\n     * This is an advanced setting that should be used carefully. Setting `validation` to `false`\n     * improves performance but should only be done once the project has been thoroughly tested with\n     * validation turned on.\n     *\n     * @type {boolean}\n     */\n    this.validation = true;\n\n    /**\n     * Array of all {@link Input} objects\n     * @type {Input[]}\n     * @private\n     */\n    this._inputs = [];\n\n    /**\n     * Array of all {@link Output} objects\n     * @type {Output[]}\n     * @private\n     */\n    this._outputs = [];\n\n    /**\n     * Array of statechange events to process. These events must be parsed synchronously so they do\n     * not override each other.\n     *\n     * @type {string[]}\n     * @private\n     */\n    this._stateChangeQueue = [];\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n  }\n\n  /**\n   * Checks if the Web MIDI API is available in the current environment and then tries to connect to\n   * the host's MIDI subsystem. This is an asynchronous operation and it causes a security prompt to\n   * be displayed to the user.\n   *\n   * To enable the use of MIDI system exclusive messages, the `sysex` option should be set to\n   * `true`. However, under some environments (e.g. Jazz-Plugin), the `sysex` option is ignored\n   * and system exclusive messages are always enabled. You can check the\n   * [sysexEnabled]{@link WebMidi#sysexEnabled} property to confirm.\n   *\n   * To enable access to software synthesizers available on the host, you would set the `software`\n   * option to `true`. However, this option is only there to future-proof the library as support for\n   * software synths has not yet been implemented in any browser (as of September 2021).\n   *\n   * There are 3 ways to execute code after `WebMidi` has been enabled:\n   *\n   * - Pass a callback function in the `options`\n   * - Listen to the `enabled` event\n   * - Wait for the promise to resolve\n   *\n   * In order, this is what happens towards the end of the enabling process:\n   *\n   * 1. `midiaccessgranted` event is triggered\n   * 2. `connected` events are triggered (for each available input and output)\n   * 3. `enabled` event is triggered when WebMidi.js is ready\n   * 4. specified callback (if any) is executed\n   * 5. promise is resolved\n   *\n   * The promise is fulfilled with the WebMidi object.\n   *\n   * **Important note**: starting with Chrome v77, a page using Web MIDI API must be hosted on a\n   * secure origin (`https://`, `localhost` or `file:///`) and the user will always be prompted to\n   * authorize the operation (no matter if the `sysex` option is `true` or not).\n   *\n   * ##### Example\n   * ```js\n   * // Enabling WebMidi and using the promise\n   * WebMidi.enable().then(ports => {\n   *   console.log(\"WebMidi.js has been enabled!\");\n   *   console.log(\"Inputs: \", ports.inputs);\n   *   console.log(\"Outputs: \", ports.outputs);\n   * })\n   * ```\n   *\n   * @param [options] {Object}\n   *\n   * @param [options.callback] {function} A function to execute once the operation completes. This\n   * function will receive an `Error` object if enabling the Web MIDI API failed.\n   *\n   * @param [options.sysex=false] {boolean} Whether to enable MIDI system exclusive messages or not.\n   *\n   * @param [options.validation=true] {boolean} Whether to enable library-wide validation of method\n   * arguments and setter values. This is an advanced setting that should be used carefully. Setting\n   * `validation` to `false` improves performance but should only be done once the project has been\n   * thoroughly tested with validation turned on.\n   *\n   * @param [options.software=false] {boolean} Whether to request access to software synthesizers on\n   * the host system. This is part of the spec but has not yet been implemented by most browsers as\n   * of April 2020.\n   *\n   * @async\n   *\n   * @returns {Promise<Object>} The promise is fulfilled with the `WebMidi` object\n   *\n   * @throws Error The Web MIDI API is not supported in your environment.\n   * @throws Error Jazz-Plugin must be installed to use WebMIDIAPIShim.\n   */\n  async enable(options = {}, legacy = false) {\n\n    this.validation = (options.validation !== false);\n\n    if (this.validation) {\n      // Backwards-compatibility. Previous syntax was: enable(callback, sysex)\n      if (typeof options === \"function\") options = {callback: options, sysex: legacy};\n      if (legacy) options.sysex = true;\n    }\n\n    // If already enabled, trigger callback and resolve promise but to not dispatch events\n    if (this.enabled) {\n      if (typeof options.callback === \"function\") options.callback();\n      return Promise.resolve();\n    }\n\n    // The Jazz-Plugin takes a while to be available (even after the Window's 'load' event has been\n    // fired). Therefore, we wait a little while to give it time to finish loading (initiqted in\n    // constructor).\n    // if (!this.supported) {\n    //\n    //   await new Promise((resolve, reject) => {\n    //\n    //     const start = this.time;\n    //\n    //     const intervalID = setInterval(() => {\n    //\n    //       if (this.supported) {\n    //         clearInterval(intervalID);\n    //         resolve();\n    //       } else {\n    //         if (this.time > start + 1500) {\n    //           clearInterval(intervalID);\n    //           let error = new Error(\"The Web MIDI API is not available in your environment.\");\n    //           if (typeof options.callback === \"function\") options.callback(error);\n    //           reject(error);\n    //         }\n    //       }\n    //\n    //     }, 25);\n    //\n    //   });\n    //\n    // }\n\n    /**\n     * Event emitted when an error occurs trying to enable `WebMidi`\n     *\n     * @event WebMidi#error\n     * @type {Object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `error`\n     * @property {*} error Actual error that occurred\n     */\n    const errorEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"error\",\n      error: undefined\n    };\n\n    /**\n     * Event emitted once the MIDI interface has been successfully created.\n     *\n     * @event WebMidi#midiaccessgranted\n     * @type {Object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `midiaccessgranted`\n     */\n    const midiAccessGrantedEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"midiaccessgranted\"\n    };\n\n    /**\n     * Event emitted once `WebMidi` has been fully enabled\n     *\n     * @event WebMidi#enabled\n     * @type {Object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `enabled`\n     */\n    const enabledEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"enabled\"\n    };\n\n    // Request MIDI access\n    try {\n      this.interface = await navigator.requestMIDIAccess(\n        {sysex: options.sysex, software: options.software}\n      );\n    } catch(err) {\n      errorEvent.error = err;\n      this.emit(\"error\", errorEvent);\n      if (typeof options.callback === \"function\") options.callback(err);\n      return Promise.reject(err);\n    }\n\n    // Now that the Web MIDI API interface has been created, we trigger the 'midiaccessgranted' event.\n    // This allows the developer an occasion to assign listeners on 'connected' events.\n    this.emit(\"midiaccessgranted\", midiAccessGrantedEvent);\n\n    // We setup the statechange listener before creating the ports so that it properly catches the\n    // the ports' `connected` events\n    this.interface.onstatechange = this._onInterfaceStateChange.bind(this);\n\n    // Update inputs and outputs (this is where `Input` and `Output` objects are created).\n    try {\n      await this._updateInputsAndOutputs();\n    } catch (err) {\n      errorEvent.error = err;\n      this.emit(\"error\", errorEvent);\n      if (typeof options.callback === \"function\") options.callback(err);\n      return Promise.reject(err);\n    }\n\n    // If the ports are successfully created, we trigger the 'enabled' event\n    this.emit(\"enabled\", enabledEvent);\n\n    // Execute the callback (if any) and resolve the promise with an object containing inputs and\n    // outputs\n    if (typeof options.callback === \"function\") options.callback();\n\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * Completely disables `WebMidi.js` by unlinking the MIDI subsystem's interface and closing all\n   * {@link Input} and {@link Output} objects that may be available. This also means that listeners\n   * added to {@link Input} objects, {@link Output} objects or to `WebMidi` itself are also\n   * destroyed.\n   *\n   * @async\n   * @returns {Promise<void>}\n   *\n   * @throws Error The Web MIDI API is not supported by your environment.\n   *\n   * @since 2.0.0\n   */\n  async disable() {\n\n    return this._destroyInputsAndOutputs().then(() => {\n\n      if (typeof navigator.close === \"function\") navigator.close();\n\n      if (this.interface) this.interface.onstatechange = undefined;\n      this.interface = null; // also resets enabled, sysexEnabled\n\n      /**\n       * Event emitted once `WebMidi` has been successfully disabled.\n       *\n       * @event WebMidi#disabled\n       * @type {Object}\n       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {WebMidi} target The object that triggered the event\n       * @property {string} type `disabled`\n       */\n      let event = {\n        timestamp: this.time,\n        target: this,\n        type: \"disabled\"\n      };\n\n      // Finally, trigger the 'disabled' event and then remove all listeners.\n      this.emit(\"disabled\", event);\n      this.removeListener();\n\n    });\n\n  };\n\n  /**\n   * Returns the {@link Input} object that matches the specified ID string or `false` if no matching\n   * input is found. As per the Web MIDI API specification, IDs are strings (not integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the input. IDs can be viewed by looking at the\n   * [inputs]{@link WebMidi#inputs} array. Even though they sometimes look like integers, IDs are\n   * strings.\n   *\n   * @returns {Input|false} An {@link Input} object matching the specified ID string. If no matching\n   * input can be found, the method returns `false`.\n   *\n   * @throws Error WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputById(id) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!id) return false;\n    }\n\n    for (let i = 0; i < this.inputs.length; i++) {\n      if (this.inputs[i].id === id.toString()) return this.inputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the first {@link Input} object whose name **contains** the specified string. Note that\n   * the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [inputs]{@link WebMidi#inputs} array).\n   *\n   * @returns {Input|false} The {@link Input} that was found or `false` if no input contained the\n   * specified name.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputByName(name) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!name) return false;\n      name = name.toString();\n    }\n\n    for (let i = 0; i < this.inputs.length; i++) {\n      if (~this.inputs[i].name.indexOf(name)) return this.inputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the first {@link Output} object whose name **contains** the specified string. Note that\n   * the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [outputs]{@link WebMidi#outputs} array).\n   *\n   * @returns {Output|false} The {@link Output} that was found or `false` if no output matched the\n   * specified name.\n   *\n   * @throws Error WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputByName(name) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!name) return false;\n      name = name.toString();\n    }\n\n    for (let i = 0; i < this.outputs.length; i++) {\n      if (~this.outputs[i].name.indexOf(name)) return this.outputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the {@link Output} object that matches the specified ID string or `false` if no\n   * matching output is found. As per the Web MIDI API specification, IDs are strings (not\n   * integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the port. IDs can be viewed by looking at the\n   * [outputs]{@link WebMidi#outputs} array.\n   *\n   * @returns {Output|false} An {@link Output} object matching the specified ID string. If no\n   * matching output can be found, the method returns `false`.\n   *\n   * @throws Error WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputById(id) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!id) return false;\n    }\n\n    for (let i = 0; i < this.outputs.length; i++) {\n      if (this.outputs[i].id === id.toString()) return this.outputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.toNoteNumber() instead.\n   */\n  noteNameToNumber(name) {\n    if (this.validation) {\n      console.warn(\n        \"The noteNameToNumber() method is deprecated. Use \" +\n        \"Utilities.toNoteNumber() instead.\"\n      );\n    }\n    return Utilities.toNoteNumber(name, this.octaveOffset);\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0, use Utilities.getNoteDetails() instead.\n   */\n  getOctave(number) {\n\n    if (this.validation) {\n      console.warn(\"The getOctave()is deprecated. Use Utilities.getNoteDetails() instead\");\n      number = parseInt(number);\n    }\n\n    if (!isNaN(number) && number >= 0 && number <= 127) {\n      return Utilities.getNoteDetails(Utilities.offsetNumber(number, this.octaveOffset)).octave;\n    } else {\n      return false;\n    }\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0, use Utilities.sanitizeChannels() instead.\n   */\n  sanitizeChannels(channel) {\n\n    if (this.validation) {\n      console.warn(\"The sanitizeChannels() method has been moved to the utilities class.\");\n    }\n\n    return Utilities.sanitizeChannels(channel);\n\n    // let channels;\n    //\n    // if (this.validation) {\n    //\n    //   if (channel === \"all\") { // backwards-compatibility\n    //     channels = [\"all\"];\n    //   } else if (channel === \"none\") { // backwards-compatibility\n    //     return [];\n    //   }\n    //\n    // }\n    //\n    // if (!Array.isArray(channel)) {\n    //   channels = [channel];\n    // } else {\n    //   channels = channel;\n    // }\n    //\n    // // In order to preserve backwards-compatibility, we let this assignment as it is.\n    // if (channels.indexOf(\"all\") > -1) {\n    //   channels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    // }\n    //\n    // return channels\n    //   .map(function(ch) {\n    //     return parseInt(ch);\n    //   })\n    //   .filter(function(ch) {\n    //     return (ch >= 1 && ch <= 16);\n    //   });\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.sanitizeChannels() instead.\n   */\n  toMIDIChannels(channel) {\n\n    if (this.validation) {\n      console.warn(\n        \"The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead.\"\n      );\n    }\n\n    return Utilities.sanitizeChannels(channel);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.guessNoteNumber() instead.\n   */\n  guessNoteNumber(input) {\n\n    if (this.validation) {\n      console.warn(\n        \"The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead.\"\n      );\n    }\n\n    return Utilities.guessNoteNumber(input, this.octaveOffset);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.buildNoteArray() instead.\n   */\n  getValidNoteArray(notes, options = {}) {\n    if (this.validation) {\n      console.warn(\n        \"The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()\"\n      );\n    }\n    return Utilities.buildNoteArray(notes, options);\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.toTimestamp() instead.\n   */\n  convertToTimestamp(time) {\n\n    if (this.validation) {\n      console.warn(\n        \"The convertToTimestamp() method has been moved to Utilities.toTimestamp().\"\n      );\n    }\n\n    return Utilities.toTimestamp(time);\n\n  }\n\n  /**\n   * @return {Promise<void>}\n   * @private\n   */\n  async _destroyInputsAndOutputs() {\n\n    let promises = [];\n\n    this.inputs.forEach(input => promises.push(input.destroy()));\n    this.outputs.forEach(output => promises.push(output.destroy()));\n\n    return Promise.all(promises).then(() => {\n      this._inputs = [];\n      this._outputs = [];\n    });\n\n  }\n\n  /**\n   * @private\n   */\n  _onInterfaceStateChange(e) {\n\n    this._updateInputsAndOutputs();\n\n    /**\n     * Event emitted when an {@link Input} or {@link Output} becomes available. This event is\n     * typically fired whenever a MIDI device is plugged in. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#connected\n     * @type {Object}\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n     * (in milliseconds since the navigation start of the document).\n     * @property {string} type `connected`\n     * @property {Input|Output} target The {@link Input} or {@link Output} object that triggered the\n     * event.\n     */\n\n    /**\n     * Event emitted when an {@link Input} or {@link Output} becomes unavailable. This event is\n     * typically fired whenever a MIDI device is unplugged. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#disconnected\n     * @type {Object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {string} type `disconnected`\n     * @property {Object} target Object with properties describing the {@link Input} or {@Output}\n     * that triggered the event.\n     * @property {string} target.connection `\"closed\"`\n     * @property {string} target.id ID of the input\n     * @property {string} target.manufacturer Manufacturer of the device that provided the input\n     * @property {string} target.name Name of the device that provided the input\n     * @property {string} target.state `disconnected`\n     * @property {string} target.type `input` or `output`\n     */\n    let event = {\n      timestamp: e.timeStamp,\n      type: e.port.state\n    };\n\n    if (this.interface && e.port.state === \"connected\") {\n\n      if (e.port.type === \"output\") {\n        event.port = this.getOutputById(e.port.id); // legacy\n        event.target = event.port;\n      } else if (e.port.type === \"input\") {\n        event.port = this.getInputById(e.port.id); // legacy\n        event.target = event.port;\n      }\n\n    } else {\n\n      // It feels more logical to include a `target` property instead of a `port` property. This is\n      // the terminology used everywhere in the library.\n      event.port = {\n        connection: \"closed\",\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n\n      event.target = event.port;\n\n    }\n\n    this.emit(e.port.state, event);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputsAndOutputs() {\n\n    return Promise.all([\n      this._updateInputs(),\n      this._updateOutputs()\n    ]);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputs() {\n\n    // @todo: THIS DOES NOT WORK WHEN THE COMPUTER GOES TO SLEEP BECAUSE STATECHANGE EVENTS ARE\n    //  FIRED ONE AFER THE OTHER. ALSO NEEDS TO BE FIXED IN V2.5\n\n    let promises = [];\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = 0; i < this._inputs.length; i++) {\n\n      let remove = true;\n\n      let updated = this.interface.inputs.values();\n\n      for (let input = updated.next(); input && !input.done; input = updated.next()) {\n        if (this._inputs[i]._midiInput === input.value) {\n          remove = false;\n          break;\n        }\n      }\n\n      if (remove) this._inputs.splice(i, 1);\n\n    }\n\n    // Check for items to add in the existing inputs array because they just appeared in the MIDI\n    // back-end inputs list. We must check for the existence of this.interface because it might\n    // have been closed via WebMidi.disable().\n    this.interface && this.interface.inputs.forEach(nInput => {\n\n      let add = true;\n\n      for (let j = 0; j < this._inputs.length; j++) {\n        if (this._inputs[j]._midiInput === nInput) {\n          add = false;\n        }\n      }\n\n      if (add) {\n        let input = new Input(nInput);\n        this._inputs.push(input);\n        promises.push(input.open());\n      }\n\n    });\n\n    return Promise.all(promises);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateOutputs() {\n\n    let promises = [];\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = 0; i < this._outputs.length; i++) {\n\n      let remove = true;\n\n      let updated = this.interface.outputs.values();\n\n      for (let output = updated.next(); output && !output.done; output = updated.next()) {\n        if (this._outputs[i]._midiOutput === output.value) {\n          remove = false;\n          break;\n        }\n      }\n\n      if (remove) {\n        this._outputs[i].close();\n        this._outputs.splice(i, 1);\n      }\n\n    }\n\n    // Check for items to add in the existing inputs array because they just appeared in the MIDI\n    // back-end outputs list. We must check for the existence of this.interface because it might\n    // have been closed via WebMidi.disable().\n    this.interface && this.interface.outputs.forEach(nOutput => {\n\n      let add = true;\n\n      for (let j = 0; j < this._outputs.length; j++) {\n        if (this._outputs[j]._midiOutput === nOutput) {\n          add = false;\n        }\n      }\n\n      if (add) {\n        let output = new Output(nOutput);\n        this._outputs.push(output);\n        promises.push(output.open());\n      }\n\n    });\n\n    return Promise.all(promises);\n\n  };\n\n  // injectPluginMarkup(parent) {\n  //\n  //   // Silently ignore on Node.js\n  //   if (this.isNode) return;\n  //\n  //   // Default to <body> if no parent is specified\n  //   if (!(parent instanceof Element) && !(parent instanceof HTMLDocument)) {\n  //     parent = document.body;\n  //   }\n  //\n  //   // IE10 needs this:\n  //   // <meta http-equiv=\"X-UA-Compatible\" content=\"requiresActiveX=true\"/>\n  //\n  //   // Create markup and add to parent\n  //   const obj = document.createElement(\"object\");\n  //   obj.classid = \"CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90\"; // IE\n  //   if (!obj.isJazz) obj.type = \"audio/x-jazz\";                 // Standards-compliant\n  //   obj.style.visibility = \"hidden\";\n  //   obj.style.width = obj.style.height = \"0px\";\n  //   parent.appendChild(obj);\n  //\n  // }\n\n  /**\n   * Indicates whether access to the host's MIDI subsystem is active or not.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get enabled() {\n    return this.interface !== null;\n  }\n\n  /**\n   * An array of all currently available MIDI inputs.\n   *\n   * @readonly\n   * @type {Array}\n   */\n  get inputs() {\n    return this._inputs;\n  }\n\n  /**\n   * Indicates whether the current environment is Node.js or not. If you need to check if we are in\n   * browser, use isBrowser. In certain environments (such as Electron and NW.js) isNode and\n   * isBrowser can both be true at the same time.\n   * @type {boolean}\n   */\n  get isNode() {\n\n    return (Object.prototype.toString.call(\n      typeof process !== \"undefined\" ? process : 0\n    ) === \"[object process]\");\n\n    // Alternative way to try\n    // return typeof process !== \"undefined\" &&\n    //   process.versions != null &&\n    //   process.versions.node != null;\n\n  }\n\n  /**\n   * Indicates whether the current environment is a browser environment or not. If you need to check\n   * if we are in Node.js, use isNode. In certain environments (such as Electron and NW.js) isNode\n   * and isBrowser can both be true at the same time.\n   * @type {boolean}\n   */\n  get isBrowser() {\n    return typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n  }\n\n  /**\n   * An integer to offset the octave of notes received from external devices or sent to external\n   * devices.\n   *\n   * When a MIDI message comes in on an input channel the reported note name will be offset. For\n   * example, if the `octaveOffset` is set to `-1` and a **note on** message with MIDI number 60\n   * comes in, the note will be reported as C3 (instead of C4).\n   *\n   * By the same token, when `OutputChannel.playNote()` is called, the MIDI note number being sent\n   * will be offset. If `octaveOffset` is set to `-1`, the MIDI note number sent will be 72 (instead\n   * of 60).\n   *\n   * @type {number}\n   *\n   * @since 2.1\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * An array of all currently available MIDI outputs.\n   *\n   * @readonly\n   * @type {Array}\n   */\n  get outputs() {\n    return this._outputs;\n  }\n\n  /**\n   * Indicates whether the environment provides support for the Web MIDI API or not.\n   *\n   * **Note**: in environments that do not offer built-in MIDI support, this will report `true` if\n   * the `navigator.requestMIDIAccess` function is available. For example, if you have installed\n   * WebMIDIAPIShim.js but no plugin, this property will be `true` even though actual support might\n   * not be there.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get supported() {\n    return (typeof navigator !== \"undefined\" && navigator.requestMIDIAccess);\n  }\n\n  /**\n   * Indicates whether MIDI system exclusive messages have been activated when WebMidi.js was\n   * enabled via the `enable()` method.\n   *\n   * @readonly\n   * @type Boolean\n   */\n  get sysexEnabled() {\n    return !!(this.interface && this.interface.sysexEnabled);\n  }\n\n  /**\n   * The elapsed time, in milliseconds, since the time\n   * [origin](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp#The_time_origin).\n   * Said simply, it is the number of milliseconds that passed since the page was loaded. Being a\n   * floating-point number, it has sub-millisecond accuracy. According to the\n   * [documentation](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp), the\n   * time should be accurate to 5 µs (microseconds). However, due to various constraints, the\n   * browser might only be accurate to one millisecond.\n   *\n   * @type {DOMHighResTimeStamp}\n   * @readonly\n   */\n  get time() {\n    return performance.now();\n  }\n\n  /**\n   * Enum of all MIDI channel voice messages and their associated numerical value:\n   *\n   * - `noteoff`: 0x8 (8)\n   * - `noteon`: 0x9 (9)\n   * - `keyaftertouch`: 0xA (10)\n   * - `controlchange`: 0xB (11)\n   * - `channelmode`: 0xB (11)\n   * - `nrpn`: 0xB (11)\n   * - `programchange`: 0xC (12)\n   * - `channelaftertouch`: 0xD (13)\n   * - `pitchbend`: 0xE (14)\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 3.0.0\n   */\n  get MIDI_CHANNEL_VOICE_MESSAGES() {\n\n    const values = Object.assign({}, this.MIDI_CHANNEL_MESSAGES);\n\n    return Object.assign(values, {\n      channelmode: 0xB,       // 11\n      nrpn: 0xB,              // 11\n    });\n\n  }\n\n  get MIDI_CHANNEL_MESSAGES() {\n\n    return {\n      noteoff: 0x8,           // 8\n      noteon: 0x9,            // 9\n      keyaftertouch: 0xA,     // 10\n      controlchange: 0xB,     // 11\n      programchange: 0xC,     // 12\n      channelaftertouch: 0xD, // 13\n      pitchbend: 0xE          // 14\n    };\n\n  }\n\n  /**\n   * Enum of all channel mode messages and their associated numerical value:\n   *\n   * - `allsoundoff`: 120\n   * - `resetallcontrollers`: 121\n   * - `localcontrol`: 122\n   * - `allnotesoff`: 123\n   * - `omnimodeoff`: 124\n   * - `omnimodeon`: 125\n   * - `monomodeon`: 126\n   * - `polymodeon`: 127\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 2.0.0\n   */\n  get MIDI_CHANNEL_MODE_MESSAGES() {\n\n    return {\n      allsoundoff: 120,\n      resetallcontrollers: 121,\n      localcontrol: 122,\n      allnotesoff: 123,\n      omnimodeoff: 124,\n      omnimodeon: 125,\n      monomodeon: 126,\n      polymodeon: 127\n    };\n\n  }\n\n  /**\n   * Enum of all control change messages and their associated numerical value:\n   *\n   * - `bankselectcoarse`: 0\n   * - `modulationwheelcoarse`: 1\n   * - `breathcontrollercoarse`: 2\n   * - `footcontrollercoarse`: 4\n   * - `portamentotimecoarse`: 5\n   * - `dataentrycoarse`: 6\n   * - `volumecoarse`: 7\n   * - `balancecoarse`: 8\n   * - `pancoarse`: 10\n   * - `expressioncoarse`: 11\n   * - `effectcontrol1coarse`: 12\n   * - `effectcontrol2coarse`: 13\n   * - `generalpurposeslider1`: 16\n   * - `generalpurposeslider2`: 17\n   * - `generalpurposeslider3`: 18\n   * - `generalpurposeslider4`: 19\n   * - `bankselectfine`: 32\n   * - `modulationwheelfine`: 33\n   * - `breathcontrollerfine`: 34\n   * - `footcontrollerfine`: 36\n   * - `portamentotimefine`: 37\n   * - `dataentryfine`: 38\n   * - `volumefine`: 39\n   * - `balancefine`: 40\n   * - `panfine`: 42\n   * - `expressionfine`: 43\n   * - `effectcontrol1fine`: 44\n   * - `effectcontrol2fine`: 45\n   * - `holdpedal`: 64\n   * - `portamento`: 65\n   * - `sustenutopedal`: 66\n   * - `softpedal`: 67\n   * - `legatopedal`: 68\n   * - `hold2pedal`: 69\n   * - `soundvariation`: 70\n   * - `resonance`: 71\n   * - `soundreleasetime`: 72\n   * - `soundattacktime`: 73\n   * - `brightness`: 74\n   * - `soundcontrol6`: 75\n   * - `soundcontrol7`: 76\n   * - `soundcontrol8`:`77\n   * - `soundcontrol9`: 78\n   * - `soundcontrol10`: 79\n   * - `generalpurposebutton1`: 80\n   * - `generalpurposebutton2`: 81\n   * - `generalpurposebutton3`: 82\n   * - `generalpurposebutton4`: 83\n   * - `reverblevel`: 91\n   * - `tremololevel`: 92\n   * - `choruslevel`: 93\n   * - `celestelevel`: 94\n   * - `phaserlevel`: 95\n   * - `databuttonincrement`: 96\n   * - `databuttondecrement`: 97\n   * - `nonregisteredparametercoarse`: 98\n   * - `nonregisteredparameterfine`: 99\n   * - `registeredparametercoarse`: 100\n   * - `registeredparameterfine`: 101\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 2.0.0\n   */\n  get MIDI_CONTROL_CHANGE_MESSAGES() {\n\n    return {\n      bankselectcoarse: 0,\n      modulationwheelcoarse: 1,\n      breathcontrollercoarse: 2,\n      footcontrollercoarse: 4,\n      portamentotimecoarse: 5,\n      dataentrycoarse: 6,\n      volumecoarse: 7,\n      balancecoarse: 8,\n      pancoarse: 10,\n      expressioncoarse: 11,\n      effectcontrol1coarse: 12,\n      effectcontrol2coarse: 13,\n      generalpurposeslider1: 16,\n      generalpurposeslider2: 17,\n      generalpurposeslider3: 18,\n      generalpurposeslider4: 19,\n      bankselectfine: 32,\n      modulationwheelfine: 33,\n      breathcontrollerfine: 34,\n      footcontrollerfine: 36,\n      portamentotimefine: 37,\n      dataentryfine: 38,\n      volumefine: 39,\n      balancefine: 40,\n      panfine: 42,\n      expressionfine: 43,\n      effectcontrol1fine: 44,\n      effectcontrol2fine: 45,\n      holdpedal: 64,\n      portamento: 65,\n      sustenutopedal: 66,\n      softpedal: 67,\n      legatopedal: 68,\n      hold2pedal: 69,\n      soundvariation: 70,\n      resonance: 71,\n      soundreleasetime: 72,\n      soundattacktime: 73,\n      brightness: 74,\n      soundcontrol6: 75,\n      soundcontrol7: 76,\n      soundcontrol8: 77,\n      soundcontrol9: 78,\n      soundcontrol10: 79,\n      generalpurposebutton1: 80,\n      generalpurposebutton2: 81,\n      generalpurposebutton3: 82,\n      generalpurposebutton4: 83,\n      reverblevel: 91,\n      tremololevel: 92,\n      choruslevel: 93,\n      celestelevel: 94,\n      phaserlevel: 95,\n      databuttonincrement: 96,\n      databuttondecrement: 97,\n      nonregisteredparametercoarse: 98,\n      nonregisteredparameterfine: 99,\n      registeredparametercoarse: 100,\n      registeredparameterfine: 101\n    };\n\n  }\n\n  /**\n   * Array of valid events triggered at the interface level.\n   *\n   * @type {string[]}\n   * @readonly\n   */\n  get MIDI_INTERFACE_EVENTS() {\n    return [\"connected\", \"disconnected\"];\n  }\n\n  /**\n   * Enum of all control change messages that are used to create NRPN messages and their associated\n   * numerical value:\n   *\n   * - `entrymsb`: 6\n   * - `entrylsb`: 38\n   * - `increment`: 96\n   * - `decrement`: 97\n   * - `paramlsb`: 98\n   * - `parammsb`: 99\n   * - `nullactiveparameter`: 127\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 2.0.0\n   */\n  get MIDI_NRPN_MESSAGES() {\n\n    return {\n      entrymsb: 6,\n      entrylsb: 38,\n      increment: 96,\n      decrement: 97,\n      paramlsb: 98,\n      parammsb: 99,\n      nullactiveparameter: 127\n    };\n\n  }\n\n  /**\n   * Enum of all registered parameters and their associated pair of numerical values. MIDI\n   * registered parameters extend the original list of control change messages. Currently, there are\n   * only a limited number of them:\n   *\n   * - `pitchbendrange`: [0x00, 0x00]\n   * - `channelfinetuning`: [0x00, 0x01]\n   * - `channelcoarsetuning`: [0x00, 0x02]\n   * - `tuningprogram`: [0x00, 0x03]\n   * - `tuningbank`: [0x00, 0x04]\n   * - `modulationrange`: [0x00, 0x05]\n   * - `azimuthangle`: [0x3D, 0x00]\n   * - `elevationangle`: [0x3D, 0x01]\n   * - `gain`: [0x3D, 0x02]\n   * - `distanceratio`: [0x3D, 0x03]\n   * - `maximumdistance`: [0x3D, 0x04]\n   * - `maximumdistancegain`: [0x3D, 0x05]\n   * - `referencedistanceratio`: [0x3D, 0x06]\n   * - `panspreadangle`: [0x3D, 0x07]\n   * - `rollangle`: [0x3D, 0x08]\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 2.0.0\n   */\n  get MIDI_REGISTERED_PARAMETER() {\n\n    return {\n      pitchbendrange: [0x00, 0x00],\n      channelfinetuning: [0x00, 0x01],\n      channelcoarsetuning: [0x00, 0x02],\n      tuningprogram: [0x00, 0x03],\n      tuningbank: [0x00, 0x04],\n      modulationrange: [0x00, 0x05],\n      azimuthangle: [0x3D, 0x00],\n      elevationangle: [0x3D, 0x01],\n      gain: [0x3D, 0x02],\n      distanceratio: [0x3D, 0x03],\n      maximumdistance: [0x3D, 0x04],\n      maximumdistancegain: [0x3D, 0x05],\n      referencedistanceratio: [0x3D, 0x06],\n      panspreadangle: [0x3D, 0x07],\n      rollangle: [0x3D, 0x08]\n    };\n\n  }\n\n  /**\n   * Enum of all valid MIDI system messages and matching numerical values. WebMidi.js also uses\n   * two custom messages.\n   *\n   * **System common messages**\n   * - `sysex`: 0xF0 (240)\n   * - `timecode`: 0xF1 (241)\n   * - `songposition`: 0xF2 (242)\n   * - `songselect`: 0xF3 (243)\n   * - `tunerequest`: 0xF6 (246)\n   * - `sysexend`: 0xF7 (247)\n   *\n   * The `sysexend` message is never actually received. It simply ends a sysex stream.\n   *\n   * **System real-time messages**\n   *\n   * - `clock`: 0xF8 (248)\n   * - `start`: 0xFA (250)\n   * - `continue`: 0xFB (251)\n   * - `stop`: 0xFC (252)\n   * - `activesensing`: 0xFE (254)\n   * - `reset`: 0xFF (255)\n   *\n   * Values 249 and 253 are actually relayed by the Web MIDI API but they do not serve a specific\n   * purpose. The\n   * [MIDI 1.0 spec](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n   * simply states that they are undefined/reserved.\n   *\n   * **Custom WebMidi.js messages**\n   *\n   * - `midimessage`: 0\n   * - `unknownsystemmessage`: -1\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 2.0.0\n   */\n  get MIDI_SYSTEM_MESSAGES() {\n\n    return {\n\n      // System common messages\n      sysex: 0xF0,            // 240\n      timecode: 0xF1,         // 241\n      songposition: 0xF2,     // 242\n      songselect: 0xF3,       // 243\n      tunerequest: 0xF6,      // 246\n      tuningrequest: 0xF6,    // for backwards-compatibility (deprecated in version 3.0)\n      sysexend: 0xF7,         // 247 (never actually received - simply ends a sysex)\n\n      // System real-time messages\n      clock: 0xF8,            // 248\n      start: 0xFA,            // 250\n      continue: 0xFB,         // 251\n      stop: 0xFC,             // 252\n      activesensing: 0xFE,    // 254\n      reset: 0xFF,            // 255\n\n      // Custom WebMidi.js messages\n      midimessage: 0,\n      unknownsystemmessage: -1\n\n    };\n\n  }\n\n  /**\n   * Array of standard note names\n   *\n   * @type {string[]}\n   * @readonly\n   */\n  get NOTES() {\n    return [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n  }\n\n}\n\n// Export singleton instance of WebMidi class. The 'constructor' is nulled so that it cannot be used\n// to instantiate a new WebMidi object or extend it. However, it is not freezed so it remains\n// extensible (properties can be added at will).\nconst wm = new WebMidi();\nwm.constructor = null;\nexport {wm as WebMidi};\n\nexport {Note} from \"./Note.js\";\nexport {Utilities} from \"./Utilities.js\";\nexport {Message} from \"./Message.js\";\n"],"names":["EventEmitter","[object Object]","eventsSuspended","eventMap","this","event","callback","options","length","String","ANY_EVENT","TypeError","listener","Listener","prepend","unshift","push","remaining","addListener","Symbol","for","Object","entries","some","value","filter","undefined","keys","getListeners","forEach","suspended","args","results","listeners","concat","params","Array","isArray","arguments","apply","context","count","remove","duration","parseInt","isNaN","Infinity","Promise","resolve","reject","timeout","clearTimeout","setTimeout","target","ReferenceError","assign","removeListener","Note","constructor","WebMidi","defaults","note","attack","release","rawAttack","Utilities","toNormalized","rawRelease","Number","isInteger","identifier","toNoteIdentifier","_name","_accidental","_octave","fragments","getNoteDetails","validation","Error","name","accidental","octave","toUpperCase","includes","toLowerCase","_duration","parseFloat","RangeError","_attack","_release","to7Bit","toNoteNumber","getOffsetNumber","octaveOffset","semitoneOffset","Math","min","max","number","utils","result","C","D","E","F","G","A","B","startsWith","matches","match","sanitizeChannels","channel","channels","indexOf","map","ch","toTimestamp","time","parsed","substring","guessNoteNumber","input","output","trim","e","floor","NOTES","toString","buildNote","buildNoteArray","notes","round","getMessage","data","command","data1","data2","offsetNumber","getKeyByValue","object","find","key","InputChannel","_input","_number","_octaveOffset","destroy","_processMidiMessageEvent","type","emit","_parseEventForStandardMessages","message","dataBytes","console","log","rawValue","velocity","rawVelocity","rawKey","channelModeMessage","controller","getChannelModeByNumber","_parseChannelModeMessage","getCcNameByNumber","cm","MIDI_CHANNEL_MODE_MESSAGES","hasOwnProperty","cc","MIDI_CONTROL_CHANGE_MESSAGES","Input","midiInput","_midiInput","i","onstatechange","_onStateChange","bind","onmidimessage","_onMidiMessage","close","timestamp","port","connection","state","id","manufacturer","warn","Message","timeStamp","rawData","statusByte","systemMessage","_parseEvent","channelMessage","song","open","err","MIDI_CHANNEL_VOICE_MESSAGES","super","addOneTimeListener","on","hasListener","every","OutputChannel","_output","send","setKeyAftertouch","pressure","useRawValue","offset","item","n","keyaftertouch","sendControlChange","controlchange","_selectNonRegisteredParameter","parameter","_deselectRegisteredParameter","_deselectNonRegisteredParameter","_selectRegisteredParameter","_setCurrentParameter","decrementRegisteredParameter","MIDI_REGISTERED_PARAMETER","valid","getOwnPropertyNames","p","incrementRegisteredParameter","playNote","sendNoteOn","isFinite","NaN","noteOffOptions","sendNoteOff","nVelocity","noteoff","stopNote","noteon","sendChannelMode","channelmode","setOmniMode","setChannelAftertouch","channelaftertouch","setMasterTuning","coarse","fine","msb","lsb","setRegisteredParameter","setModulationRange","semitones","cents","setNonRegisteredParameter","nrpn","setPitchBend","nLevel","pitchbend","setPitchBendRange","setProgram","program","programchange","rpn","setTuningBank","setTuningProgram","setLocalControl","turnNotesOff","turnSoundOff","resetAllControllers","setPolyphonicMode","mode","Output","midiOutput","_midiOutput","legacy","Uint8Array","slice","sendSysex","MIDI_SYSTEM_MESSAGES","sysexend","sysex","clear","sendTimecodeQuarterFrame","timecode","setSongPosition","songposition","sendSongPosition","setSong","songselect","sendSongSelect","sendTuneRequest","tunerequest","sendClock","clock","sendStart","start","sendContinue","continue","sendStop","stop","sendActiveSensing","activesensing","sendReset","reset","sendTuningRequest","sendKeyAftertouch","sendChannelAftertouch","sendPitchBend","bend","sendProgramChange","from","global","require","performance","wm","interface","_inputs","_outputs","_stateChangeQueue","enabled","errorEvent","error","midiAccessGrantedEvent","enabledEvent","navigator","requestMIDIAccess","software","_onInterfaceStateChange","_updateInputsAndOutputs","_destroyInputsAndOutputs","then","getInputById","inputs","getInputByName","getOutputByName","outputs","getOutputById","noteNameToNumber","getOctave","toMIDIChannels","getValidNoteArray","convertToTimestamp","promises","all","_updateInputs","_updateOutputs","updated","values","next","done","splice","nInput","add","j","nOutput","prototype","call","process","window","document","sysexEnabled","now","MIDI_CHANNEL_MESSAGES","allsoundoff","resetallcontrollers","localcontrol","allnotesoff","omnimodeoff","omnimodeon","monomodeon","polymodeon","bankselectcoarse","modulationwheelcoarse","breathcontrollercoarse","footcontrollercoarse","portamentotimecoarse","dataentrycoarse","volumecoarse","balancecoarse","pancoarse","expressioncoarse","effectcontrol1coarse","effectcontrol2coarse","generalpurposeslider1","generalpurposeslider2","generalpurposeslider3","generalpurposeslider4","bankselectfine","modulationwheelfine","breathcontrollerfine","footcontrollerfine","portamentotimefine","dataentryfine","volumefine","balancefine","panfine","expressionfine","effectcontrol1fine","effectcontrol2fine","holdpedal","portamento","sustenutopedal","softpedal","legatopedal","hold2pedal","soundvariation","resonance","soundreleasetime","soundattacktime","brightness","soundcontrol6","soundcontrol7","soundcontrol8","soundcontrol9","soundcontrol10","generalpurposebutton1","generalpurposebutton2","generalpurposebutton3","generalpurposebutton4","reverblevel","tremololevel","choruslevel","celestelevel","phaserlevel","databuttonincrement","databuttondecrement","nonregisteredparametercoarse","nonregisteredparameterfine","registeredparametercoarse","registeredparameterfine","entrymsb","entrylsb","increment","decrement","paramlsb","parammsb","nullactiveparameter","pitchbendrange","channelfinetuning","channelcoarsetuning","tuningprogram","tuningbank","modulationrange","azimuthangle","elevationangle","gain","distanceratio","maximumdistance","maximumdistancegain","referencedistanceratio","panspreadangle","rollangle","tuningrequest","midimessage","unknownsystemmessage"],"mappings":"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"}