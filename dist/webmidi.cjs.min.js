/**
 * WebMidi.js v3.0.0-alpha.13
 * A JavaScript library to kickstart your MIDI projects
 * https://webmidijs.org
 * Build generated on September 28th, 2021.
 *
 * © Copyright 2015-2021, Jean-Philippe Côté.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class e{constructor(e=!1){this.eventMap={},this.eventsSuspended=1==e}addListener(n,r,a={}){if("string"==typeof n&&n.length<1||n instanceof String&&n.length<1||"string"!=typeof n&&!(n instanceof String)&&n!==e.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if("function"!=typeof r)throw new TypeError("The callback must be a function.");const s=new t(n,this,r,a);return this.eventMap[n]||(this.eventMap[n]=[]),a.prepend?this.eventMap[n].unshift(s):this.eventMap[n].push(s),s}addOneTimeListener(e,t,n={}){n.remaining=1,this.addListener(e,t,n)}static get ANY_EVENT(){return Symbol.for("Any event")}hasListener(n,r){return void 0===n?!!(this.eventMap[e.ANY_EVENT]&&this.eventMap[e.ANY_EVENT].length>0)||Object.entries(this.eventMap).some(([,e])=>e.length>0):!!(this.eventMap[n]&&this.eventMap[n].length>0)&&(r instanceof t?this.eventMap[n].filter(e=>e===r).length>0:"function"==typeof r?this.eventMap[n].filter(e=>e.callback===r).length>0:null==r)}get eventNames(){return Object.keys(this.eventMap)}getListeners(e){return this.eventMap[e]||[]}suspendEvent(e){this.getListeners(e).forEach(e=>{e.suspended=!0})}unsuspendEvent(e){this.getListeners(e).forEach(e=>{e.suspended=!1})}getListenerCount(e){return this.getListeners(e).length}emit(t,...n){if("string"!=typeof t&&!(t instanceof String))throw new TypeError("The 'event' parameter must be a string.");if(this.eventsSuspended)return;let r=[],a=this.eventMap[e.ANY_EVENT]||[];return this.eventMap[t]&&(a=a.concat(this.eventMap[t])),a.forEach(e=>{if(e.suspended)return;let t=[...n];Array.isArray(e.arguments)&&(t=t.concat(e.arguments)),e.remaining>0&&(r.push(e.callback.apply(e.context,t)),e.count++),--e.remaining<1&&e.remove()}),r}removeListener(e,t,n={}){if(void 0===e)return void(this.eventMap={});if(!this.eventMap[e])return;let r=this.eventMap[e].filter(e=>t&&e.callback!==t||n.remaining&&n.remaining!==e.remaining||n.context&&n.context!==e.context);r.length?this.eventMap[e]=r:delete this.eventMap[e]}async waitFor(e,t={}){return t.duration=parseInt(t.duration),(isNaN(t.duration)||t.duration<=0)&&(t.duration=1/0),new Promise((n,r)=>{let a,s=this.addListener(e,()=>{clearTimeout(a),n()},{remaining:1});t.duration!==1/0&&(a=setTimeout(()=>{s.remove(),r("The duration expired before the event was emitted.")},t.duration))})}get eventCount(){return Object.keys(this.eventMap).length}}class t{constructor(t,n,r,a={}){if("string"!=typeof t&&!(t instanceof String)&&t!==e.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(!n)throw new ReferenceError("The 'target' parameter is mandatory.");if("function"!=typeof r)throw new TypeError("The 'callback' must be a function.");void 0===a.arguments||Array.isArray(a.arguments)||(a.arguments=[a.arguments]),(a=Object.assign({context:n,remaining:1/0,arguments:void 0,duration:1/0},a)).duration!==1/0&&setTimeout(()=>this.remove(),a.duration),this.event=t,this.target=n,this.callback=r,this.context=a.context,this.remaining=parseInt(a.remaining)>=1?parseInt(a.remaining):1/0,this.count=0,this.arguments=a.arguments,this.suspended=!1}remove(){this.target.removeListener(this.event,this.callback,{context:this.context,remaining:this.remaining})}}class n{constructor(e,t={}){this.duration=h.defaults.note.duration,this.attack=h.defaults.note.attack,this.release=h.defaults.note.release,null!=t.duration&&(this.duration=t.duration),null!=t.attack&&(this.attack=t.attack),null!=t.rawAttack&&(this.attack=r.toNormalized(t.rawAttack)),null!=t.release&&(this.release=t.release),null!=t.rawRelease&&(this.release=r.toNormalized(t.rawRelease)),Number.isInteger(e)?this.identifier=r.toNoteIdentifier(e):this.identifier=e}get identifier(){return this._name+(this._accidental||"")+this._octave}set identifier(e){const t=r.getNoteDetails(e);if(h.validation&&!e)throw new Error("Invalid note identifier");this._name=t.name,this._accidental=t.accidental,this._octave=t.octave}get name(){return this._name}set name(e){if(h.validation&&(e=e.toUpperCase(),!["C","D","E","F","G","A","B"].includes(e)))throw new Error("Invalid name value");this._name=e}get accidental(){return this._accidental}set accidental(e){if(h.validation&&(e=e.toLowerCase(),!["#","##","b","bb"].includes(e)))throw new Error("Invalid accidental value");this._accidental=e}get octave(){return this._octave}set octave(e){if(h.validation&&(e=parseInt(e),isNaN(e)))throw new Error("Invalid octave value");this._octave=e}get duration(){return this._duration}set duration(e){if(h.validation&&(e=parseFloat(e),isNaN(e)||null===e||e<0))throw new RangeError("Invalid duration value.");this._duration=e}get attack(){return this._attack}set attack(e){if(h.validation&&(e=parseFloat(e),isNaN(e)||!(e>=0&&e<=1)))throw new RangeError("Invalid attack value.");this._attack=e}get release(){return this._release}set release(e){if(h.validation&&(e=parseFloat(e),isNaN(e)||!(e>=0&&e<=1)))throw new RangeError("Invalid release value.");this._release=e}get rawAttack(){return r.to7Bit(this._attack)}get rawRelease(){return r.to7Bit(this._release)}get number(){return r.toNoteNumber(this.identifier)}getOffsetNumber(e=0,t=0){return h.validation&&(e=parseInt(e)||0,t=parseInt(t)||0),Math.min(Math.max(this.number+12*e+t,0),127)}}const r=new class{toNoteNumber(e,t=0){if(t=null==t?0:parseInt(t),isNaN(t))throw new RangeError("Invalid 'octaveOffset' value");"string"!=typeof e&&(e="");const n=this.getNoteDetails(e);if(!n)throw new TypeError("Invalid note identifier");let r=12*(n.octave+1+t);if(r+={C:0,D:2,E:4,F:5,G:7,A:9,B:11}[n.name],n.accidental&&(n.accidental.startsWith("b")?r-=n.accidental.length:r+=n.accidental.length),r<0||r>127)throw new RangeError("Invalid octaveOffset value");return r}getNoteDetails(e){Number.isInteger(e)&&(e=this.toNoteIdentifier(e));const t=e.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\d+)$/i);if(!t)throw new TypeError("Invalid note identifier");const n=t[1].toUpperCase(),r=parseInt(t[3]);let a=t[2].toLowerCase();return a=""===a?void 0:a,{name:n,accidental:a,octave:r,identifier:n+(a||"")+r}}sanitizeChannels(e){let t;if(this.validation)if("all"===e)t=["all"];else if("none"===e)return[];return t=Array.isArray(e)?e:[e],t.indexOf("all")>-1&&(t=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]),t.map((function(e){return parseInt(e)})).filter((function(e){return e>=1&&e<=16}))}toTimestamp(e){let t=!1;const n=parseFloat(e);return!isNaN(n)&&("string"==typeof e&&"+"===e.substring(0,1)?n>=0&&(t=h.time+n):n>=0&&(t=n),t)}guessNoteNumber(e,t){t=parseInt(t)||0;let n=!1;if(Number.isInteger(e)&&e>=0&&e<=127)n=parseInt(e);else if(parseInt(e)>=0&&parseInt(e)<=127)n=parseInt(e);else if("string"==typeof e||e instanceof String)try{n=this.toNoteNumber(e.trim(),t)}catch(e){return!1}return n}toNoteIdentifier(e,t){if(e=parseInt(e),isNaN(e)||e<0||e>127)throw new RangeError("Invalid note number");if(t=null==t?0:parseInt(t),isNaN(t))throw new RangeError("Invalid octaveOffset value");const n=Math.floor(e/12-1)+t;return h.NOTES[e%12]+n.toString()}buildNote(e,t={}){if(t.octaveOffset=parseInt(t.octaveOffset)||0,e instanceof n)return e;let r=this.guessNoteNumber(e,t.octaveOffset);if(!1===r)throw new TypeError(`The input could not be parsed as a note (${e})`);return t.octaveOffset=void 0,new n(r,t)}buildNoteArray(e,t={}){let n=[];return Array.isArray(e)||(e=[e]),e.forEach(e=>{n.push(this.buildNote(e,t))}),n}toNormalized(e){return e===1/0&&(e=127),e=parseInt(e)||0,Math.min(Math.max(e/127,0),1)}to7Bit(e){return e===1/0&&(e=1),e=parseFloat(e)||0,Math.min(Math.max(Math.round(127*e),0),127)}offsetNumber(e,t=0,n=0){if(h.validation){if(e=parseInt(e),isNaN(e))throw new Error("Invalid note number");t=parseInt(t)||0,n=parseInt(n)||0}return Math.min(Math.max(e+12*t+n,0),127)}getPropertyByValue(e,t){return Object.keys(e).find(n=>e[n]===t)}};r.constructor=null;class a extends e{constructor(e,t){super(),this._input=e,this._number=t,this._octaveOffset=0,this._nrpnBuffer=[],this._rpnBuffer=[],this.parameterNumberEventsEnabled=!0}destroy(){this._input=null,this._number=null,this._octaveOffset=0,this._nrpnBuffer=[],this.parameterNumberEventsEnabled=!1,this.removeListener()}_processMidiMessageEvent(e){const t=Object.assign({},e);t.target=this,t.type="midimessage",this.emit(t.type,t),this._parseEventForStandardMessages(t)}_parseEventForStandardMessages(e){const t=Object.assign({},e);t.type=t.message.type||"unknownmidimessage";const a=e.message.dataBytes[0],s=e.message.dataBytes[1];"noteoff"===t.type||"noteon"===t.type&&0===s?(t.note=new n(r.offsetNumber(a,this.octaveOffset+this.input.octaveOffset+h.octaveOffset),{rawAttack:0,rawRelease:s}),t.value=r.toNormalized(s),t.rawValue=s,t.velocity=t.note.release,t.rawVelocity=t.note.rawRelease):"noteon"===t.type?(t.note=new n(r.offsetNumber(a,this.octaveOffset+this.input.octaveOffset+h.octaveOffset),{rawAttack:s}),t.value=r.toNormalized(s),t.rawValue=s,t.velocity=t.note.attack,t.rawVelocity=t.note.rawAttack):"keyaftertouch"===t.type?(t.identifier=r.toNoteIdentifier(a,h.octaveOffset+this.input.octaveOffset+this.octaveOffset),t.key=r.toNoteNumber(t.identifier),t.rawKey=a,t.value=r.toNormalized(s),t.rawValue=s,t.note=new n(r.offsetNumber(a,this.octaveOffset+this.input.octaveOffset+h.octaveOffset))):"controlchange"===t.type?(t.controller={number:a,name:this.getCcNameByNumber(a)},t.value=r.toNormalized(s),t.rawValue=s,t.message.dataBytes[0]>=120&&this._parseChannelModeMessage(t),this.parameterNumberEventsEnabled&&this.isRpnOrNrpnController(t.message.dataBytes[0])&&this._parseEventForParameterNumber(t)):"programchange"===t.type?(t.value=a+1,t.rawValue=a):"channelaftertouch"===t.type?(t.value=r.toNormalized(a),t.rawValue=a):"pitchbend"===t.type?(t.value=((s<<7)+a-8192)/8192,t.rawValue=(s<<7)+a):t.type="unknownmessage",this.emit(t.type,t)}_parseChannelModeMessage(e){const t=Object.assign({},e);t.type=t.controller.name,"localcontrol"===t.type&&(t.value=127===t.message.data[2]),"omnimodeon"===t.type?(t.type="omnimode",t.value=!0):"omnimodeoff"===t.type&&(t.type="omnimode",t.value=!1),"monomodeon"===t.type?(t.type="monomode",t.value=!0):"polymodeon"===t.type&&(t.type="monomode",t.value=!1),this.emit(t.type,t)}_parseEventForParameterNumber(e){const t=e.message.dataBytes[0],n=e.message.dataBytes[1],r=h.MIDI_CONTROL_CHANGE_MESSAGES;if(t===r.nonregisteredparameterfine||t===r.registeredparameterfine)this._nrpnBuffer=[],this._rpnBuffer=[],t===r.nonregisteredparameterfine?this._nrpnBuffer=[e.message]:127!==n&&(this._rpnBuffer=[e.message]);else if(t===r.nonregisteredparametercoarse||t===r.registeredparametercoarse)t===r.nonregisteredparametercoarse?(this._rpnBuffer=[],1===this._nrpnBuffer.length?this._nrpnBuffer.push(e.message):this._nrpnBuffer=[]):(this._nrpnBuffer=[],1===this._rpnBuffer.length&&127!==n?this._rpnBuffer.push(e.message):this._rpnBuffer=[]);else if(t===r.dataentrycoarse||t===r.dataentryfine||t===r.databuttonincrement||t===r.databuttondecrement){let t=void 0;if(2===this._rpnBuffer.length)t="rpn";else{if(2!==this._nrpnBuffer.length)return this._nrpnBuffer=[],void(this._rpnBuffer=[]);t="nrpn"}this._dispatchParameterNumberEvent(t,this._nrpnBuffer[0].dataBytes[0],this._nrpnBuffer[1].dataBytes[0],e)}}isRpnOrNrpnController(e){return e===h.MIDI_CONTROL_CHANGE_MESSAGES.dataentrycoarse||e===h.MIDI_CONTROL_CHANGE_MESSAGES.dataentryfine||e===h.MIDI_CONTROL_CHANGE_MESSAGES.databuttonincrement||e===h.MIDI_CONTROL_CHANGE_MESSAGES.databuttondecrement||e===h.MIDI_CONTROL_CHANGE_MESSAGES.nonregisteredparametercoarse||e===h.MIDI_CONTROL_CHANGE_MESSAGES.nonregisteredparameterfine||e===h.MIDI_CONTROL_CHANGE_MESSAGES.registeredparametercoarse||e===h.MIDI_CONTROL_CHANGE_MESSAGES.registeredparameterfine}_dispatchParameterNumberEvent(e,t,n,r){console.log("aaa");const a=r.message.dataBytes[0],s=r.message.dataBytes[1],i=h.MIDI_CONTROL_CHANGE_MESSAGES,o={target:r.target,timestamp:r.timestamp,parameterMsb:t,parameterLsb:n,value:s,type:"rpn"===e?"rpn":"nrpn"};console.log("bbb"),a===i.dataentrycoarse?o.type+="entrymsb":a===i.dataentryfine?o.type+="entrylsb":a===i.databuttonincrement?o.type+="increment":a===i.databuttondecrement&&(o.type+="decrement"),"rpn"===e||(o.parameter=t<<7+n),console.log(o),this.emit(o.type,o)}getChannelModeByNumber(e){if(h.validation&&(e=Math.floor(e)),!(e>=120&&e<=127))return!1;for(let t in h.MIDI_CHANNEL_MODE_MESSAGES)if(h.MIDI_CHANNEL_MODE_MESSAGES.hasOwnProperty(t)&&e===h.MIDI_CHANNEL_MODE_MESSAGES[t])return t;return!1}getCcNameByNumber(e){if(h.validation&&!((e=parseInt(e))>=0&&e<=127))throw new RangeError("Invalid control change number.");return r.getPropertyByValue(h.MIDI_CONTROL_CHANGE_MESSAGES,e)}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get input(){return this._input}get number(){return this._number}get nrpnEventsEnabled(){return this.parameterNumberEventsEnabled}set nrpnEventsEnabled(e){this.validation&&(e=!!e),this.parameterNumberEventsEnabled=e}}class s extends e{constructor(e){super(),this._midiInput=e,this._octaveOffset=0,this.channels=[];for(let e=1;e<=16;e++)this.channels[e]=new a(this,e);this._midiInput.onstatechange=this._onStateChange.bind(this),this._midiInput.onmidimessage=this._onMidiMessage.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(e=>e.destroy()),this.channels=[],this._midiInput.onstatechange=null,this._midiInput.onmidimessage=null,await this.close(),this._midiInput=null}_onStateChange(e){let t={timestamp:h.time,target:this};"open"===e.port.connection?(t.type="opened",this.emit("opened",t)):"closed"===e.port.connection&&"connected"===e.port.state?(t.type="closed",this.emit("closed",t)):"closed"===e.port.connection&&"disconnected"===e.port.state?(t.type="disconnected",t.target={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",t)):"pending"===e.port.connection&&"disconnected"===e.port.state||console.warn("This statechange event was not caught: ",e.port.connection,e.port.state)}_onMidiMessage(e){const t=new l(e.data),n={target:this,message:t,timestamp:e.timeStamp,type:"midimessage",data:t.data,rawData:t.data,statusByte:t.data[0],dataBytes:t.dataBytes};this.emit("midimessage",n),t.isSystemMessage?this._parseEvent(n):t.isChannelMessage&&this.channels[t.channel]._processMidiMessageEvent(n)}_parseEvent(e){const t=Object.assign({},e);t.type=t.message.type||"unknownmidimessage","songselect"===t.type&&(t.song=e.data[1]+1),this.emit(t.type,t)}async open(){try{await this._midiInput.open()}catch(e){return Promise.reject(e)}return Promise.resolve(this)}async close(){if(!this._midiInput)return Promise.resolve(this);try{await this._midiInput.close()}catch(e){return Promise.reject(e)}return Promise.resolve(this)}getChannelModeByNumber(){h.validation&&console.warn("The 'getChannelModeByNumber()' method has been moved to the 'InputChannel' class.")}addListener(e,t,n={}){if(h.validation){if("function"==typeof n){let e=null!=t?[].concat(t):void 0;t=n,n={channels:e}}if(h.CHANNEL_EVENTS.includes(e)&&void 0===n.channels)throw new Error("For channel-specific events, 'options.channels' must be defined.")}let a=[];return h.CHANNEL_EVENTS.includes(e)?r.sanitizeChannels(n.channels).forEach(r=>{a.push(this.channels[r].addListener(e,t,n))}):a.push(super.addListener(e,t,n)),a}addOneTimeListener(e,t,n={}){return n.remaining=1,this.addListener(e,t,n)}on(e,t,n,r){return this.addListener(e,t,n,r)}hasListener(e,t,n={}){if(h.validation){if("function"==typeof n){let e=[].concat(t);t=n,n={channels:e}}if(h.CHANNEL_EVENTS.includes(e)&&void 0===n.channels)throw new Error("For channel-specific events, 'options.channels' must be defined.")}return h.CHANNEL_EVENTS.includes(e)?r.sanitizeChannels(n.channels).every(n=>this.channels[n].hasListener(e,t)):super.hasListener(e,t)}removeListener(e,t,n={}){if(h.validation&&"function"==typeof n){let e=[].concat(t);t=n,n={channels:e}}if(void 0===n.channels&&(n.channels=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]),null==e)return r.sanitizeChannels(n.channels).forEach(e=>this.channels[e].removeListener()),super.removeListener();h.CHANNEL_EVENTS.includes(e)?r.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].removeListener(e,t,n)}):super.removeListener(e,t,n)}get name(){return this._midiInput.name}get id(){return this._midiInput.id}get connection(){return this._midiInput.connection}get manufacturer(){return this._midiInput.manufacturer}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get state(){return this._midiInput.state}get type(){return this._midiInput.type}get nrpnEventsEnabled(){return h.validation&&console.warn("The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class."),!1}}class i extends e{constructor(e,t){super(),this._output=e,this._number=t,this._octaveOffset=0}destroy(){this._output=null,this._number=null,this._octaveOffset=0,this.removeListener()}send(e,t={time:0}){return this.output.send(e,t),this}setKeyAftertouch(e,t,n={}){if(h.validation){if(n.useRawValue&&(n.rawValue=n.useRawValue),isNaN(parseFloat(t)))throw new RangeError("Invalid key aftertouch value.");if(n.rawValue){if(!(t>=0&&t<=127&&Number.isInteger(t)))throw new RangeError("Key aftertouch raw value must be an integer between 0 and 127.")}else if(!(t>=0&&t<=1))throw new RangeError("Key aftertouch value must be a float between 0 and 1.")}n.rawValue||(t=r.to7Bit(t));const a=h.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Array.isArray(e)||(e=[e]),(e=e.map(e=>r.guessNoteNumber(e))).forEach(e=>{this.send([(h.MIDI_CHANNEL_MESSAGES.keyaftertouch<<4)+(this.number-1),r.offsetNumber(e,a),t],{time:r.toTimestamp(n.time)})}),this}sendControlChange(e,t,n={}){if("string"==typeof e&&(e=h.MIDI_CONTROL_CHANGE_MESSAGES[e]),h.validation){if(void 0===e)throw new TypeError("Control change must be identified with a valid name or an integer between 0 and 127.");if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new TypeError("Control change number must be an integer between 0 and 127.");if(!Number.isInteger(t)||!(t>=0&&t<=127))throw new TypeError("Control change value must be an integer between 0 and 127")}return this.send([(h.MIDI_CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),e,t],{time:r.toTimestamp(n.time)}),this}_selectNonRegisteredParameter(e,t={}){return this.sendControlChange(99,e[0],t),this.sendControlChange(98,e[1],t),this}_deselectRegisteredParameter(e={}){return this.sendControlChange(101,127,e),this.sendControlChange(100,127,e),this}_deselectNonRegisteredParameter(e={}){return this.sendControlChange(101,127,e),this.sendControlChange(100,127,e),this}_selectRegisteredParameter(e,t={}){return this.sendControlChange(101,e[0],t),this.sendControlChange(100,e[1],t),this}_setCurrentParameter(e,t={}){return e=[].concat(e),this.sendControlChange(6,e[0],t),e.length<2||this.sendControlChange(38,e[1],t),this}decrementRegisteredParameter(e,t={}){if(Array.isArray(e)||(e=h.MIDI_REGISTERED_PARAMETER[e]),h.validation){if(void 0===e)throw new TypeError("The specified registered parameter is invalid.");let t=!1;if(Object.getOwnPropertyNames(h.MIDI_REGISTERED_PARAMETER).forEach(n=>{h.MIDI_REGISTERED_PARAMETER[n][0]===e[0]&&h.MIDI_REGISTERED_PARAMETER[n][1]===e[1]&&(t=!0)}),!t)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(e,t),this.sendControlChange(97,0,t),this._deselectRegisteredParameter(t),this}incrementRegisteredParameter(e,t={}){if(Array.isArray(e)||(e=h.MIDI_REGISTERED_PARAMETER[e]),h.validation){if(void 0===e)throw new TypeError("The specified registered parameter is invalid.");let t=!1;if(Object.getOwnPropertyNames(h.MIDI_REGISTERED_PARAMETER).forEach(n=>{h.MIDI_REGISTERED_PARAMETER[n][0]===e[0]&&h.MIDI_REGISTERED_PARAMETER[n][1]===e[1]&&(t=!0)}),!t)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(e,t),this.sendControlChange(96,0,t),this._deselectRegisteredParameter(t),this}playNote(e,t={}){if(this.sendNoteOn(e,t),t.duration>0&&isFinite(String(t.duration).trim()||NaN)){let n={time:(r.toTimestamp(t.time)||h.time)+t.duration,release:t.release,rawRelease:t.rawRelease};this.sendNoteOff(e,n)}return this}sendNoteOff(e,t={}){if(h.validation){if(null!=t.rawRelease&&!(t.rawRelease>=0&&t.rawRelease<=127))throw new RangeError("The 'rawRelease' option must be an integer between 0 and 127");if(null!=t.release&&!(t.release>=0&&t.release<=1))throw new RangeError("The 'release' option must be an number between 0 and 1");t.rawVelocity&&(t.rawRelease=t.velocity,console.warn("The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.")),t.velocity&&(t.release=t.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let n=64;null!=t.rawRelease?n=t.rawRelease:isNaN(t.release)||(n=Math.round(127*t.release));const a=h.octaveOffset+this.output.octaveOffset+this.octaveOffset;return r.buildNoteArray(e,{rawRelease:parseInt(n)}).forEach(e=>{this.send([(h.MIDI_CHANNEL_MESSAGES.noteoff<<4)+(this.number-1),e.getOffsetNumber(a),e.rawRelease],{time:r.toTimestamp(t.time)})}),this}stopNote(e,t={}){return this.sendNoteOff(e,t)}sendNoteOn(e,t={}){if(h.validation){if(null!=t.rawAttack&&!(t.rawAttack>=0&&t.rawAttack<=127))throw new RangeError("The 'rawAttack' option must be an integer between 0 and 127");if(null!=t.attack&&!(t.attack>=0&&t.attack<=1))throw new RangeError("The 'attack' option must be an number between 0 and 1");t.rawVelocity&&(t.rawAttack=t.velocity,t.rawRelease=t.release,console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.")),t.velocity&&(t.attack=t.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let n=64;null!=t.rawAttack?n=t.rawAttack:isNaN(t.attack)||(n=Math.round(127*t.attack));const a=h.octaveOffset+this.output.octaveOffset+this.octaveOffset;return r.buildNoteArray(e,{rawAttack:n}).forEach(e=>{this.send([(h.MIDI_CHANNEL_MESSAGES.noteon<<4)+(this.number-1),e.getOffsetNumber(a),e.rawAttack],{time:r.toTimestamp(t.time)})}),this}sendChannelMode(e,t,n={}){if("string"==typeof e&&(e=h.MIDI_CHANNEL_MODE_MESSAGES[e]),h.validation){if(void 0===e)throw new TypeError("Invalid channel mode message name or number.");if(isNaN(e)||!(e>=120&&e<=127))throw new TypeError("Invalid channel mode message number.");if(isNaN(parseInt(t))||t<0||t>127)throw new RangeError("Value must be an integer between 0 and 127.")}return this.send([(h.MIDI_CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),e,t],{time:r.toTimestamp(n.time)}),this}setOmniMode(e,t={}){return void 0===e||e?this.sendChannelMode("omnimodeon",0,t):this.sendChannelMode("omnimodeoff",0,t),this}setChannelAftertouch(e,t={}){if(h.validation){if(isNaN(parseFloat(e)))throw new RangeError("Invalid channel aftertouch value.");if(t.rawValue){if(!(e>=0&&e<=127&&Number.isInteger(e)))throw new RangeError("Channel aftertouch raw value must be an integer between 0 and 127.")}else if(!(e>=0&&e<=1))throw new RangeError("Channel aftertouch value must be a float between 0 and 1.")}return this.send([(h.MIDI_CHANNEL_MESSAGES.channelaftertouch<<4)+(this.number-1),Math.round(127*e)],{time:r.toTimestamp(t.time)}),this}setMasterTuning(e,t={}){if(e=parseFloat(e)||0,h.validation&&!(e>-65&&e<64))throw new RangeError("The value must be a decimal number larger than -65 and smaller than 64.");let n=Math.floor(e)+64,r=e-Math.floor(e);r=Math.round((r+1)/2*16383);let a=r>>7&127,s=127&r;return this.setRegisteredParameter("channelcoarsetuning",n,t),this.setRegisteredParameter("channelfinetuning",[a,s],t),this}setModulationRange(e,t,n={}){if(h.validation){if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!(null==t||Number.isInteger(t)&&t>=0&&t<=127))throw new RangeError("If specified, the cents value must be an integer between 0 and 127.")}return t>=0&&t<=127||(t=0),this.setRegisteredParameter("modulationrange",[e,t],n),this}setNonRegisteredParameter(e,t,n={}){if(t=[].concat(t),h.validation){if(!Array.isArray(e)||!Number.isInteger(e[0])||!Number.isInteger(e[1]))throw new TypeError("The specified NRPN is invalid.");if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The first byte of the NRPN must be between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The second byte of the NRPN must be between 0 and 127.");t.forEach(e=>{if(!(e>=0&&e<=127))throw new RangeError("The data bytes of the NRPN must be between 0 and 127.")})}return this._selectNonRegisteredParameter(e,n),this._setCurrentParameter(t,n),this._deselectNonRegisteredParameter(n),this}setPitchBend(e,t={}){if(h.validation)if(t.rawValue&&Array.isArray(e)){if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The pitch bend LSB must be an integer between 0 and 127.")}else if(t.rawValue&&!Array.isArray(e)){if(!(e>=0&&e<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.")}else{if(isNaN(e)||null===e)throw new RangeError("Invalid pitch bend value.");if(!(e>=-1&&e<=1))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.")}let n=0,a=0;if(t.rawValue&&Array.isArray(e))n=e[0],a=e[1];else if(t.rawValue&&!Array.isArray(e))n=e;else{let t=Math.round((e+1)/2*16383);n=t>>7&127,a=127&t}return this.send([(h.MIDI_CHANNEL_MESSAGES.pitchbend<<4)+(this.number-1),a,n],{time:r.toTimestamp(t.time)}),this}setPitchBendRange(e,t,n={}){if(h.validation){if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!Number.isInteger(t)||!(t>=0&&t<=127))throw new RangeError("The cents value must be an integer between 0 and 127.")}return this.setRegisteredParameter("pitchbendrange",[e,t],n),this}setProgram(e,t={}){if(e=parseInt(e)||1,h.validation&&!(e>=1&&e<=128))throw new RangeError("The program number must be between 1 and 128.");return this.send([(h.MIDI_CHANNEL_MESSAGES.programchange<<4)+(this.number-1),e-1],{time:r.toTimestamp(t.time)}),this}setRegisteredParameter(e,t,n={}){if(Array.isArray(e)||(e=h.MIDI_REGISTERED_PARAMETER[e]),h.validation){if(!Number.isInteger(e[0])||!Number.isInteger(e[1]))throw new TypeError("The specified NRPN is invalid.");if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The first byte of the RPN must be between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The second byte of the RPN must be between 0 and 127.");[].concat(t).forEach(e=>{if(!(e>=0&&e<=127))throw new RangeError("The data bytes of the RPN must be between 0 and 127.")})}return this._selectRegisteredParameter(e,n),this._setCurrentParameter(t,n),this._deselectRegisteredParameter(n),this}setTuningBank(e,t={}){if(h.validation&&(!Number.isInteger(e)||!(e>=1&&e<=128)))throw new RangeError("The tuning bank number must be between 1 and 128.");return this.setRegisteredParameter("tuningbank",e-1,t),this}setTuningProgram(e,t={}){if(h.validation&&(!Number.isInteger(e)||!(e>=1&&e<=128)))throw new RangeError("The tuning program number must be between 1 and 128.");return this.setRegisteredParameter("tuningprogram",e-1,t),this}setLocalControl(e,t={}){return e?this.sendChannelMode("localcontrol",127,t):this.sendChannelMode("localcontrol",0,t)}turnNotesOff(e={}){return this.sendChannelMode("allnotesoff",0,e)}turnSoundOff(e={}){return this.sendChannelMode("allsoundoff",0,e)}resetAllControllers(e={}){return this.sendChannelMode("resetallcontrollers",0,e)}setPolyphonicMode(e,t={}){return"mono"===e?this.sendChannelMode("monomodeon",0,t):this.sendChannelMode("polymodeon",0,t)}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get output(){return this._output}get number(){return this._number}}class o extends e{constructor(e){super(),this._midiOutput=e,this._octaveOffset=0,this.channels=[];for(let e=1;e<=16;e++)this.channels[e]=new i(this,e);this._midiOutput.onstatechange=this._onStateChange.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(e=>e.destroy()),this.channels=[],this._midiOutput.onstatechange=null,await this.close(),this._midiOutput=null}_onStateChange(e){let t={timestamp:h.time};"open"===e.port.connection?(t.type="opened",t.target=this,this.emit("opened",t)):"closed"===e.port.connection&&"connected"===e.port.state?(t.type="closed",t.target=this,this.emit("closed",t)):"closed"===e.port.connection&&"disconnected"===e.port.state?(t.type="disconnected",t.target={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",t)):"pending"===e.port.connection&&"disconnected"===e.port.state||console.warn("This statechange event was not caught:",e.port.connection,e.port.state)}async open(){try{return await this._midiOutput.open(),Promise.resolve(this)}catch(e){return Promise.reject(e)}}async close(){this._midiOutput?await this._midiOutput.close():await Promise.resolve()}send(e,t={time:0},n){if(e instanceof l&&(e=h.isNode?e.data:e.rawData),e instanceof Uint8Array&&h.isNode&&(e=Array.from(e)),h.validation){if(Array.isArray(e)||e instanceof Uint8Array||(e=[e],Array.isArray(t)&&(e=e.concat(t)),t=n?{time:n}:{time:0}),!(parseInt(e[0])>=128&&parseInt(e[0])<=255))throw new RangeError("The first byte (status) must be an integer between 128 and 255.");e.slice(1).forEach(e=>{if(!((e=parseInt(e))>=0&&e<=255))throw new RangeError("Data bytes must be integers between 0 and 255.")}),t||(t={time:0})}return this._midiOutput.send(e,r.toTimestamp(t.time)),this}sendSysex(e,t=[],n={}){if(e=[].concat(e),t instanceof Uint8Array){const r=new Uint8Array(1+e.length+t.length+1);r[0]=h.MIDI_SYSTEM_MESSAGES.sysex,r.set(Uint8Array.from(e),1),r.set(t,1+e.length),r[r.length-1]=h.MIDI_SYSTEM_MESSAGES.sysexend,this.send(r,{time:n.time})}else{const r=e.concat(t,h.MIDI_SYSTEM_MESSAGES.sysexend);this.send([h.MIDI_SYSTEM_MESSAGES.sysex].concat(r),{time:n.time})}return this}clear(){return this._midiOutput.clear?this._midiOutput.clear():h.validation&&console.warn("The 'clear()' method has not yet been implemented in your environment."),this}sendTimecodeQuarterFrame(e,t={}){if(h.validation&&(e=parseInt(e),isNaN(e)||!(e>=0&&e<=127)))throw new RangeError("The value must be an integer between 0 and 127.");return this.send([h.MIDI_SYSTEM_MESSAGES.timecode,e],{time:t.time}),this}setSongPosition(e,t={}){var n=(e=Math.floor(e)||0)>>7&127,r=127&e;return this.send([h.MIDI_SYSTEM_MESSAGES.songposition,n,r],{time:t.time}),this}sendSongPosition(e,t={}){return h.validation&&console.warn("The sendSongPosition() method has been deprecated. Use setSongPosition() instead."),this.setSongPosition(e,t)}setSong(e,t={}){if(h.validation&&(e=parseInt(e),isNaN(e)||!(e>=1&&e<=128)))throw new RangeError("The program value must be between 1 and 128");return this.send([h.MIDI_SYSTEM_MESSAGES.songselect,e],{time:t.time}),this}sendSongSelect(e,t={}){return h.validation&&console.warn("The sendSongSelect() method has been deprecated. Use setSong() instead."),this.setSong(e,t)}sendTuneRequest(e={}){return this.send([h.MIDI_SYSTEM_MESSAGES.tunerequest],{time:e.time}),this}sendClock(e={}){return this.send([h.MIDI_SYSTEM_MESSAGES.clock],{time:e.time}),this}sendStart(e={}){return this.send([h.MIDI_SYSTEM_MESSAGES.start],{time:e.time}),this}sendContinue(e={}){return this.send([h.MIDI_SYSTEM_MESSAGES.continue],{time:e.time}),this}sendStop(e={}){return this.send([h.MIDI_SYSTEM_MESSAGES.stop],{time:e.time}),this}sendActiveSensing(e={}){return this.send([h.MIDI_SYSTEM_MESSAGES.activesensing],{time:e.time}),this}sendReset(e={}){return this.send([h.MIDI_SYSTEM_MESSAGES.reset],{time:e.time}),this}sendTuningRequest(e={}){return h.validation&&console.warn("The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead."),this.sendTuneRequest(e)}setKeyAftertouch(e,t,n={},a={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){let e=t;t=n,(n=a).channels=e}return null==n.channels&&(n.channels="all"),r.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].setKeyAftertouch(e,t,n)}),this}sendKeyAftertouch(e,t,n,r={}){return h.validation&&console.warn("The sendKeyAftertouch() method has been deprecated. Use setKeyAftertouch() instead."),r.channels=t,this.setKeyAftertouch(e,n,r)}sendControlChange(e,t,n={},a={}){if(h.validation&&(Array.isArray(n)||Number.isInteger(n)||"all"===n)){let e=n;(n=a).channels=e}return null==n.channels&&(n.channels="all"),r.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendControlChange(e,t,n)}),this}setPitchBendRange(e,t,n={},a={}){if(h.validation&&(Array.isArray(n)||Number.isInteger(n)||"all"===n)){let e=n;(n=a).channels=e}return null==n.channels&&(n.channels="all"),r.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].setPitchBendRange(e,t,n)}),this}setRegisteredParameter(e,t,n={},a={}){if(h.validation&&(Array.isArray(n)||Number.isInteger(n)||"all"===n)){let e=n;(n=a).channels=e}return null==n.channels&&(n.channels="all"),r.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].setRegisteredParameter(e,t,n)}),this}setChannelAftertouch(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){let e=t;(t=n).channels=e}return null==t.channels&&(t.channels="all"),r.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].setChannelAftertouch(e,t)}),this}sendChannelAftertouch(e,t,n={}){return h.validation&&console.warn("The sendChannelAftertouch() method has been deprecated. Use setChannelAftertouch()."),n.channels=t,this.setChannelAftertouch(e,n)}setPitchBend(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){let e=t;(t=n).channels=e}return null==t.channels&&(t.channels="all"),r.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].setPitchBend(e,t)}),this}sendPitchBend(e,t,n={}){return h.validation&&console.warn("The sendPitchBend() method has been deprecated. Use setPitchBend() instead."),n.channels=t,this.setPitchBend(e,n)}setProgram(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){let e=t;(t=n).channels=e}return null==t.channels&&(t.channels="all"),r.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].setProgram(e,t)}),this}sendProgramChange(e,t,n={}){return h.validation&&console.warn("The sendProgramChange() method has been deprecated. Use setProgram() instead."),n.channels=t,this.setProgram(e,n)}setModulationRange(e,t,n={},a={}){if(h.validation&&(Array.isArray(n)||Number.isInteger(n)||"all"===n)){let e=n;(n=a).channels=e}return null==n.channels&&(n.channels="all"),r.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].setModulationRange(e,t,n)}),this}setMasterTuning(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){let e=t;(t=n).channels=e}return null==t.channels&&(t.channels="all"),r.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].setMasterTuning(e,t)}),this}setTuningProgram(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){let e=t;(t=n).channels=e}return null==t.channels&&(t.channels="all"),r.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].setTuningProgram(e,t)}),this}setTuningBank(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){let e=t;(t=n).channels=e}return null==t.channels&&(t.channels="all"),r.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].setTuningBank(e,t)}),this}sendChannelMode(e,t,n={},a={}){if(h.validation&&(Array.isArray(n)||Number.isInteger(n)||"all"===n)){let e=n;(n=a).channels=e}return null==n.channels&&(n.channels="all"),r.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendChannelMode(e,t,n)}),this}turnSoundOff(e={},t={}){if(h.validation&&(Array.isArray(e)||Number.isInteger(e)||"all"===e)){let n=e;(e=t).channels=n}return null==e.channels&&(e.channels="all"),r.sanitizeChannels(e.channels).forEach(t=>{this.channels[t].turnSoundOff(e)}),this}turnNotesOff(e={},t={}){if(h.validation&&(Array.isArray(e)||Number.isInteger(e)||"all"===e)){let n=e;(e=t).channels=n}return null==e.channels&&(e.channels="all"),r.sanitizeChannels(e.channels).forEach(t=>{this.channels[t].turnNotesOff(e)}),this}resetAllControllers(e={},t={}){if(h.validation&&(Array.isArray(e)||Number.isInteger(e)||"all"===e)){let n=e;(e=t).channels=n}return null==e.channels&&(e.channels="all"),r.sanitizeChannels(e.channels).forEach(t=>{this.channels[t].resetAllControllers(e)}),this}setPolyphonicMode(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){let e=t;(t=n).channels=e}return null==t.channels&&(t.channels="all"),r.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].setPolyphonicMode(e,t)}),this}setLocalControl(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){let e=t;(t=n).channels=e}return null==t.channels&&(t.channels="all"),r.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].setLocalControl(e,t)}),this}setOmniMode(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){let e=t;(t=n).channels=e}return null==t.channels&&(t.channels="all"),r.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].setOmniMode(e,t)}),this}setNonRegisteredParameter(e,t,n={},a={}){if(h.validation&&(Array.isArray(n)||Number.isInteger(n)||"all"===n)){let e=n;(n=a).channels=e}return null==n.channels&&(n.channels="all"),r.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].setNonRegisteredParameter(e,t,n)}),this}incrementRegisteredParameter(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){let e=t;(t=n).channels=e}return null==t.channels&&(t.channels="all"),r.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].incrementRegisteredParameter(e,t)}),this}decrementRegisteredParameter(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){let e=t;(t=n).channels=e}return null==t.channels&&(t.channels="all"),r.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].decrementRegisteredParameter(e,t)}),this}sendNoteOff(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){let e=t;(t=n).channels=e}return null==t.channels&&(t.channels="all"),r.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendNoteOff(e,t)}),this}stopNote(e,t){return this.sendNoteOff(e,t)}playNote(e,t={},n={}){if(h.validation&&(t.rawVelocity&&console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' instead."),t.velocity&&console.warn("The 'velocity' option is deprecated. Use 'velocity' instead."),Array.isArray(t)||Number.isInteger(t)||"all"===t)){let e=t;(t=n).channels=e}return null==t.channels&&(t.channels="all"),r.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].playNote(e,t)}),this}sendNoteOn(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){let e=t;(t=n).channels=e}return null==t.channels&&(t.channels="all"),r.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendNoteOn(e,t)}),this}get name(){return this._midiOutput.name}get id(){return this._midiOutput.id}get connection(){return this._midiOutput.connection}get manufacturer(){return this._midiOutput.manufacturer}get state(){return this._midiOutput.state}get type(){return this._midiOutput.type}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}}class l{constructor(e){this.rawData=e,this.data=Array.from(this.rawData),this.statusByte=this.rawData[0],this.rawDataBytes=this.rawData.slice(1),this.dataBytes=this.data.slice(1),this.isChannelMessage=!1,this.isSystemMessage=!1,this.command=void 0,this.channel=void 0,this.manufacturerId=void 0,this.statusByte<240?(this.isChannelMessage=!0,this.command=this.statusByte>>4,this.channel=1+(15&this.statusByte)):(this.isSystemMessage=!0,this.command=this.statusByte),this.isChannelMessage?this.type=r.getPropertyByValue(h.MIDI_CHANNEL_MESSAGES,this.command):this.isSystemMessage&&(this.type=r.getPropertyByValue(h.MIDI_SYSTEM_MESSAGES,this.command)),this.statusByte===h.MIDI_SYSTEM_MESSAGES.sysex&&(0===this.dataBytes[0]?(this.manufacturerId=this.dataBytes.slice(0,3),this.dataBytes=this.dataBytes.slice(3,this.rawDataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(3,this.rawDataBytes.length-1)):(this.manufacturerId=[this.dataBytes[0]],this.dataBytes=this.dataBytes.slice(1,this.dataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(1,this.rawDataBytes.length-1)))}}global.performance=require("perf_hooks").performance,global.navigator=require("jzz");const h=new class extends e{constructor(){super(),this.defaults={note:{attack:r.toNormalized(64),release:r.toNormalized(64),duration:1/0}},this.interface=null,this.validation=!0,this._inputs=[],this._outputs=[],this._stateChangeQueue=[],this._octaveOffset=0}async enable(e={},t=!1){if(this.validation=!1!==e.validation,this.validation&&("function"==typeof e&&(e={callback:e,sysex:t}),t&&(e.sysex=!0)),this.enabled)return"function"==typeof e.callback&&e.callback(),Promise.resolve();const n={timestamp:this.time,target:this,type:"error",error:void 0},r={timestamp:this.time,target:this,type:"midiaccessgranted"},a={timestamp:this.time,target:this,type:"enabled"};try{this.interface=await navigator.requestMIDIAccess({sysex:e.sysex,software:e.software})}catch(t){return n.error=t,this.emit("error",n),"function"==typeof e.callback&&e.callback(t),Promise.reject(t)}this.emit("midiaccessgranted",r),this.interface.onstatechange=this._onInterfaceStateChange.bind(this);try{await this._updateInputsAndOutputs()}catch(t){return n.error=t,this.emit("error",n),"function"==typeof e.callback&&e.callback(t),Promise.reject(t)}return this.emit("enabled",a),"function"==typeof e.callback&&e.callback(),Promise.resolve(this)}async disable(){return this._destroyInputsAndOutputs().then(()=>{"function"==typeof navigator.close&&navigator.close(),this.interface&&(this.interface.onstatechange=void 0),this.interface=null;let e={timestamp:this.time,target:this,type:"disabled"};this.emit("disabled",e),this.removeListener()})}getInputById(e){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return!1}for(let t=0;t<this.inputs.length;t++)if(this.inputs[t].id===e.toString())return this.inputs[t];return!1}getInputByName(e){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return!1;e=e.toString()}for(let t=0;t<this.inputs.length;t++)if(~this.inputs[t].name.indexOf(e))return this.inputs[t];return!1}getOutputByName(e){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return!1;e=e.toString()}for(let t=0;t<this.outputs.length;t++)if(~this.outputs[t].name.indexOf(e))return this.outputs[t];return!1}getOutputById(e){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return!1}for(let t=0;t<this.outputs.length;t++)if(this.outputs[t].id===e.toString())return this.outputs[t];return!1}noteNameToNumber(e){return this.validation&&console.warn("The noteNameToNumber() method is deprecated. Use Utilities.toNoteNumber() instead."),r.toNoteNumber(e,this.octaveOffset)}getOctave(e){return this.validation&&(console.warn("The getOctave()is deprecated. Use Utilities.getNoteDetails() instead"),e=parseInt(e)),!isNaN(e)&&e>=0&&e<=127&&r.getNoteDetails(r.offsetNumber(e,this.octaveOffset)).octave}sanitizeChannels(e){return this.validation&&console.warn("The sanitizeChannels() method has been moved to the utilities class."),r.sanitizeChannels(e)}toMIDIChannels(e){return this.validation&&console.warn("The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead."),r.sanitizeChannels(e)}guessNoteNumber(e){return this.validation&&console.warn("The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead."),r.guessNoteNumber(e,this.octaveOffset)}getValidNoteArray(e,t={}){return this.validation&&console.warn("The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()"),r.buildNoteArray(e,t)}convertToTimestamp(e){return this.validation&&console.warn("The convertToTimestamp() method has been moved to Utilities.toTimestamp()."),r.toTimestamp(e)}async _destroyInputsAndOutputs(){let e=[];return this.inputs.forEach(t=>e.push(t.destroy())),this.outputs.forEach(t=>e.push(t.destroy())),Promise.all(e).then(()=>{this._inputs=[],this._outputs=[]})}_onInterfaceStateChange(e){this._updateInputsAndOutputs();let t={timestamp:e.timeStamp,type:e.port.state};this.interface&&"connected"===e.port.state?"output"===e.port.type?(t.port=this.getOutputById(e.port.id),t.target=t.port):"input"===e.port.type&&(t.port=this.getInputById(e.port.id),t.target=t.port):(t.port={connection:"closed",id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},t.target=t.port),this.emit(e.port.state,t)}async _updateInputsAndOutputs(){return Promise.all([this._updateInputs(),this._updateOutputs()])}async _updateInputs(){let e=[];for(let e=0;e<this._inputs.length;e++){let t=!0,n=this.interface.inputs.values();for(let r=n.next();r&&!r.done;r=n.next())if(this._inputs[e]._midiInput===r.value){t=!1;break}t&&this._inputs.splice(e,1)}return this.interface&&this.interface.inputs.forEach(t=>{let n=!0;for(let e=0;e<this._inputs.length;e++)this._inputs[e]._midiInput===t&&(n=!1);if(n){let n=new s(t);this._inputs.push(n),e.push(n.open())}}),Promise.all(e)}async _updateOutputs(){let e=[];for(let e=0;e<this._outputs.length;e++){let t=!0,n=this.interface.outputs.values();for(let r=n.next();r&&!r.done;r=n.next())if(this._outputs[e]._midiOutput===r.value){t=!1;break}t&&(this._outputs[e].close(),this._outputs.splice(e,1))}return this.interface&&this.interface.outputs.forEach(t=>{let n=!0;for(let e=0;e<this._outputs.length;e++)this._outputs[e]._midiOutput===t&&(n=!1);if(n){let n=new o(t);this._outputs.push(n),e.push(n.open())}}),Promise.all(e)}get enabled(){return null!==this.interface}get inputs(){return this._inputs}get isNode(){return"[object process]"===Object.prototype.toString.call("undefined"!=typeof process?process:0)}get isBrowser(){return"undefined"!=typeof window&&void 0!==window.document}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get outputs(){return this._outputs}get supported(){return"undefined"!=typeof navigator&&navigator.requestMIDIAccess}get sysexEnabled(){return!(!this.interface||!this.interface.sysexEnabled)}get time(){return performance.now()}get CHANNEL_EVENTS(){return["noteoff","controlchange","noteon","keyaftertouch","programchange","channelaftertouch","pitchbend","nrpn","allnotesoff","allsoundoff","localcontrol","monomode","omnimode","resetallcontrollers"]}get MIDI_CHANNEL_MESSAGES(){return{noteoff:8,noteon:9,keyaftertouch:10,controlchange:11,programchange:12,channelaftertouch:13,pitchbend:14}}get MIDI_SYSTEM_MESSAGES(){return{sysex:240,timecode:241,songposition:242,songselect:243,tunerequest:246,tuningrequest:246,sysexend:247,clock:248,start:250,continue:251,stop:252,activesensing:254,reset:255,midimessage:0,unknownsystemmessage:-1}}get MIDI_CHANNEL_MODE_MESSAGES(){return{allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}get MIDI_CONTROL_CHANGE_MESSAGES(){return{bankselectcoarse:0,modulationwheelcoarse:1,breathcontrollercoarse:2,footcontrollercoarse:4,portamentotimecoarse:5,dataentrycoarse:6,volumecoarse:7,balancecoarse:8,pancoarse:10,expressioncoarse:11,effectcontrol1coarse:12,effectcontrol2coarse:13,generalpurposeslider1:16,generalpurposeslider2:17,generalpurposeslider3:18,generalpurposeslider4:19,bankselectfine:32,modulationwheelfine:33,breathcontrollerfine:34,footcontrollerfine:36,portamentotimefine:37,dataentryfine:38,volumefine:39,balancefine:40,panfine:42,expressionfine:43,effectcontrol1fine:44,effectcontrol2fine:45,holdpedal:64,portamento:65,sustenutopedal:66,softpedal:67,legatopedal:68,hold2pedal:69,soundvariation:70,resonance:71,soundreleasetime:72,soundattacktime:73,brightness:74,soundcontrol6:75,soundcontrol7:76,soundcontrol8:77,soundcontrol9:78,soundcontrol10:79,generalpurposebutton1:80,generalpurposebutton2:81,generalpurposebutton3:82,generalpurposebutton4:83,reverblevel:91,tremololevel:92,choruslevel:93,celestelevel:94,phaserlevel:95,databuttonincrement:96,databuttondecrement:97,nonregisteredparametercoarse:98,nonregisteredparameterfine:99,registeredparametercoarse:100,registeredparameterfine:101,allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}get MIDI_INTERFACE_EVENTS(){return["connected","disconnected"]}get MIDI_NRPN_MESSAGES(){return{entrymsb:6,entrylsb:38,increment:96,decrement:97,paramlsb:98,parammsb:99,nullactiveparameter:127}}get MIDI_REGISTERED_PARAMETER(){return{pitchbendrange:[0,0],channelfinetuning:[0,1],channelcoarsetuning:[0,2],tuningprogram:[0,3],tuningbank:[0,4],modulationrange:[0,5],azimuthangle:[61,0],elevationangle:[61,1],gain:[61,2],distanceratio:[61,3],maximumdistance:[61,4],maximumdistancegain:[61,5],referencedistanceratio:[61,6],panspreadangle:[61,7],rollangle:[61,8]}}get NOTES(){return["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"]}};h.constructor=null,exports.Message=l,exports.Note=n,exports.Utilities=r,exports.WebMidi=h;
//# sourceMappingURL=webmidi.cjs.min.js.map
