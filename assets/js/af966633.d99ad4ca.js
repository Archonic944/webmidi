"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3968],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var r=a.createContext({}),p=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(r.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=o,m=d["".concat(r,".").concat(h)]||d[h]||u[h]||l;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=d;var s={};for(var r in t)hasOwnProperty.call(t,r)&&(s[r]=t[r]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},355:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const l={sidebar_position:3},i="Basics",s={unversionedId:"getting-started/basics",id:"getting-started/basics",title:"Basics",description:"Enabling the Library",source:"@site/docs/getting-started/basics.md",sourceDirName:"getting-started",slug:"/getting-started/basics",permalink:"/docs/getting-started/basics",draft:!1,editUrl:"https://github.com/djipco/webmidi/edit/master/website/docs/getting-started/basics.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/getting-started/installation"},next:{title:"Middle C & Octave Offset",permalink:"/docs/going-further/middle-c"}},r={},p=[{value:"Enabling the Library",id:"enabling-the-library",level:2},{value:"Listing Available Devices",id:"listing-available-devices",level:2},{value:"Listening For Incoming MIDI Messages",id:"listening-for-incoming-midi-messages",level:2},{value:"Sending Outgoing MIDI Messages",id:"sending-outgoing-midi-messages",level:2},{value:"Code Examples",id:"code-examples",level:2},{value:"Retrieve an output port/device using its id, name or array index",id:"retrieve-an-output-portdevice-using-its-id-name-or-array-index",level:3},{value:"Play a note on a specific MIDI channel (1)",id:"play-a-note-on-a-specific-midi-channel-1",level:3},{value:"Play a note on multiple channels at once",id:"play-a-note-on-multiple-channels-at-once",level:3},{value:"Play a note on a specific MIDI channel",id:"play-a-note-on-a-specific-midi-channel",level:3},{value:"Control note velocity",id:"control-note-velocity",level:3},{value:"Specify note duration",id:"specify-note-duration",level:3},{value:"Schedule notes",id:"schedule-notes",level:3},{value:"Manually stopping playback",id:"manually-stopping-playback",level:3},{value:"Sending a control change (a.k.a. CC) message",id:"sending-a-control-change-aka-cc-message",level:3},{value:"Set polyphonic aftertouch",id:"set-polyphonic-aftertouch",level:3},{value:"Set pitch bend value",id:"set-pitch-bend-value",level:3},{value:"Use Chained Methods",id:"use-chained-methods",level:3},{value:"Listen to event on single channel",id:"listen-to-event-on-single-channel",level:3},{value:"Listen to event on multiple channels at once",id:"listen-to-event-on-multiple-channels-at-once",level:3},{value:"Check for the presence of an event listener",id:"check-for-the-presence-of-an-event-listener",level:3},{value:"Remove listeners",id:"remove-listeners",level:3},{value:"What&#39;s Next",id:"whats-next",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"basics"},"Basics"),(0,o.kt)("h2",{id:"enabling-the-library"},"Enabling the Library"),(0,o.kt)("p",null,"The first step to get started is to enable the library. To do that, you simply call\n",(0,o.kt)("a",{parentName:"p",href:"/api/classes/WebMidi#enable"},(0,o.kt)("inlineCode",{parentName:"a"},"WebMidi.enable()")),". Starting with v3, the ",(0,o.kt)("inlineCode",{parentName:"p"},"enable()")," method returns a\npromise which is resolved when the library has been enabled:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'WebMidi\n  .enable()\n  .then(() => console.log("WebMidi enabled!"))\n  .catch(err => alert(err));\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"If you intend to use MIDI ",(0,o.kt)("strong",{parentName:"p"},"system exclusive")," messages, you must explicitly enable them by setting\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"sysex")," option to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'WebMidi\n  .enable({sysex: true})\n  .then(() => console.log("WebMidi with sysex enabled!"))\n  .catch(err => alert(err));\n'))),(0,o.kt)("h2",{id:"listing-available-devices"},"Listing Available Devices"),(0,o.kt)("p",null,"To interact with devices you need to know which ",(0,o.kt)("inlineCode",{parentName:"p"},"Input")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Output")," ports are available. Connect a\nMIDI device and try the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"WebMidi\n  .enable()\n  .then(onEnabled)\n  .catch(err => alert(err));\n\nfunction onEnabled() {\n  \n  // Inputs\n  WebMidi.inputs.forEach(input => console.log(input.manufacturer, input.name));\n  \n  // Outputs\n  WebMidi.outputs.forEach(output => console.log(output.manufacturer, output.name));\n\n}\n")),(0,o.kt)("p",null,"You should see your hardware and software devices appear in the console. Note that many devices make\navailable several input and/or output ports. "),(0,o.kt)("p",null,"You can retrieve a reference to an ",(0,o.kt)("a",{parentName:"p",href:"/api/classes/Input"},(0,o.kt)("inlineCode",{parentName:"a"},"Input"))," by using the\n",(0,o.kt)("a",{parentName:"p",href:"/api/classes/WebMidi#getInputByName"},(0,o.kt)("inlineCode",{parentName:"a"},"getInputByName()"))," or\n",(0,o.kt)("a",{parentName:"p",href:"/api/classes/WebMidi#getInputById"},(0,o.kt)("inlineCode",{parentName:"a"},"getInputById()"))," methods:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const myInput = WebMidi.getInputByName("MPK mini 3");\n')),(0,o.kt)("p",null,"Once you have a reference to the input, you can add listeners that will react when a message (such\nas a note press) arrives."),(0,o.kt)("h2",{id:"listening-for-incoming-midi-messages"},"Listening For Incoming MIDI Messages"),(0,o.kt)("p",null,"On a MIDI device, an input has 16 discrete channels. If you want to listen on all of them, you can\nadd a listener directly on the ",(0,o.kt)("a",{parentName:"p",href:"/api/classes/Input"},(0,o.kt)("inlineCode",{parentName:"a"},"Input"))," object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const myInput = WebMidi.getInputByName("MPK mini 3");\nmyInput.addListener("noteon", e => {\n  console.log(e.note.identifier);\n})\n')),(0,o.kt)("p",null,"Try playing a note on your device. You should see the note's name and octave in the console."),(0,o.kt)("p",null,"Obviously, you can listen to many more messages coming from your device. For a full list, check out\nthe ",(0,o.kt)("a",{parentName:"p",href:"/api/classes/Input#addListener"},(0,o.kt)("inlineCode",{parentName:"a"},"Input.addListener()"))," documentation."),(0,o.kt)("p",null,"It is also possible to listen to messages coming from a specific MIDI channel. For example, when\nI press the drum pads on my Akai MPK Mini, the messages are sent to channel 10:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const myInput = WebMidi.getInputByName("MPK mini 3");\nconst mySynth = myInput.channels[10]; // <-- the MIDI channel (10)\n\nmySynth.addListener("noteon", e => {\n  console.log(e.note.identifier, e.message.channel);\n})\n')),(0,o.kt)("p",null,"In this case, the listener only listens to ",(0,o.kt)("strong",{parentName:"p"},"noteon")," messages coming in from channel 10 of the\ninput device."),(0,o.kt)("h2",{id:"sending-outgoing-midi-messages"},"Sending Outgoing MIDI Messages"),(0,o.kt)("p",null,"To send messages to an external device, you must first get a reference to it. For that, you can use\nmethods such as ",(0,o.kt)("a",{parentName:"p",href:"/api/classes/WebMidi#getOutputByName"},(0,o.kt)("inlineCode",{parentName:"a"},"getOutputByName()"))," or\n",(0,o.kt)("a",{parentName:"p",href:"/api/classes/WebMidi#getOutputById"},(0,o.kt)("inlineCode",{parentName:"a"},"getOutputById()")),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const myOutput = WebMidi.getOutputByName("SP-404MKII");\n')),(0,o.kt)("p",null,"Then, you can use various methods to send your message. For example, if you want to tell you sampler\nto turn all sounds off, you could do the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const myOutput = WebMidi.getOutputByName("SP-404MKII");\nmyOutput.sendAllSoundOff();\n')),(0,o.kt)("p",null,"You can learn about all the the methods available to send data by looking at the documentation for\nthe ",(0,o.kt)("a",{parentName:"p",href:"/api/classes/Output"},(0,o.kt)("inlineCode",{parentName:"a"},"Output"))," object."),(0,o.kt)("p",null,"You can send messages to a specific MIDI channel by first grabbing a reference to the channel you\nwant. For example, on the Roland SP-404 MK II sampler, you can control a vocoder effet by sending a\n",(0,o.kt)("strong",{parentName:"p"},"pitchbend")," message on channel 11:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const myOutput = WebMidi.getOutputByName("SP-404MKII");\nconst vocoder = myOutput.channels[11];\nvocoder.sendPitchBend(-0.5);\n')),(0,o.kt)("p",null,"In this case, the ",(0,o.kt)("inlineCode",{parentName:"p"},"vocoder")," constant contains an  ",(0,o.kt)("a",{parentName:"p",href:"/api/classes/OutputChannel"},(0,o.kt)("inlineCode",{parentName:"a"},"OutputChannel")),"\nobject."),(0,o.kt)("h2",{id:"code-examples"},"Code Examples"),(0,o.kt)("p",null,"Here are various other examples to give you an idea of what is possible with the library. All the\nexamples below only work if the library has first been properly enabled with\n",(0,o.kt)("a",{parentName:"p",href:"/api/classes/WebMidi#enable"},(0,o.kt)("inlineCode",{parentName:"a"},"WebMidi.enable()")),"."),(0,o.kt)("h3",{id:"retrieve-an-output-portdevice-using-its-id-name-or-array-index"},"Retrieve an output port/device using its id, name or array index"),(0,o.kt)("p",null,"Different ways to retrieve an output. Beware that IDs are different from one platform to another and\non Node.js the ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," is the same as the ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let output1 = WebMidi.getOutputById("123456789");\nlet output2 = WebMidi.getOutputByName("Axiom Pro 25 Ext Out");\nlet output3 = WebMidi.outputs[0];\n')),(0,o.kt)("h3",{id:"play-a-note-on-a-specific-midi-channel-1"},"Play a note on a specific MIDI channel (1)"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"channels")," property of an ",(0,o.kt)("inlineCode",{parentName:"p"},"Output")," object contains references to 16 ",(0,o.kt)("inlineCode",{parentName:"p"},"OutputChannel")," objects\n(1-16)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let output = WebMidi.outputs[0];\nlet channel = output.channels[1];\nchannel.playNote("C3");\n')),(0,o.kt)("h3",{id:"play-a-note-on-multiple-channels-at-once"},"Play a note on multiple channels at once"),(0,o.kt)("p",null,"You can call ",(0,o.kt)("a",{parentName:"p",href:"/api/classes/Output#playNote"},(0,o.kt)("inlineCode",{parentName:"a"},"playNote()"))," (and various other methods) directly on\nthe ",(0,o.kt)("a",{parentName:"p",href:"/api/classes/Output"},(0,o.kt)("inlineCode",{parentName:"a"},"Output"))," object. This allows you to play a note on several channels at\nonce. For example, to play a note on channels 1, 2 and 3:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let output = WebMidi.outputs[0];\noutput.playNote("Gb4", [1, 2, 3]);\n')),(0,o.kt)("p",null,"You can also create a ",(0,o.kt)("a",{parentName:"p",href:"/api/classes/Note"},(0,o.kt)("inlineCode",{parentName:"a"},"Note"))," object and pass it to the\n",(0,o.kt)("a",{parentName:"p",href:"/api/classes/Output#playNote"},(0,o.kt)("inlineCode",{parentName:"a"},"playNote()"))," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const note = new Note("A4");\nconst output = WebMidi.outputs[0];\noutput.playNote(note);\n')),(0,o.kt)("h3",{id:"play-a-note-on-a-specific-midi-channel"},"Play a note on a specific MIDI channel"),(0,o.kt)("p",null,"To play a note on a specific MIDI channel, you can use the\n",(0,o.kt)("a",{parentName:"p",href:"/api/classes/OutputChannel#playNote"},(0,o.kt)("inlineCode",{parentName:"a"},"playNote()"))," method of the\n",(0,o.kt)("a",{parentName:"p",href:"/api/classes/OutputChannel"},(0,o.kt)("inlineCode",{parentName:"a"},"OutputChannel"))," object (instead of the one on the\n",(0,o.kt)("a",{parentName:"p",href:"/api/classes/Output"},(0,o.kt)("inlineCode",{parentName:"a"},"Output"))," object)."),(0,o.kt)("p",null,"For example, to play a chord on MIDI channel 1:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let output = WebMidi.outputs[0];\nlet channel = output.channels[1];\nchannel.playNote(["C3", "D#3", "G3"]);\n')),(0,o.kt)("h3",{id:"control-note-velocity"},"Control note velocity"),(0,o.kt)("p",null,"You can control attack and release velocities when playing a note by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"options")," parameter."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let output = WebMidi.outputs[0];\nlet channel = output.channels[1];\nchannel.playNote("C3", {attack: 0.5});\n')),(0,o.kt)("p",null,"If you prefer to use raw (7 bit) values between 0 and 127, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"rawAttack")," option\ninstead: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let output = WebMidi.outputs[0];\nlet channel = output.channels[1];\nchannel.playNote("C3", {rawAttack: 123});\n')),(0,o.kt)("h3",{id:"specify-note-duration"},"Specify note duration"),(0,o.kt)("p",null,"If you specify a duration (in decimal milliseconds) for the note, it will automatically be stopped\nafter the duration has expired. For example, to stop it after 1 second (1000 ms):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let output = WebMidi.outputs[0];\nlet channel = output.channels[1];\nchannel.playNote("C3", {duration: 1000});\n')),(0,o.kt)("h3",{id:"schedule-notes"},"Schedule notes"),(0,o.kt)("p",null,"You can specify an absolute or relative time to schedule note playback in the future:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'WebMidi.outputs[0].channels[1].playNote("C3", {time: WebMidi.time + 3000});\nWebMidi.outputs[0].channels[1].playNote("C3", {time: "+2000"});\n')),(0,o.kt)("p",null,"You can retrieve the current time with ",(0,o.kt)("a",{parentName:"p",href:"/api/classes/WebMidi#time"},(0,o.kt)("inlineCode",{parentName:"a"},"WebMidi.time")),". The time is in\nmilliseconds (decimal) relative to the navigation start of the document."),(0,o.kt)("h3",{id:"manually-stopping-playback"},"Manually stopping playback"),(0,o.kt)("p",null,"You can stop playback of a note right away or in the future."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'WebMidi.outputs[0].channels[1].stopNote("C3");\nWebMidi.outputs[0].channels[1].stopNote("C3", {time: "+2500"});\n')),(0,o.kt)("h3",{id:"sending-a-control-change-aka-cc-message"},"Sending a control change (a.k.a. CC) message"),(0,o.kt)("p",null,"There are various ways to send a control change message. The most common way is to send the message\nto a single channel. The first parameter is the controller, the second number is the value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Use controller number\nWebMidi.outputs[0].channels[1].sendControlChange(72, 64);\n\n// Use controller name\nWebMidi.outputs[0].channels[1].sendControlChange("volumecoarse", 123);\n')),(0,o.kt)("p",null,"As you can see above, you can use either a name or number (0-127) to identify the controller to\ntarget. A\n",(0,o.kt)("a",{parentName:"p",href:"https://webmidijs.org/api/classes/OutputChannel#sendControlChange"},"list of controller names")," can be\nfound in the API reference."),(0,o.kt)("p",null,"You can also send the control change message to several channels at once by using the\n",(0,o.kt)("inlineCode",{parentName:"p"},"sendControlChange()")," method of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Output")," object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Send to channels 1 through 3\nWebMidi.outputs[0].sendControlChange("pancoarse", 123, {channels: [1, 2, 3]});\n\n// Send to all channels\nWebMidi.outputs[0].sendControlChange(72, 56);\n')),(0,o.kt)("h3",{id:"set-polyphonic-aftertouch"},"Set polyphonic aftertouch"),(0,o.kt)("p",null,"Send polyphonic aftertouch message to channel 8:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'WebMidi.outputs[0].channels[8].sendKeyAftertouch("B#3", 0.25);\n')),(0,o.kt)("h3",{id:"set-pitch-bend-value"},"Set pitch bend value"),(0,o.kt)("p",null,"The value is between -1 and 1 (a value of 0 means no bend)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"WebMidi.outputs[0].channels[8].sendPitchBend(-0.25);\n")),(0,o.kt)("p",null,"You can set the range of the bend with\n",(0,o.kt)("a",{parentName:"p",href:"/api/classes/OutputChannel#sendPitchBendRange"},(0,o.kt)("inlineCode",{parentName:"a"},"OutputChannel.sendPitchBendRange()")),"."),(0,o.kt)("h3",{id:"use-chained-methods"},"Use Chained Methods"),(0,o.kt)("p",null,"Most methods return ",(0,o.kt)("inlineCode",{parentName:"p"},"this")," so you can chain them:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'WebMidi.outputs[0].channels[8]\n    .sendPitchBend(-0.25)\n    .playNote("F4");\n')),(0,o.kt)("h3",{id:"listen-to-event-on-single-channel"},"Listen to event on single channel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"WebMidi.inputs[0].channels[1].addListener(\"noteon\", e => {\n  console.log(`Received 'noteon' message (${e.note.name}${e.note.octave}).`);\n});\n")),(0,o.kt)("h3",{id:"listen-to-event-on-multiple-channels-at-once"},"Listen to event on multiple channels at once"),(0,o.kt)("p",null,"If you add a listener to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Input")," instead of the ",(0,o.kt)("inlineCode",{parentName:"p"},"InputChannel"),", you can listen on multiple\nchannels at once by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"channels")," option:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"WebMidi.inputs[0].addListener(\"controlchange\", e => {\n  console.log(`Received 'controlchange' message.`, e);\n}, {channels: [1, 2, 3]});\n")),(0,o.kt)("p",null,"If you do not specify a ",(0,o.kt)("inlineCode",{parentName:"p"},"channels")," option, the listener will listen on all channels."),(0,o.kt)("h3",{id:"check-for-the-presence-of-an-event-listener"},"Check for the presence of an event listener"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let channel = WebMidi.inputs[0].channels[1];\nlet test = e => console.log(e);\nchannel.addListener('programchange', test);\nconsole.log(\"Has event listener: \", channel.hasListener('programchange', test));\n")),(0,o.kt)("h3",{id:"remove-listeners"},"Remove listeners"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let channel = WebMidi.inputs[0].channels[1];\nlet test = e => console.log(e);\nchannel.removeListener("noteoff", test);  // specifically this one\nchannel.removeListener("noteoff");        // all noteoff on this channel\nchannel.removeListener();                 // all listeners\n')),(0,o.kt)("h2",{id:"whats-next"},"What's Next"),(0,o.kt)("p",null,"I hope this short guide helped you getting started. Obviously, the library can do a whole lot more.\nSome of that is covered in the ",(0,o.kt)("strong",{parentName:"p"},"Going Further")," section but all of it is detailed in the ",(0,o.kt)("a",{parentName:"p",href:"../../api"},"API\ndocumentation"),"."),(0,o.kt)("p",null,"If you need help, you can ask questions in the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/djipco/webmidi/discussions"},"Forum"),". If you want to stay posted, I suggest you\nsubscribe to our low-volume ",(0,o.kt)("a",{parentName:"p",href:"https://mailchi.mp/eeffe50651bd/webmidijs-newsletter"},"newsletter")," and\nfollow our ",(0,o.kt)("a",{parentName:"p",href:"https://twitter.com/webmidijs"},"@webmidijs")," account on Twitter."),(0,o.kt)("p",null,"Finally, if this software proves useful I cannot encourage you enough to support it by becoming a\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sponsors/djipco"},"sponsor")," on GitHub. "),(0,o.kt)("p",null,"-- ",(0,o.kt)("a",{parentName:"p",href:"../../about#who-created-this"},"Jean-Philippe")))}u.isMDXComponent=!0}}]);