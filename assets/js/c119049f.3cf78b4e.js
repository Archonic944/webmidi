"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[238],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return k}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),d=s(n),k=l,c=d["".concat(p,".").concat(k)]||d[k]||u[k]||i;return n?a.createElement(c,o(o({ref:t},m),{},{components:n})):a.createElement(c,o({ref:t},m))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,o=new Array(i);o[0]=d;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:l,o[1]=r;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5061:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return m},default:function(){return d}});var a=n(7462),l=n(3366),i=(n(7294),n(3905)),o=["components"],r={},p="OutputChannel",s={unversionedId:"classes/OutputChannel",id:"classes/OutputChannel",isDocsHomePage:!1,title:"OutputChannel",description:"The OutputChannel class represents a single output channel (1-16) from an output device. This",source:"@site/api/classes/OutputChannel.md",sourceDirName:"classes",slug:"/classes/OutputChannel",permalink:"/webmidi/api/classes/OutputChannel",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Output",permalink:"/webmidi/api/classes/Output"},next:{title:"Utilities",permalink:"/webmidi/api/classes/Utilities"}},m=[{value:"<code>new OutputChannel(...)</code>",id:"new-outputchannel",children:[]},{value:"Properties",id:"properties",children:[{value:"<code>.number</code>",id:"number",children:[]},{value:"<code>.octaveOffset</code>",id:"octaveoffset",children:[]},{value:"<code>.output</code>",id:"output",children:[]}]},{value:"Methods",id:"methods",children:[{value:"<code>.decrementRegisteredParameter(...)</code>",id:"decrementregisteredparameter",children:[]},{value:"<code>.incrementRegisteredParameter(...)</code>",id:"incrementregisteredparameter",children:[]},{value:"<code>.playNote(...)</code>",id:"playnote",children:[]},{value:"<code>.resetAllControllers(...)</code>",id:"resetallcontrollers",children:[]},{value:"<code>.send(...)</code>",id:"send",children:[]},{value:"<code>.sendChannelMode(...)</code>",id:"sendchannelmode",children:[]},{value:"<code>.sendControlChange(...)</code>",id:"sendcontrolchange",children:[]},{value:"<code>.sendNoteOff(...)</code>",id:"sendnoteoff",children:[]},{value:"<code>.sendNoteOn(...)</code>",id:"sendnoteon",children:[]},{value:"<code>.setChannelAftertouch(...)</code>",id:"setchannelaftertouch",children:[]},{value:"<code>.setKeyAftertouch(...)</code>",id:"setkeyaftertouch",children:[]},{value:"<code>.setLocalControl(...)</code>",id:"setlocalcontrol",children:[]},{value:"<code>.setMasterTuning(...)</code>",id:"setmastertuning",children:[]},{value:"<code>.setModulationRange(...)</code>",id:"setmodulationrange",children:[]},{value:"<code>.setNonRegisteredParameter(...)</code>",id:"setnonregisteredparameter",children:[]},{value:"<code>.setOmniMode(...)</code>",id:"setomnimode",children:[]},{value:"<code>.setPitchBend(...)</code>",id:"setpitchbend",children:[]},{value:"<code>.setPitchBendRange(...)</code>",id:"setpitchbendrange",children:[]},{value:"<code>.setPolyphonicMode(...)</code>",id:"setpolyphonicmode",children:[]},{value:"<code>.setProgram(...)</code>",id:"setprogram",children:[]},{value:"<code>.setRegisteredParameter(...)</code>",id:"setregisteredparameter",children:[]},{value:"<code>.setTuningBank(...)</code>",id:"settuningbank",children:[]},{value:"<code>.setTuningProgram(...)</code>",id:"settuningprogram",children:[]},{value:"<code>.stopNote(...)</code>",id:"stopnote",children:[]},{value:"<code>.turnNotesOff(...)</code>",id:"turnnotesoff",children:[]},{value:"<code>.turnSoundOff(...)</code>",id:"turnsoundoff",children:[]}]}],u={toc:m};function d(e){var t=e.components,n=(0,l.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"outputchannel"},"OutputChannel"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"OutputChannel")," class represents a single output channel (1-16) from an output device. This\nobject is derived from the host's MIDI subsystem and cannot be instantiated directly."),(0,i.kt)("p",null,"All 16 ",(0,i.kt)("inlineCode",{parentName:"p"},"OutputChannel")," objects can be found inside the parent output's\n","[channels]","{@link Output#channels} property."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Since"),": 3.0.0"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Extends"),": ",(0,i.kt)("a",{parentName:"p",href:"EventEmitter"},(0,i.kt)("inlineCode",{parentName:"a"},"EventEmitter"))),(0,i.kt)("h3",{id:"new-outputchannel"},(0,i.kt)("inlineCode",{parentName:"h3"},"new OutputChannel(...)")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"OutputChannel(output, number)")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"number"},(0,i.kt)("inlineCode",{parentName:"h3"},".number")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type"),": number"),(0,i.kt)("p",null,"This channel's MIDI number (1-16)"),(0,i.kt)("h3",{id:"octaveoffset"},(0,i.kt)("inlineCode",{parentName:"h3"},".octaveOffset")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type"),": number"),(0,i.kt)("p",null,"An integer to offset the reported octave of outgoing note-specific messages (",(0,i.kt)("inlineCode",{parentName:"p"},"noteon"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"noteoff")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"keyaftertouch"),"). By default, middle C (MIDI note number 60) is placed on the 4th\noctave (C4)."),(0,i.kt)("p",null,"Note that this value is combined with the global offset value defined on the ",(0,i.kt)("inlineCode",{parentName:"p"},"WebMidi")," object\nand with the value defined on the parent ",(0,i.kt)("inlineCode",{parentName:"p"},"Output")," object."),(0,i.kt)("h3",{id:"output"},(0,i.kt)("inlineCode",{parentName:"h3"},".output")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type"),": Output"),(0,i.kt)("p",null,"The parent {@link Output} this channel belongs to"),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"decrementregisteredparameter"},(0,i.kt)("inlineCode",{parentName:"h3"},".decrementRegisteredParameter(...)")),(0,i.kt)("p",null,"Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\nnames that can be used with this function:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Pitchbend Range (0x00, 0x00): ",(0,i.kt)("inlineCode",{parentName:"li"},'"pitchbendrange"')),(0,i.kt)("li",{parentName:"ul"},"Channel Fine Tuning (0x00, 0x01): ",(0,i.kt)("inlineCode",{parentName:"li"},'"channelfinetuning"')),(0,i.kt)("li",{parentName:"ul"},"Channel Coarse Tuning (0x00, 0x02): ",(0,i.kt)("inlineCode",{parentName:"li"},'"channelcoarsetuning"')),(0,i.kt)("li",{parentName:"ul"},"Tuning Program (0x00, 0x03): ",(0,i.kt)("inlineCode",{parentName:"li"},'"tuningprogram"')),(0,i.kt)("li",{parentName:"ul"},"Tuning Bank (0x00, 0x04): ",(0,i.kt)("inlineCode",{parentName:"li"},'"tuningbank"')),(0,i.kt)("li",{parentName:"ul"},"Modulation Range (0x00, 0x05): ",(0,i.kt)("inlineCode",{parentName:"li"},'"modulationrange"')),(0,i.kt)("li",{parentName:"ul"},"Azimuth Angle (0x3D, 0x00): ",(0,i.kt)("inlineCode",{parentName:"li"},'"azimuthangle"')),(0,i.kt)("li",{parentName:"ul"},"Elevation Angle (0x3D, 0x01): ",(0,i.kt)("inlineCode",{parentName:"li"},'"elevationangle"')),(0,i.kt)("li",{parentName:"ul"},"Gain (0x3D, 0x02): ",(0,i.kt)("inlineCode",{parentName:"li"},'"gain"')),(0,i.kt)("li",{parentName:"ul"},"Distance Ratio (0x3D, 0x03): ",(0,i.kt)("inlineCode",{parentName:"li"},'"distanceratio"')),(0,i.kt)("li",{parentName:"ul"},"Maximum Distance (0x3D, 0x04): ",(0,i.kt)("inlineCode",{parentName:"li"},'"maximumdistance"')),(0,i.kt)("li",{parentName:"ul"},"Maximum Distance Gain (0x3D, 0x05): ",(0,i.kt)("inlineCode",{parentName:"li"},'"maximumdistancegain"')),(0,i.kt)("li",{parentName:"ul"},"Reference Distance Ratio (0x3D, 0x06): ",(0,i.kt)("inlineCode",{parentName:"li"},'"referencedistanceratio"')),(0,i.kt)("li",{parentName:"ul"},"Pan Spread Angle (0x3D, 0x07): ",(0,i.kt)("inlineCode",{parentName:"li"},'"panspreadangle"')),(0,i.kt)("li",{parentName:"ul"},"Roll Angle (0x3D, 0x08): ",(0,i.kt)("inlineCode",{parentName:"li"},'"rollangle"'))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"decrementRegisteredParameter(parameter, options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"incrementregisteredparameter"},(0,i.kt)("inlineCode",{parentName:"h3"},".incrementRegisteredParameter(...)")),(0,i.kt)("p",null,"Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\nnames that can be used with this function:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Pitchbend Range (0x00, 0x00): ",(0,i.kt)("inlineCode",{parentName:"li"},'"pitchbendrange"')),(0,i.kt)("li",{parentName:"ul"},"Channel Fine Tuning (0x00, 0x01): ",(0,i.kt)("inlineCode",{parentName:"li"},'"channelfinetuning"')),(0,i.kt)("li",{parentName:"ul"},"Channel Coarse Tuning (0x00, 0x02): ",(0,i.kt)("inlineCode",{parentName:"li"},'"channelcoarsetuning"')),(0,i.kt)("li",{parentName:"ul"},"Tuning Program (0x00, 0x03): ",(0,i.kt)("inlineCode",{parentName:"li"},'"tuningprogram"')),(0,i.kt)("li",{parentName:"ul"},"Tuning Bank (0x00, 0x04): ",(0,i.kt)("inlineCode",{parentName:"li"},'"tuningbank"')),(0,i.kt)("li",{parentName:"ul"},"Modulation Range (0x00, 0x05): ",(0,i.kt)("inlineCode",{parentName:"li"},'"modulationrange"')),(0,i.kt)("li",{parentName:"ul"},"Azimuth Angle (0x3D, 0x00): ",(0,i.kt)("inlineCode",{parentName:"li"},'"azimuthangle"')),(0,i.kt)("li",{parentName:"ul"},"Elevation Angle (0x3D, 0x01): ",(0,i.kt)("inlineCode",{parentName:"li"},'"elevationangle"')),(0,i.kt)("li",{parentName:"ul"},"Gain (0x3D, 0x02): ",(0,i.kt)("inlineCode",{parentName:"li"},'"gain"')),(0,i.kt)("li",{parentName:"ul"},"Distance Ratio (0x3D, 0x03): ",(0,i.kt)("inlineCode",{parentName:"li"},'"distanceratio"')),(0,i.kt)("li",{parentName:"ul"},"Maximum Distance (0x3D, 0x04): ",(0,i.kt)("inlineCode",{parentName:"li"},'"maximumdistance"')),(0,i.kt)("li",{parentName:"ul"},"Maximum Distance Gain (0x3D, 0x05): ",(0,i.kt)("inlineCode",{parentName:"li"},'"maximumdistancegain"')),(0,i.kt)("li",{parentName:"ul"},"Reference Distance Ratio (0x3D, 0x06): ",(0,i.kt)("inlineCode",{parentName:"li"},'"referencedistanceratio"')),(0,i.kt)("li",{parentName:"ul"},"Pan Spread Angle (0x3D, 0x07): ",(0,i.kt)("inlineCode",{parentName:"li"},'"panspreadangle"')),(0,i.kt)("li",{parentName:"ul"},"Roll Angle (0x3D, 0x08): ",(0,i.kt)("inlineCode",{parentName:"li"},'"rollangle"'))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"incrementRegisteredParameter(parameter, options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"playnote"},(0,i.kt)("inlineCode",{parentName:"h3"},".playNote(...)")),(0,i.kt)("p",null,"Plays a note or an array of notes on the channel. The first parameter is the note to play. It\ncan be a single value or an array of the following valid values:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A {@link Note} object"),(0,i.kt)("li",{parentName:"ul"},"A MIDI note number (integer between ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"127"),")"),(0,i.kt)("li",{parentName:"ul"},"A note name, followed by the octave (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},'"C3"'),", ",(0,i.kt)("inlineCode",{parentName:"li"},'"G#4"'),", ",(0,i.kt)("inlineCode",{parentName:"li"},'"F-1"'),", ",(0,i.kt)("inlineCode",{parentName:"li"},'"Db7"'),")")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"playNote()")," method sends a ",(0,i.kt)("strong",{parentName:"p"},"note on")," MIDI message for all specified notes on all\nspecified channels. If a ",(0,i.kt)("inlineCode",{parentName:"p"},"duration")," is set in the ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," parameter or in the {@link Note}\nobject's ","[duration]","{@link Note#duration} property, it will also schedule a ",(0,i.kt)("strong",{parentName:"p"},"note off")," message\nto end the note after said duration. If no ",(0,i.kt)("inlineCode",{parentName:"p"},"duration")," is set, the note will simply play until\na matching ",(0,i.kt)("strong",{parentName:"p"},"note off")," message is sent with ","[stopNote()]","{@link OutputChannel#stopNote} or\n","[sendNoteOff()]","{@link OutputChannel#sendNoteOff}."),(0,i.kt)("p",null," The execution of the ",(0,i.kt)("strong",{parentName:"p"},"note on")," command can be delayed by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"time")," property of the\n",(0,i.kt)("inlineCode",{parentName:"p"},"options")," parameter."),(0,i.kt)("p",null,"When using {@link Note} objects, the durations and velocities defined in the {@link Note}\nobjects have precedence over the ones specified via the method's ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," parameter."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": As per the MIDI standard, a ",(0,i.kt)("strong",{parentName:"p"},"note on")," message with an attack velocity of ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," is\nfunctionally equivalent to a ",(0,i.kt)("strong",{parentName:"p"},"note off")," message."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"playNote(note, options, options.duration, options.attack, options.rawAttack, options.release, options.rawRelease, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"resetallcontrollers"},(0,i.kt)("inlineCode",{parentName:"h3"},".resetAllControllers(...)")),(0,i.kt)("p",null,"Sends a ",(0,i.kt)("strong",{parentName:"p"},"reset all controllers")," channel mode message. This resets all controllers, such as\nthe pitch bend, to their default value."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"resetAllControllers(options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"send"},(0,i.kt)("inlineCode",{parentName:"h3"},".send(...)")),(0,i.kt)("p",null,"Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\nsent immediately. The message should be an array of 8 bit unsigned integers (0-225), a\n","[Uint8Array]","{@link ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array%7D"},"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}"),"\nobject or a ",(0,i.kt)("inlineCode",{parentName:"p"},"Message")," object."),(0,i.kt)("p",null,"It is usually not necessary to use this method directly as you can use one of the simpler\nhelper methods such as ",(0,i.kt)("inlineCode",{parentName:"p"},"playNote()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"stopNote()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"sendControlChange()"),", etc."),(0,i.kt)("p",null,"Details on the format of MIDI messages are available in the summary of\n","[MIDI messages]","{@link ",(0,i.kt)("a",{parentName:"p",href:"https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message%7D"},"https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}"),"\nfrom the MIDI Manufacturers Association."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"send(message, options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"sendchannelmode"},(0,i.kt)("inlineCode",{parentName:"h3"},".sendChannelMode(...)")),(0,i.kt)("p",null,"Sends a MIDI ",(0,i.kt)("strong",{parentName:"p"},"channel mode")," message. The channel mode message to send can be specified\nnumerically or by using one of the following common names:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"allsoundoff"')," (#120)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"resetallcontrollers"')," (#121)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"localcontrol"')," (#122)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"allnotesoff"')," (#123)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"omnimodeoff"')," (#124)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"omnimodeon"')," (#125)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"monomodeon"')," (#126)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"polymodeon"')," (#127)")),(0,i.kt)("p",null,"It should be noted that, per the MIDI specification, only ",(0,i.kt)("inlineCode",{parentName:"p"},"localcontrol")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"monomodeon")," may\nrequire a value that's not zero. For that reason, the ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," parameter is optional and\ndefaults to 0."),(0,i.kt)("p",null,"To make it easier, all channel mode messages have a matching helper method:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"[turnSoundOff()]","{@link Output#turnSoundOff}"),(0,i.kt)("li",{parentName:"ul"},"[resetAllControllers()]","{@link Output#resetAllControllers}"),(0,i.kt)("li",{parentName:"ul"},"[setLocalControl()]","{@link Output#turnSoundOff}"),(0,i.kt)("li",{parentName:"ul"},"[turnNotesOff()]","{@link Output#turnNotesOff}"),(0,i.kt)("li",{parentName:"ul"},"[setOmniMode()]","{@link Output#setOmniMode}"),(0,i.kt)("li",{parentName:"ul"},"[setPolyphonicMode()]","{@link Output#setPolyphonicMode}")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"sendChannelMode(command, value, options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"sendcontrolchange"},(0,i.kt)("inlineCode",{parentName:"h3"},".sendControlChange(...)")),(0,i.kt)("p",null,"Sends a MIDI ",(0,i.kt)("strong",{parentName:"p"},"control change")," message to the channel at the scheduled time. The control\nchange message to send can be specified numerically (0 to 127) or by using one of the following\ncommon names:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"bankselectcoarse")," (#0)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"modulationwheelcoarse")," (#1)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"breathcontrollercoarse")," (#2)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"footcontrollercoarse")," (#4)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"portamentotimecoarse")," (#5)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"dataentrycoarse")," (#6)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"volumecoarse")," (#7)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"balancecoarse")," (#8)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"pancoarse")," (#10)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"expressioncoarse")," (#11)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"effectcontrol1coarse")," (#12)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"effectcontrol2coarse")," (#13)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"generalpurposeslider1")," (#16)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"generalpurposeslider2")," (#17)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"generalpurposeslider3")," (#18)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"generalpurposeslider4")," (#19)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"bankselectfine")," (#32)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"modulationwheelfine")," (#33)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"breathcontrollerfine")," (#34)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"footcontrollerfine")," (#36)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"portamentotimefine")," (#37)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"dataentryfine")," (#38)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"volumefine")," (#39)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"balancefine")," (#40)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"panfine")," (#42)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"expressionfine")," (#43)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"effectcontrol1fine")," (#44)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"effectcontrol2fine")," (#45)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"holdpedal")," (#64)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"portamento")," (#65)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"sustenutopedal")," (#66)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"softpedal")," (#67)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"legatopedal")," (#68)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"hold2pedal")," (#69)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"soundvariation")," (#70)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"resonance")," (#71)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"soundreleasetime")," (#72)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"soundattacktime")," (#73)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"brightness")," (#74)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"soundcontrol6")," (#75)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"soundcontrol7")," (#76)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"soundcontrol8")," (#77)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"soundcontrol9")," (#78)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"soundcontrol10")," (#79)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"generalpurposebutton1")," (#80)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"generalpurposebutton2")," (#81)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"generalpurposebutton3")," (#82)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"generalpurposebutton4")," (#83)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"reverblevel")," (#91)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"tremololevel")," (#92)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"choruslevel")," (#93)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"celestelevel")," (#94)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"phaserlevel")," (#95)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"databuttonincrement")," (#96)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"databuttondecrement")," (#97)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"nonregisteredparametercoarse")," (#98)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"nonregisteredparameterfine")," (#99)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"registeredparametercoarse")," (#100)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"registeredparameterfine")," (#101)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"allsoundoff")," (#120)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"resetallcontrollers")," (#121)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"localcontrol")," (#122)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"allnotesoff")," (#123)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"omnimodeoff")," (#124)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"omnimodeon")," (#125)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"monomodeon")," (#126)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"polymodeon")," (#127)"))),(0,i.kt)("p",null,"As you can see above, not all control change message have a matching common name. This\ndoes not mean you cannot use the others. It simply means you will need to use their number\n(0-127) instead of their name. While you can still use them, numbers 120 to 127 are usually\nreserved for ",(0,i.kt)("em",{parentName:"p"},"channel mode")," messages. See\n","[sendChannelMode()]","{@link OutputChannel#sendChannelMode} method for more info."),(0,i.kt)("p",null,"To view a detailed list of all available ",(0,i.kt)("strong",{parentName:"p"},"control change"),' messages, please consult "Table 3 -\nControl Change Messages" from the ',(0,i.kt)("a",{parentName:"p",href:"https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2"},"MIDI Messages"),"\nspecification."),(0,i.kt)("p",null,"Note: messages #0-31 (MSB) are paired with messages #32-63 (LSB). For example, message #1\n(modulationwheelcoarse) can be accompanied by a second control change message for\nmodulationwheelfine to achieve a greater level of precision. if you want to specify both MSB\nand LSB for messages between 0 and 31, you can do so by passing a 2-value array as the second\nparameter."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"sendControlChange(controller, value, options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"sendnoteoff"},(0,i.kt)("inlineCode",{parentName:"h3"},".sendNoteOff(...)")),(0,i.kt)("p",null,"Sends a ",(0,i.kt)("strong",{parentName:"p"},"note off")," message for the specified notes on the channel. The first parameter is the\nnote. It can be a single value or an array of the following valid values:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A MIDI note number (integer between ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"127"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A note name, followed by the octave (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},'"C3"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},'"G#4"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},'"F-1"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},'"Db7"'),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A {@link Note} object"),(0,i.kt)("p",{parentName:"li"}," The execution of the ",(0,i.kt)("strong",{parentName:"p"},"note off")," command can be delayed by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"time")," property of the\n",(0,i.kt)("inlineCode",{parentName:"p"},"options")," parameter."))),(0,i.kt)("p",null,"When using {@link Note} objects, the release velocity defined in the {@link Note} objects has\nprecedence over the one specified via the method's ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," parameter."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"sendNoteOff(note, options, options.time, options.release, options.rawRelease) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"sendnoteon"},(0,i.kt)("inlineCode",{parentName:"h3"},".sendNoteOn(...)")),(0,i.kt)("p",null,"Sends a ",(0,i.kt)("strong",{parentName:"p"},"note on")," message for the specified note(s) on the channel. The first parameter is\nthe note. It can be a single value or an array of the following valid values:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A {@link Note} object")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A MIDI note number (integer between ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"127"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A note name, followed by the octave (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},'"C3"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},'"G#4"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},'"F-1"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},'"Db7"'),")"),(0,i.kt)("p",{parentName:"li"},"When passing a {@link Note} object or a note name, the ",(0,i.kt)("inlineCode",{parentName:"p"},"octaveOffset")," will be applied. This is\nnot the case when using a note number number. In this case, we assume you know exactly which\nMIDI note number should be sent out."))),(0,i.kt)("p",null," The execution of the ",(0,i.kt)("strong",{parentName:"p"},"note on")," command can be delayed by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"time")," property of the\n",(0,i.kt)("inlineCode",{parentName:"p"},"options")," parameter."),(0,i.kt)("p",null,"When using {@link Note} objects, the attack velocity defined in the {@link Note} objects has\nprecedence over the one specified via the method's ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," parameter. Also, the ",(0,i.kt)("inlineCode",{parentName:"p"},"duration")," is\nignored. If you want to also send a ",(0,i.kt)("strong",{parentName:"p"},"note off")," message, use the\n","[playNote()]","{@link Output#playNote} method instead."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": As per the MIDI standard, a ",(0,i.kt)("strong",{parentName:"p"},"note on")," message with an attack velocity of ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," is\nfunctionally equivalent to a ",(0,i.kt)("strong",{parentName:"p"},"note off")," message."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"sendNoteOn(note, options, options.time, options.attack, options.rawAttack) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"setchannelaftertouch"},(0,i.kt)("inlineCode",{parentName:"h3"},".setChannelAftertouch(...)")),(0,i.kt)("p",null,"Sends a MIDI ",(0,i.kt)("strong",{parentName:"p"},"channel aftertouch")," message. For key-specific aftertouch, you should instead\nuse ","[setKeyAftertouch()]","{@link Output#setKeyAftertouch}."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"setChannelAftertouch(pressure, options, options.rawValue, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"setkeyaftertouch"},(0,i.kt)("inlineCode",{parentName:"h3"},".setKeyAftertouch(...)")),(0,i.kt)("p",null,"Sends a MIDI ",(0,i.kt)("strong",{parentName:"p"},"key aftertouch")," message at the scheduled time. This is a key-specific\naftertouch. For a channel-wide aftertouch message, use\n","[setChannelAftertouch()]","{@link Output#setChannelAftertouch}."),(0,i.kt)("p",null,"The key can be a single value or an array of the following valid values:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A MIDI note number (integer between ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"127"),")"),(0,i.kt)("li",{parentName:"ul"},"A note identifier such as ",(0,i.kt)("inlineCode",{parentName:"li"},'"C3"'),", ",(0,i.kt)("inlineCode",{parentName:"li"},'"G#4"'),", ",(0,i.kt)("inlineCode",{parentName:"li"},'"F-1"'),", ",(0,i.kt)("inlineCode",{parentName:"li"},'"Db7"'),", etc.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"setKeyAftertouch(target, pressure, options, options.useRawValue, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"setlocalcontrol"},(0,i.kt)("inlineCode",{parentName:"h3"},".setLocalControl(...)")),(0,i.kt)("p",null,"Turns local control on or off. Local control is usually enabled by default. If you disable it,\nthe instrument will no longer trigger its own sounds. It will only send the MIDI messages to\nits out port."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"setLocalControl(state, options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"setmastertuning"},(0,i.kt)("inlineCode",{parentName:"h3"},".setMasterTuning(...)")),(0,i.kt)("p",null,"Sends a ",(0,i.kt)("strong",{parentName:"p"},"master tuning")," message. The value is decimal and must be larger than -65 semitones\nand smaller than 64 semitones."),(0,i.kt)("p",null,"Because of the way the MIDI specification works, the decimal portion of the value will be\nencoded with a resolution of 14bit. The integer portion must be between -64 and 63\ninclusively. This function actually generates two MIDI messages: a ",(0,i.kt)("strong",{parentName:"p"},"Master Coarse Tuning")," and\na ",(0,i.kt)("strong",{parentName:"p"},"Master Fine Tuning")," RPN messages."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"setMasterTuning(value, options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"setmodulationrange"},(0,i.kt)("inlineCode",{parentName:"h3"},".setModulationRange(...)")),(0,i.kt)("p",null,"Sends a ",(0,i.kt)("strong",{parentName:"p"},"modulation depth range")," message to adjust the depth of the modulation wheel's range.\nThe range can be specified with the ",(0,i.kt)("inlineCode",{parentName:"p"},"semitones")," parameter, the ",(0,i.kt)("inlineCode",{parentName:"p"},"cents")," parameter or by\nspecifying both parameters at the same time."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"setModulationRange(semitones, cents, options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"setnonregisteredparameter"},(0,i.kt)("inlineCode",{parentName:"h3"},".setNonRegisteredParameter(...)")),(0,i.kt)("p",null,"Sets a non-registered parameter (NRPN) to the specified value. The NRPN is selected by passing\nin a two-position array specifying the values of the two control bytes. The value is specified\nby passing in a single integer (most cases) or an array of two integers."),(0,i.kt)("p",null,"NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\nthey see fit. For example, according to the Roland GS specification, you can control the\n",(0,i.kt)("strong",{parentName:"p"},"vibrato rate")," using NRPN (1, 8). Therefore, to set the ",(0,i.kt)("strong",{parentName:"p"},"vibrato rate")," value to ",(0,i.kt)("strong",{parentName:"p"},"123")," you\nwould use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"WebMidi.outputs[0].channels[0].setNonRegisteredParameter([1, 8], 123);\n")),(0,i.kt)("p",null,"In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\nwould use a 2-position array. For example, for its ",(0,i.kt)("strong",{parentName:"p"},"ClockBPM")," parameter (2, 63), Novation\nuses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\nvalue to send was 10, you could use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"WebMidi.outputs[0].channels[0].setNonRegisteredParameter([2, 63], [0, 10]);\n")),(0,i.kt)("p",null,"For further implementation details, refer to the manufacturer's documentation."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"setNonRegisteredParameter(parameter, data, options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"setomnimode"},(0,i.kt)("inlineCode",{parentName:"h3"},".setOmniMode(...)")),(0,i.kt)("p",null,"Sets OMNI mode to ",(0,i.kt)("inlineCode",{parentName:"p"},'"on"')," or ",(0,i.kt)("inlineCode",{parentName:"p"},'"off"'),". MIDI's OMNI mode causes the instrument to respond to\nmessages from all channels."),(0,i.kt)("p",null,"It should be noted that support for OMNI mode is not as common as it used to be."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"setOmniMode(state, options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"setpitchbend"},(0,i.kt)("inlineCode",{parentName:"h3"},".setPitchBend(...)")),(0,i.kt)("p",null,"Sends a MIDI ",(0,i.kt)("strong",{parentName:"p"},"pitch bend")," message at the scheduled time."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"setPitchBend(value, options, options.rawValue, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"setpitchbendrange"},(0,i.kt)("inlineCode",{parentName:"h3"},".setPitchBendRange(...)")),(0,i.kt)("p",null,"Sends a pitch bend range message to the specified channel(s) at the scheduled time so that they\nadjust the range used by their pitch bend lever. The range is specified by using the\n",(0,i.kt)("inlineCode",{parentName:"p"},"semitones")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"cents")," parameters. For example, setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"semitones")," parameter to ",(0,i.kt)("inlineCode",{parentName:"p"},"12"),"\nmeans that the pitch bend range will be 12 semitones above and below the nominal pitch."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"setPitchBendRange(semitones, cents, options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"setpolyphonicmode"},(0,i.kt)("inlineCode",{parentName:"h3"},".setPolyphonicMode(...)")),(0,i.kt)("p",null,"Sets the polyphonic mode. In ",(0,i.kt)("inlineCode",{parentName:"p"},'"poly"')," mode (usually the default), multiple notes can be played\nand heard at the same time. In ",(0,i.kt)("inlineCode",{parentName:"p"},'"mono"')," mode, only one note will be heard at once even if\nmultiple notes are being played."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"setPolyphonicMode(mode, options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"setprogram"},(0,i.kt)("inlineCode",{parentName:"h3"},".setProgram(...)")),(0,i.kt)("p",null,"Sends a MIDI ",(0,i.kt)("strong",{parentName:"p"},"program change")," message at the scheduled time."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": since version 3.0, the program number is an integer between 1 and 128. In versions\n1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\nthat use a numbering scheme starting at 1."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"setProgram(program, options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"setregisteredparameter"},(0,i.kt)("inlineCode",{parentName:"h3"},".setRegisteredParameter(...)")),(0,i.kt)("p",null,"Sets the specified MIDI registered parameter to the desired value. The value is defined with\nup to two bytes of data (msb, lsb) that each can go from 0 to 127."),(0,i.kt)("p",null,"MIDI\n","[registered parameters]","\n(",(0,i.kt)("a",{parentName:"p",href:"https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2"},"https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2"),")\nextend the original list of control change messages. The MIDI 1.0 specification lists only a\nlimited number of them. Here are the original registered parameters with the identifier that\ncan be used as the first parameter of this function:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Pitchbend Range (0x00, 0x00): ",(0,i.kt)("inlineCode",{parentName:"li"},'"pitchbendrange"')),(0,i.kt)("li",{parentName:"ul"},"Channel Fine Tuning (0x00, 0x01): ",(0,i.kt)("inlineCode",{parentName:"li"},'"channelfinetuning"')),(0,i.kt)("li",{parentName:"ul"},"Channel Coarse Tuning (0x00, 0x02): ",(0,i.kt)("inlineCode",{parentName:"li"},'"channelcoarsetuning"')),(0,i.kt)("li",{parentName:"ul"},"Tuning Program (0x00, 0x03): ",(0,i.kt)("inlineCode",{parentName:"li"},'"tuningprogram"')),(0,i.kt)("li",{parentName:"ul"},"Tuning Bank (0x00, 0x04): ",(0,i.kt)("inlineCode",{parentName:"li"},'"tuningbank"')),(0,i.kt)("li",{parentName:"ul"},"Modulation Range (0x00, 0x05): ",(0,i.kt)("inlineCode",{parentName:"li"},'"modulationrange"'))),(0,i.kt)("p",null,"Note that the ",(0,i.kt)("strong",{parentName:"p"},"Tuning Program")," and ",(0,i.kt)("strong",{parentName:"p"},"Tuning Bank")," parameters are part of the ",(0,i.kt)("em",{parentName:"p"},"MIDI Tuning\nStandard"),", which is not widely implemented."),(0,i.kt)("p",null,"Another set of extra parameters have been later added for 3D sound controllers. They are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Azimuth Angle (0x3D, 0x00): ",(0,i.kt)("inlineCode",{parentName:"li"},'"azimuthangle"')),(0,i.kt)("li",{parentName:"ul"},"Elevation Angle (0x3D, 0x01): ",(0,i.kt)("inlineCode",{parentName:"li"},'"elevationangle"')),(0,i.kt)("li",{parentName:"ul"},"Gain (0x3D, 0x02): ",(0,i.kt)("inlineCode",{parentName:"li"},'"gain"')),(0,i.kt)("li",{parentName:"ul"},"Distance Ratio (0x3D, 0x03): ",(0,i.kt)("inlineCode",{parentName:"li"},'"distanceratio"')),(0,i.kt)("li",{parentName:"ul"},"Maximum Distance (0x3D, 0x04): ",(0,i.kt)("inlineCode",{parentName:"li"},'"maximumdistance"')),(0,i.kt)("li",{parentName:"ul"},"Maximum Distance Gain (0x3D, 0x05): ",(0,i.kt)("inlineCode",{parentName:"li"},'"maximumdistancegain"')),(0,i.kt)("li",{parentName:"ul"},"Reference Distance Ratio (0x3D, 0x06): ",(0,i.kt)("inlineCode",{parentName:"li"},'"referencedistanceratio"')),(0,i.kt)("li",{parentName:"ul"},"Pan Spread Angle (0x3D, 0x07): ",(0,i.kt)("inlineCode",{parentName:"li"},'"panspreadangle"')),(0,i.kt)("li",{parentName:"ul"},"Roll Angle (0x3D, 0x08): ",(0,i.kt)("inlineCode",{parentName:"li"},'"rollangle"'))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"setRegisteredParameter(parameter, data, options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"settuningbank"},(0,i.kt)("inlineCode",{parentName:"h3"},".setTuningBank(...)")),(0,i.kt)("p",null,"Sets the MIDI tuning bank to use. Note that the ",(0,i.kt)("strong",{parentName:"p"},"Tuning Bank")," parameter is part of the\n",(0,i.kt)("em",{parentName:"p"},"MIDI Tuning Standard"),", which is not widely implemented."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": since version 3.0, the bank number is an integer between 1 and 128. In versions\n1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\nthat use a numbering scheme starting at 1."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"setTuningBank(value, options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"settuningprogram"},(0,i.kt)("inlineCode",{parentName:"h3"},".setTuningProgram(...)")),(0,i.kt)("p",null,"Sets the MIDI tuning program to use. Note that the ",(0,i.kt)("strong",{parentName:"p"},"Tuning Program")," parameter is part of the\n",(0,i.kt)("em",{parentName:"p"},"MIDI Tuning Standard"),", which is not widely implemented."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": since version 3.0, the program number is an integer between 1 and 128. In versions\n1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\nthat use a numbering scheme starting at 1."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"setTuningProgram(value, options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"stopnote"},(0,i.kt)("inlineCode",{parentName:"h3"},".stopNote(...)")),(0,i.kt)("p",null,"This is an alias to the ","[sendNoteOff()]","{@link OutputChannel#sendNoteOff} method."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"stopNote(note, options) \u21d2 Output")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"turnnotesoff"},(0,i.kt)("inlineCode",{parentName:"h3"},".turnNotesOff(...)")),(0,i.kt)("p",null,"Sends an ",(0,i.kt)("strong",{parentName:"p"},"all notes off")," channel mode message. This will make all currently playing notes\nfade out just as if their key had been released. This is different from the\n","[turnSoundOff()]","{@link OutputChannel#turnSoundOff} method which mutes all sounds immediately."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"turnNotesOff(options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("h3",{id:"turnsoundoff"},(0,i.kt)("inlineCode",{parentName:"h3"},".turnSoundOff(...)")),(0,i.kt)("p",null,"Sends an ",(0,i.kt)("strong",{parentName:"p"},"all sound off")," channel mode message. This will silence all sounds playing on that\nchannel but will not prevent new sounds from being triggered."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"turnSoundOff(options, options.time) \u21d2 OutputChannel")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")))}d.isMDXComponent=!0}}]);